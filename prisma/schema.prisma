
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // directUrl = env("DATABASE_URL_UNPOOLED") // Commented out since DATABASE_URL_UNPOOLED is not available
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  name              String
  role              UserRole
  phone             String?
  isActive          Boolean   @default(true)  // Added missing field for authentication
  lastLoginAt       DateTime? // Added missing field for authentication
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Identity & Phone Verification Fields
  phoneVerified     Boolean   @default(false)
  phoneVerifiedAt   DateTime?
  identityVerified  Boolean   @default(false)
  identityVerifiedAt DateTime?
  verificationLevel VerificationLevel @default(UNVERIFIED)
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?   // For authenticator apps
  twoFactorPhone    String?   // Phone number for SMS 2FA
  resetToken        String?   // Password reset token
  resetTokenExpiry  DateTime? // Password reset token expiry
  verificationNotes String?   // Admin notes about verification status
  
  // Freemium Usage Tracking Fields (v1.5.0)
  photosUsedThisMonth    Int       @default(0)    // Monthly photo usage count
  videosUsedThisMonth    Int       @default(0)    // Monthly video usage count  
  usageResetDate         DateTime  @default(now()) // When monthly limits reset
  totalPhotoPurchases    Int       @default(0)    // Total individual photo purchases
  totalVideoPurchases    Int       @default(0)    // Total individual video purchases
  freePhotoUsed          Boolean   @default(false) // Free photo used (for FREE plan)
  freeVideoUsed          Boolean   @default(false) // Free video used (for FREE plan)
  
  accounts          Account[]
  children          Child[]   @relation("ParentChildren")
  purchasedMemories Memory[]  @relation("MemoryPurchaser")
  sessions          Session[]
  managedVenues     Venue[]   @relation("VenueAdmin")
  uploadedFloorPlans FloorPlan[] @relation("FloorPlanUploader")
  
  // Enhanced Alert System Relations
  alertAcknowledgments    AlertAcknowledgment[]    @relation("UserAlertAcknowledgments")
  alertTimelineEntries    AlertTimelineEntry[]     @relation("UserAlertTimelineEntries")
  alertNotifications      AlertNotification[]      @relation("UserAlertNotifications")
  alertNotificationRecipients AlertNotification[]  @relation("UserAlertNotificationRecipients")
  emergencyContacts       EmergencyContact[]       @relation("UserEmergencyContacts")
  notificationPreferences NotificationPreference[] @relation("UserNotificationPreferences")
  webSocketEvents         WebSocketEvent[]         @relation("UserWebSocketEvents")
  
  // Mobile Dashboard Relations
  mobileDevices           MobileDevice[]           @relation("UserMobileDevices")
  photoNotifications      PhotoNotification[]      @relation("UserPhotoNotifications")
  checkInOutEvents        CheckInOutEvent[]        @relation("UserCheckInOutEvents")
  mobileNotifications     MobileNotification[]     @relation("UserMobileNotifications")
  offlineDataCache        OfflineDataCache[]       @relation("UserOfflineDataCache")
  parentSessions          ParentSession[]          @relation("UserParentSessions")
  
  // Safety Analytics Relations
  analyticsEvents         AnalyticsEvent[]         @relation("UserAnalyticsEvents")
  generatedReports        SafetyReport[]           @relation("UserGeneratedReports")
  reportedIncidents       IncidentReport[]         @relation("UserReportedIncidents")
  assignedIncidents       IncidentReport[]         @relation("UserAssignedIncidents")
  engagementMetrics       ParentEngagement[]       @relation("UserEngagementMetrics")
  createdSchedules        ReportSchedule[]         @relation("UserCreatedSchedules")
  appliedConfigs          AnalyticsConfig[]        @relation("UserAppliedConfigs")

  // Digital Check-in/Check-out Relations
  parentQRCodes           ParentQRCode[]           @relation("ParentQRCodes")
  parentMemberships       Membership[]             @relation("ParentMemberships") 
  parentPickupAuth        PickupAuthorization[]    @relation("ParentPickupAuth")

  // Messaging and Communication Relations
  uploadedMedia             SharedMedia[]            @relation("UserUploadedMedia")
  mediaPermissions          MediaPermission[]        @relation("ParentMediaPermissions")
  mediaPurchases            MediaPurchase[]          @relation("UserMediaPurchases")
  connectionRequests        ParentConnection[]       @relation("ParentConnectionRequester")
  connectionReceived        ParentConnection[]       @relation("ParentConnectionReceiver")
  organizedActivities       SharedActivity[]         @relation("UserOrganizedActivities")
  chatParticipants          ChatParticipant[]        @relation("UserChatParticipants")
  sentMessages              Message[]                @relation("UserSentMessages")
  messageDeliveries         MessageDelivery[]        @relation("UserMessageDeliveries")
  navigationRequests        NavigationRequest[]      @relation("ParentNavigationRequests")
  adminGroups               CommunityGroup[]         @relation("UserAdminGroups")
  communityMemberships      CommunityMember[]        @relation("UserCommunityMemberships")
  organizedEvents           CommunityEvent[]         @relation("UserOrganizedEvents")
  eventParticipations       EventParticipant[]       @relation("UserEventParticipations")
  mediaReports              MediaReport[]            @relation("UserMediaReports")
  assignedReports           MediaReport[]            @relation("UserAssignedReports")
  contentModerations        ContentModeration[]      @relation("UserContentModerations")
  communicationNotifications CommunicationNotification[] @relation("UserCommunicationNotifications")
  privacySettings           PrivacySettings?         @relation("UserPrivacySettings")
  
  // Legal Compliance Relations
  legalAgreements           LegalAgreement[]         @relation("UserLegalAgreements")

  // Identity & Phone Verification Relations
  phoneVerificationAttempts PhoneVerification[]      @relation("UserPhoneVerifications")
  identityVerificationRequests IdentityVerification[] @relation("UserIdentityVerifications") 
  twoFactorAttempts         TwoFactorAttempt[]       @relation("UserTwoFactorAttempts")
  verificationStatusHistory VerificationStatusHistory[] @relation("UserVerificationHistory")
  twoFactorBackupCodes      TwoFactorBackupCode[]    @relation("UserBackupCodes")
  
  // Enhanced Verification Relations
  webauthnCredentials       WebAuthnCredential[]     @relation("UserWebAuthnCredentials")
  emailVerifications        EmailVerification[]      @relation("UserEmailVerifications")
  pushNotificationDevices   PushNotificationDevice[] @relation("UserPushDevices")
  verificationAuditLogs     VerificationAuditLog[]   @relation("UserVerificationAuditLogs")

  // Payment and Subscription Relations
  subscription              UserSubscription?        @relation("UserSubscription")
  paymentMethods            UserPaymentMethod[]      @relation("UserPaymentMethods")
  paymentTransactions       PaymentTransaction[]     @relation("UserPaymentTransactions")
  subscriptionHistory       SubscriptionHistory[]    @relation("UserSubscriptionHistory")
  usageRecords              UsageRecord[]            @relation("UserUsageRecords")
  billingEvents             BillingEvent[]           @relation("UserBillingEvents")
  
  // Discount Code Relations
  discountCodeUsages        DiscountCodeUsage[]      @relation("UserDiscountUsages")

  // Email Automation Relations
  emailPreferences        EmailPreferences?         @relation("UserEmailPreferences")
  emailLogs               EmailLog[]                @relation("UserEmailLogs")
  emailNotifications      EmailNotification[]       @relation("UserEmailNotifications")
  segmentMemberships      EmailSegmentMember[]      @relation("UserSegmentMemberships")
  createdEmailSegments    EmailSegment[]            @relation("UserEmailSegments")
  createdEmailCampaigns   EmailCampaign[]           @relation("UserCreatedCampaigns")
  approvedEmailCampaigns  EmailCampaign[]           @relation("UserApprovedCampaigns")
  automationRules         EmailAutomationRule[]     @relation("UserAutomationRules")
  automationExecutions    EmailAutomationExecution[] @relation("UserAutomationExecutions")
  emailTemplates          EmailTemplate[]           @relation("UserEmailTemplates")

  // Support Center Relations
  supportTickets          SupportTicket[]           @relation("UserSupportTickets")
  supportAgent            SupportAgent?             @relation("UserSupportAgent")
  chatSessions            SupportChatSession[]      @relation("UserChatSessions")
  knowledgeBaseArticles   KnowledgeBaseArticle[]    @relation("UserKnowledgeBaseArticles")
  articleFeedback         ArticleFeedback[]         @relation("UserArticleFeedback")
  chatMessages            ChatMessage[]             @relation("UserChatMessages")
  ticketMessages          SupportTicketMessage[]    @relation("UserTicketMessages")
  ticketTimeline          SupportTicketTimeline[]   @relation("UserTicketTimeline")

  // Family Member Management Relations
  sentFamilyInvitations     FamilyInvitation[]        @relation("UserSentInvitations")
  receivedFamilyInvitations FamilyInvitation[]        @relation("UserReceivedInvitations")
  familyMemberships         FamilyMember[]            @relation("UserFamilyMemberships")
  familyMembers             FamilyMember[]            @relation("UserFamilyMembers")
  grantedPermissions        FamilyPermission[]        @relation("UserGrantedPermissions")
  receivedPermissions       FamilyPermission[]        @relation("UserReceivedPermissions")
  childAccessGrants         ChildAccess[]             @relation("UserChildAccessGrants")
  childAccessReceived       ChildAccess[]             @relation("UserChildAccessReceived")
  familyOwnerships          FamilyMember[]            @relation("UserFamilyOwnerships")

  // Individual Purchase Relations (v1.5.0)
  individualPurchases       IndividualPurchase[]      @relation("UserIndividualPurchases")
  photoVideoPackPurchases   PhotoVideoPackPurchase[]  @relation("UserPhotoVideoPackPurchases")
  photoVideoPackCredits     PhotoVideoPackCredit[]    @relation("UserPhotoVideoPackCredits")

  @@map("users")
}

model Venue {
  id                String                 @id @default(cuid())
  name              String
  address           String
  city              String
  state             String
  zipCode           String
  phone             String
  email             String
  operatingHours    Json
  capacity          Int
  ageGroups         Json?
  cameraConfig      Json
  alertSettings     Json
  adminId           String
  active            Boolean                @default(true)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  alerts            Alert[]
  children          Child[]
  recognitionEvents FaceRecognitionEvent[]
  memories          Memory[]
  trackingEvents    TrackingEvent[]
  analytics         VenueAnalytics[]
  admin             User                   @relation("VenueAdmin", fields: [adminId], references: [id])
  floorPlans        FloorPlan[]
  cameras           Camera[]
  cameraEvents      CameraEvent[]
  cameraRecommendations CameraRecommendation[]
  
  // Enhanced Alert System Relations
  alertRules              AlertRule[]              @relation("VenueAlertRules")
  enhancedAlerts          EnhancedAlert[]          @relation("VenueEnhancedAlerts")
  emergencyContacts       EmergencyContact[]       @relation("VenueEmergencyContacts")
  unauthorizedDetections  UnauthorizedDetection[]  @relation("VenueUnauthorizedDetections")
  childSightings          ChildSighting[]
  
  // Mobile Dashboard Relations
  photoNotifications      PhotoNotification[]
  childLocationHistory    ChildLocationHistory[]
  checkInOutEvents        CheckInOutEvent[]
  venueQRCodes            VenueQRCode[]
  
  // Safety Analytics Relations
  analyticsEvents         AnalyticsEvent[]         @relation("VenueAnalyticsEvents")
  safetyReports           SafetyReport[]           @relation("VenueSafetyReports")
  incidentReports         IncidentReport[]         @relation("VenueIncidentReports")
  cameraPerformance       CameraPerformance[]      @relation("VenueCameraPerformance")
  parentEngagement        ParentEngagement[]       @relation("VenueParentEngagement")
  trafficPatterns         TrafficPattern[]         @relation("VenueTrafficPatterns")
  performanceMetrics      PerformanceMetric[]      @relation("VenuePerformanceMetrics")
  reportSchedules         ReportSchedule[]         @relation("VenueReportSchedules")
  analyticsConfigs        AnalyticsConfig[]        @relation("VenueAnalyticsConfigs")

  // Digital Check-in/Check-out Relations
  membershipPackages      MembershipPackage[]      @relation("VenueMembershipPackages")
  memberships             Membership[]             @relation("VenueMemberships")
  posTransactions         POSTransaction[]         @relation("VenuePOSTransactions") 
  kiosks                  CheckInKiosk[]           @relation("VenueKiosks")
  workflows               WorkflowAutomation[]     @relation("VenueWorkflows")
  complianceReports       ComplianceReport[]       @relation("VenueComplianceReports")

  // Enhanced AI Features Relations
  aiAnalysisSessions      AIAnalysisSession[]      @relation("VenueAIAnalysisSessions")
  ageAnalyses             AgeEstimationAnalysis[]  @relation("VenueAgeAnalyses")
  emotionAnalyses         EmotionDetectionAnalysis[] @relation("VenueEmotionAnalyses")
  crowdAnalyses           CrowdDensityAnalysis[]   @relation("VenueCrowdAnalyses")
  behaviorAnalyses        BehaviorPatternAnalysis[] @relation("VenueBehaviorAnalyses")
  voiceAnalyses           VoicePatternAnalysis[]   @relation("VenueVoiceAnalyses")
  visualAnalyses          VisualPatternAnalysis[]  @relation("VenueVisualAnalyses")
  aiInsights              AIInsight[]              @relation("VenueAIInsights")
  aiSafetyScores          AISafetyScore[]          @relation("VenueAISafetyScores")
  aiModelPerformance      AIModelPerformance[]     @relation("VenueAIModelPerformance")

  // Messaging and Communication Relations
  sharedMedia             SharedMedia[]            @relation("VenueSharedMedia")
  sharedActivities        SharedActivity[]         @relation("VenueSharedActivities")
  chats                   Chat[]                   @relation("VenueChats")
  navigationRequests      NavigationRequest[]      @relation("VenueNavigationRequests")
  communityGroups         CommunityGroup[]         @relation("VenueCommunityGroups")
  communityEvents         CommunityEvent[]         @relation("VenueCommunityEvents")

  // Payment and Revenue Sharing Relations
  paymentSettings         VenuePaymentSettings?    @relation("VenuePaymentSettings")
  revenueTransactions     RevenueTransaction[]     @relation("VenueRevenueTransactions")
  payoutHistory           PayoutHistory[]          @relation("VenuePayoutHistory")
  discountUsages          DiscountCodeUsage[]      @relation("VenueDiscountUsages")

  // Support Center Relations
  supportTickets          SupportTicket[]          @relation("VenueSupportTickets")
  
  // WebSocket Events Relations
  webSocketEvents         WebSocketEvent[]         @relation("VenueWebSocketEvents")

  @@map("venues")
}

model Child {
  id                     String                 @id @default(cuid())
  firstName              String
  lastName               String
  dateOfBirth            DateTime
  profilePhoto           String?
  biometricId            String?
  status                 ChildStatus            @default(ACTIVE)
  parentId               String
  currentVenueId         String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  faceRecognitionConsent Boolean                @default(false)
  faceRecognitionEnabled Boolean                @default(false)
  recognitionThreshold   Float                  @default(0.95)
  alerts                 Alert[]
  currentVenue           Venue?                 @relation(fields: [currentVenueId], references: [id])
  parent                 User                   @relation("ParentChildren", fields: [parentId], references: [id])
  faceCollection         FaceCollection?
  recognitionEvents      FaceRecognitionEvent[]
  memories               Memory[]
  trackingEvents         TrackingEvent[]
  
  // Enhanced Alert System Relations
  childSightings         ChildSighting[]
  enhancedAlerts         EnhancedAlert[]
  emergencyContacts      EmergencyContact[]
  
  // Mobile Dashboard Relations
  photoNotifications     PhotoNotification[]
  childLocationHistory   ChildLocationHistory[]
  checkInOutEvents       CheckInOutEvent[]
  mobileNotifications    MobileNotification[]
  
  // Safety Analytics Relations
  analyticsEvents        AnalyticsEvent[]        @relation("ChildAnalyticsEvents")
  incidentReports        IncidentReport[]        @relation("ChildIncidentReports")

  // Digital Check-in/Check-out Relations
  childQRCodes           ChildQRCode[]
  pickupAuthorizations   PickupAuthorization[]

  // Enhanced AI Features Relations
  ageAnalyses            AgeEstimationAnalysis[]  @relation("ChildAgeAnalyses")
  emotionAnalyses        EmotionDetectionAnalysis[] @relation("ChildEmotionAnalyses")
  behaviorAnalyses       BehaviorPatternAnalysis[] @relation("ChildBehaviorAnalyses")
  voiceAnalyses          VoicePatternAnalysis[]   @relation("ChildVoiceAnalyses")
  visualAnalyses         VisualPatternAnalysis[]  @relation("ChildVisualAnalyses")
  aiInsights             AIInsight[]              @relation("ChildAIInsights")

  // Messaging and Communication Relations
  mediaPermissions       MediaPermission[]        @relation("ChildMediaPermissions")
  friendships1           ChildFriendship[]        @relation("ChildFriendships1")
  friendships2           ChildFriendship[]        @relation("ChildFriendships2")
  navigationRequests     NavigationRequest[]      @relation("ChildNavigationRequests")

  // Family Member Management Relations
  familyMemberAccess     ChildAccess[]            @relation("ChildFamilyMemberAccess")
  familyInvitations      FamilyInvitation[]       // Missing opposite relation

  @@map("children")
}

model TrackingEvent {
  id         String            @id @default(cuid())
  type       TrackingEventType
  timestamp  DateTime          @default(now())
  location   Json?
  confidence Float?
  cameraId   String?
  metadata   Json?
  childId    String
  venueId    String
  child      Child             @relation(fields: [childId], references: [id])
  venue      Venue             @relation(fields: [venueId], references: [id])

  @@map("tracking_events")
}

model Memory {
  id                String                 @id @default(cuid())
  type              MemoryType
  fileName          String
  fileUrl           String
  originalUrl       String?
  thumbnailUrl      String?
  capturedAt        DateTime
  price             Float
  status            MemoryStatus           @default(AVAILABLE)
  childId           String
  venueId           String
  purchaserId       String?
  purchasedAt       DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  recognitionEvents FaceRecognitionEvent[]
  child             Child                  @relation(fields: [childId], references: [id])
  purchaser         User?                  @relation("MemoryPurchaser", fields: [purchaserId], references: [id])
  venue             Venue                  @relation(fields: [venueId], references: [id])

  // Individual Purchase Relations (v1.5.0)
  individualPurchases    IndividualPurchase[]    @relation("MemoryIndividualPurchases")
  packCreditUses         PhotoVideoPackCredit[]  @relation("MemoryPackCreditUses")

  @@map("memories")
}

model Alert {
  id          String      @id @default(cuid())
  type        AlertType
  title       String
  description String
  severity    Int
  status      AlertStatus @default(ACTIVE)
  childId     String?
  venueId     String
  resolvedAt  DateTime?
  resolvedBy  String?
  resolution  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  child       Child?      @relation(fields: [childId], references: [id])
  venue       Venue       @relation(fields: [venueId], references: [id])

  @@map("alerts")
}

model VenueAnalytics {
  id              String   @id @default(cuid())
  date            DateTime
  totalCheckIns   Int      @default(0)
  totalCheckOuts  Int      @default(0)
  peakOccupancy   Int      @default(0)
  averageStayTime Int      @default(0)
  memoryRevenue   Float    @default(0)
  photosSold      Int      @default(0)
  videosSold      Int      @default(0)
  alertsGenerated Int      @default(0)
  emergencyAlerts Int      @default(0)
  avgResponseTime Int      @default(0)
  venueId         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  venue           Venue    @relation(fields: [venueId], references: [id])

  @@unique([venueId, date])
  @@map("venue_analytics")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ContactMessage {
  id        String               @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    ContactMessageStatus @default(NEW)
  formType  ContactFormType      @default(CONTACT)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@map("contact_messages")
}

model FaceCollection {
  id              String                @id @default(cuid())
  awsCollectionId String                @unique
  collectionName  String
  status          FaceRecognitionStatus @default(PENDING)
  childId         String                @unique
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  child           Child                 @relation(fields: [childId], references: [id], onDelete: Cascade)
  faceRecords     FaceRecord[]

  @@map("face_collections")
}

model FaceRecord {
  id                String                @id @default(cuid())
  awsFaceId         String                @unique
  imageUrl          String
  imageKey          String
  boundingBox       Json?
  confidence        Float?
  landmarks         Json?
  emotions          Json?
  ageRange          Json?
  quality           Json?
  status            FaceRecognitionStatus @default(PENDING)
  registrationNotes String?
  collectionId      String
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  collection        FaceCollection        @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@map("face_records")
}

model FaceRecognitionEvent {
  id              String               @id @default(cuid())
  eventType       RecognitionEventType
  confidence      Float
  matchedFaceId   String?
  sourceImageUrl  String
  sourceImageKey  String
  boundingBox     Json?
  recognitionData Json?
  processingTime  Int?
  childId         String
  venueId         String?
  memoryId        String?
  createdAt       DateTime             @default(now())
  child           Child                @relation(fields: [childId], references: [id])
  memory          Memory?              @relation(fields: [memoryId], references: [id])
  venue           Venue?               @relation(fields: [venueId], references: [id])
  
  // Enhanced Alert System Relations
  childSightings  ChildSighting[]

  @@map("face_recognition_events")
}

// Advanced Zone Management Models

model ZoneConfiguration {
  id                    String                 @id @default(cuid())
  zoneId                String                 @unique
  maxCapacity           Int                    @default(0)
  minStaffRequired      Int                    @default(0)
  maxAge                Int?                   // Maximum age allowed in zone
  minAge                Int?                   // Minimum age allowed in zone
  requiresAdultSupervision Boolean             @default(false)
  isRestrictedAccess    Boolean                @default(false)
  accessPermissions     Json? // Who can access this zone
  operatingHours        Json?                  // Operating hours for zone {"start": "09:00", "end": "17:00"}
  isMaintenanceMode     Boolean                @default(false)
  isEmergencyExit       Boolean                @default(false)
  priorityLevel         ZonePriority           @default(NORMAL)
  safetyLevel           SafetyLevel            @default(STANDARD)
  hazardLevel           HazardLevel            @default(NONE)
  evacuationPriority    Int                    @default(1) // 1 = highest priority
  allowedActivities     Json?               // List of allowed activities
  prohibitedItems       Json?               // List of prohibited items
  requiredEquipment     Json?               // Required safety equipment
  alertThresholds       Json                   // Alert thresholds for capacity, time, etc.
  environmentSettings   Json?                  // Temperature, lighting, sound levels
  complianceRequirements Json?                 // Regulatory compliance requirements
  metadata              Json?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  zone                  FloorPlanZone          @relation("ZoneConfigurationZone", fields: [zoneId], references: [id], onDelete: Cascade)
  
  @@map("zone_configurations")
}

model ZoneAccessRule {
  id                String             @id @default(cuid())
  zoneId            String
  ruleType          ZoneAccessRuleType
  userRole          UserRole?          // Which user role this rule applies to
  ageRange          Json?              // {"min": 5, "max": 12} - age range restriction
  timeRestrictions  Json?              // Time-based access restrictions
  membershipRequired Boolean           @default(false)
  staffEscortRequired Boolean          @default(false)
  maxOccupancyTime  Int?               // Maximum time allowed in zone (minutes)
  requiresPermission Boolean           @default(false)
  permissionGrantedBy String?          // User ID who can grant permission
  priority          Int                @default(1)
  isActive          Boolean            @default(true)
  conditions        Json?              // Additional conditions for access
  exceptions        Json?              // Exceptions to the rule
  violationAction   ViolationAction    @default(ALERT)
  metadata          Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  zone              FloorPlanZone      @relation("ZoneAccessRules", fields: [zoneId], references: [id], onDelete: Cascade)
  
  @@map("zone_access_rules")
}

model ZoneCapacityRecord {
  id                String           @id @default(cuid())
  zoneId            String
  currentOccupancy  Int              @default(0)
  maxCapacity       Int
  utilizationRate   Float            @default(0.0) // Current occupancy / max capacity
  averageStayTime   Int?             // Average time spent in zone (minutes)
  peakOccupancy     Int              @default(0)
  peakTime          DateTime?
  queueLength       Int              @default(0) // Number waiting to enter
  entryRate         Float            @default(0.0) // Entries per hour
  exitRate          Float            @default(0.0) // Exits per hour
  capacityStatus    CapacityStatus   @default(NORMAL)
  lastUpdated       DateTime         @default(now())
  recordDate        DateTime         @default(now())
  zone              FloorPlanZone    @relation("ZoneCapacityRecords", fields: [zoneId], references: [id], onDelete: Cascade)
  
  @@unique([zoneId, recordDate])
  @@index([zoneId, recordDate])
  @@map("zone_capacity_records")
}

model ZoneOccupancyHistory {
  id                String           @id @default(cuid())
  zoneId            String
  occupancyCount    Int
  timestamp         DateTime         @default(now())
  eventType         OccupancyEventType
  childId           String?          // If related to specific child entry/exit
  duration          Int?             // Time spent in zone for exit events
  entryMethod       String?          // How child entered (camera detection, manual, etc.)
  confidence        Float?           // Confidence level of detection
  metadata          Json?
  zone              FloorPlanZone    @relation("ZoneOccupancyHistory", fields: [zoneId], references: [id], onDelete: Cascade)
  
  @@index([zoneId, timestamp])
  @@index([childId, timestamp])
  @@map("zone_occupancy_history")
}

model ZoneAccessLog {
  id                String           @id @default(cuid())
  zoneId            String
  childId           String?
  userId            String?          // Staff member if manual entry
  accessType        ZoneAccessType
  accessMethod      AccessMethod     @default(AUTOMATIC)
  accessResult      AccessResult     @default(GRANTED)
  denialReason      String?          // Reason for access denial
  duration          Int?             // Time spent in zone (minutes)
  entryTime         DateTime
  exitTime          DateTime?
  isAuthorized      Boolean          @default(true)
  authorizedBy      String?          // Staff member who authorized access
  ruleViolations    Json?         // List of violated rules
  alertTriggered    Boolean          @default(false)
  alertId           String?          // Associated alert ID
  ipAddress         String?          // For kiosk/digital access
  deviceId          String?          // Device used for access
  biometricUsed     Boolean          @default(false)
  qrCodeUsed        String?          // QR code used for access
  cameraDetection   Boolean          @default(false)
  confidence        Float?           // Detection confidence
  metadata          Json?
  zone              FloorPlanZone    @relation("ZoneAccessLogs", fields: [zoneId], references: [id], onDelete: Cascade)
  
  @@index([zoneId, entryTime])
  @@index([childId, entryTime])
  @@index([accessResult, entryTime])
  @@map("zone_access_logs")
}

model EvacuationRoute {
  id                String           @id @default(cuid())
  name              String
  fromZoneId        String
  toZoneId          String           // Usually an emergency exit zone
  routePath         Json             // Array of coordinates defining the path
  distance          Float            // Distance in meters
  estimatedTime     Int              // Estimated evacuation time in seconds
  maxCapacity       Int              // Maximum people this route can handle
  currentLoad       Int              @default(0)
  isActive          Boolean          @default(true)
  isPrimary         Boolean          @default(false) // Primary evacuation route
  isAccessible      Boolean          @default(true) // Wheelchair accessible
  hazardLevel       HazardLevel      @default(NONE)
  lighting          Boolean          @default(true) // Adequate lighting
  signage           Boolean          @default(true) // Proper emergency signage
  obstacleStatus    ObstacleStatus   @default(CLEAR)
  lastInspection    DateTime?
  inspectedBy       String?
  maintenanceNotes  String?
  emergencyContacts Json?            // Emergency contacts for this route
  alternativeRoutes Json?         // IDs of alternative routes
  weatherDependency Boolean          @default(false) // Route affected by weather
  specialRequirements Json?          // Special equipment or procedures needed
  metadata          Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  fromZone          FloorPlanZone    @relation("EvacuationFromZone", fields: [fromZoneId], references: [id], onDelete: Cascade)
  toZone            FloorPlanZone    @relation("EvacuationToZone", fields: [toZoneId], references: [id], onDelete: Cascade)
  routeAssignments  RouteAssignment[]
  
  @@index([fromZoneId, isActive])
  @@index([isPrimary, isActive])
  @@map("evacuation_routes")
}

model RouteAssignment {
  id                String           @id @default(cuid())
  routeId           String
  childId           String?          // Assigned child for evacuation
  staffId           String?          // Assigned staff member
  priority          Int              @default(1) // 1 = highest priority
  estimatedTime     Int              // Estimated time for this assignment
  actualTime        Int?             // Actual evacuation time
  status            EvacuationStatus @default(PENDING)
  assignedAt        DateTime         @default(now())
  startedAt         DateTime?
  completedAt       DateTime?
  location          Json?            // Current location during evacuation
  assistanceNeeded  Boolean          @default(false)
  specialNeeds      String?          // Special assistance requirements
  contactAttempts   Int              @default(0)
  lastContact       DateTime?
  metadata          Json?
  route             EvacuationRoute  @relation(fields: [routeId], references: [id], onDelete: Cascade)
  
  @@index([routeId, status])
  @@index([priority, status])
  @@map("route_assignments")
}

model ZoneNotification {
  id                String                    @id @default(cuid())
  zoneId            String
  notificationType  ZoneNotificationType
  title             String
  message           String
  priority          NotificationPriority      @default(NORMAL)
  targetAudience    Json?    // Who should receive this notification
  deliveryChannels  Json?     // How to deliver the notification
  isScheduled       Boolean                   @default(false)
  scheduledAt       DateTime?
  isRecurring       Boolean                   @default(false)
  recurrencePattern Json?                     // Cron-like pattern for recurring notifications
  expiresAt         DateTime?
  isActive          Boolean                   @default(true)
  conditions        Json?                     // Conditions that trigger the notification
  customData        Json?
  sentCount         Int                       @default(0)
  deliveryStatus    NotificationDeliveryStatus @default(PENDING)
  lastSent          DateTime?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  zone              FloorPlanZone             @relation("ZoneNotifications", fields: [zoneId], references: [id], onDelete: Cascade)
  
  @@index([zoneId, isActive])
  @@index([scheduledAt, isActive])
  @@map("zone_notifications")
}

// Floor Plan Models

model FloorPlan {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  imageUrl          String
  imageKey          String
  width             Int                    // Image width in pixels
  height            Int                    // Image height in pixels
  scale             Float                  @default(1.0) // Pixels per meter
  version           Int                    @default(1)
  isActive          Boolean                @default(true)
  venueId           String
  uploadedBy        String
  uploadedAt        DateTime               @default(now())
  lastModified      DateTime               @updatedAt
  metadata          Json?
  venue             Venue                  @relation(fields: [venueId], references: [id], onDelete: Cascade)
  uploader          User                   @relation("FloorPlanUploader", fields: [uploadedBy], references: [id])
  zones             FloorPlanZone[]
  cameras           Camera[]
  
  @@index([venueId, isActive])
  @@map("floor_plans")
}

model FloorPlanZone {
  id                String                 @id @default(cuid())
  name              String
  type              ZoneType
  coordinates       Json                   // Array of {x, y} coordinates defining the zone boundary
  color             String                 @default("#3B82F6") // Hex color for zone display
  isActive          Boolean                @default(true)
  description       String?
  capacity          Int?
  floorPlanId       String
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  floorPlan         FloorPlan              @relation(fields: [floorPlanId], references: [id], onDelete: Cascade)
  configuration     ZoneConfiguration?     @relation("ZoneConfigurationZone")
  accessRules       ZoneAccessRule[]       @relation("ZoneAccessRules")
  capacityRecords   ZoneCapacityRecord[]   @relation("ZoneCapacityRecords")
  occupancyHistory  ZoneOccupancyHistory[] @relation("ZoneOccupancyHistory")
  accessLogs        ZoneAccessLog[]        @relation("ZoneAccessLogs")
  notifications     ZoneNotification[]     @relation("ZoneNotifications")
  evacuationFromRoutes EvacuationRoute[]   @relation("EvacuationFromZone")
  evacuationToRoutes   EvacuationRoute[]   @relation("EvacuationToZone")
  cameras           Camera[]               @relation("ZoneCameras")
  childSightings    ChildSighting[]        @relation("ChildSightingZone")
  enhancedAlerts    EnhancedAlert[]        // Missing relation
  
  @@index([floorPlanId, isActive])
  @@index([type, isActive])
  @@map("floor_plan_zones")
}

// Camera Management Models

model Camera {
  id                String                 @id @default(cuid())
  name              String
  type              CameraType
  brand             String?
  model             String?
  serialNumber      String?
  ipAddress         String?
  macAddress        String?
  streamUrl         String?
  username          String?
  password          String?
  port              Int?
  protocol          CameraProtocol         @default(RTSP)
  resolution        String?                // e.g., "1920x1080"
  frameRate         Int?                   // FPS
  fieldOfView       Float?                 // Degrees
  panRange          Json?                  // {min: -180, max: 180}
  tiltRange         Json?                  // {min: -90, max: 90}
  zoomRange         Json?                  // {min: 1, max: 10}
  nightVision       Boolean                @default(false)
  audioCapture      Boolean                @default(false)
  motionDetection   Boolean                @default(false)
  status            CameraStatus           @default(OFFLINE)
  isActive          Boolean                @default(true)
  installationDate  DateTime?
  lastMaintenance   DateTime?
  warrantyExpiry    DateTime?
  coordinates       Json?                  // {x, y} position on floor plan
  orientation       Float?                 // Rotation angle in degrees
  coverageArea      Json?                  // Polygon defining camera coverage
  position          Json?                  // Camera position information
  coverageAreas     Json?                  // Multiple coverage areas
  venueId           String
  floorPlanId       String?
  zoneId            String?
  installedBy       String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  venue             Venue                  @relation(fields: [venueId], references: [id], onDelete: Cascade)
  floorPlan         FloorPlan?             @relation(fields: [floorPlanId], references: [id])
  zone              FloorPlanZone?         @relation("ZoneCameras", fields: [zoneId], references: [id])
  events            CameraEvent[]
  performance       CameraPerformance[]    @relation("CameraPerformance")
  recommendations   CameraRecommendation[] @relation("CameraRecommendations")
  enhancedAlerts    EnhancedAlert[]        // Missing relation
  
  @@index([venueId, status])
  @@index([status, isActive])
  @@map("cameras")
}

model CameraEvent {
  id                String               @id @default(cuid())
  type              CameraEventType
  severity          EventSeverity        @default(INFO)
  title             String
  description       String?
  timestamp         DateTime             @default(now())
  resolved          Boolean              @default(false)
  resolvedAt        DateTime?
  resolvedBy        String?
  resolution        String?
  metadata          Json?
  cameraId          String
  venueId           String
  camera            Camera               @relation(fields: [cameraId], references: [id], onDelete: Cascade)
  venue             Venue                @relation(fields: [venueId], references: [id])
  
  @@index([cameraId, timestamp])
  @@index([type, severity])
  @@map("camera_events")
}

model CameraRecommendation {
  id                String                     @id @default(cuid())
  type              CameraRecommendationType
  priority          RecommendationPriority     @default(MEDIUM)
  title             String
  description       String
  reasoning         String?
  estimatedCost     Float?
  estimatedROI      Float?
  implementationTime String?                   // e.g., "2-3 weeks"
  requiredResources Json?                      // List of required resources
  benefits          Json?                      // List of expected benefits
  risks             Json?                      // List of potential risks
  alternatives      Json?                      // Alternative solutions
  status            RecommendationStatus       @default(PENDING)
  implementedAt     DateTime?
  implementedBy     String?
  feedback          String?
  rating            Int?                       // 1-5 rating after implementation
  cameraId          String?
  venueId           String
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  camera            Camera?                    @relation("CameraRecommendations", fields: [cameraId], references: [id])
  venue             Venue                      @relation(fields: [venueId], references: [id])
  
  @@index([venueId, status])
  @@index([priority, status])
  @@map("camera_recommendations")
}

// Enhanced Alert System Models

model AlertRule {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  ruleType          AlertRuleType
  conditions        Json                   // Conditions that trigger the alert
  actions           Json                   // Actions to take when alert is triggered
  priority          AlertPriority          @default(MEDIUM)
  isActive          Boolean                @default(true)
  cooldownPeriod    Int                    @default(300) // Seconds before same alert can trigger again
  escalationRules   Json?                  // Escalation rules if alert not acknowledged
  notificationChannels Json?               // How to send notifications
  targetAudience    Json?                  // Who should receive the alert
  customMessage     String?
  metadata          Json?
  venueId           String
  createdBy         String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  venue             Venue                  @relation("VenueAlertRules", fields: [venueId], references: [id], onDelete: Cascade)
  enhancedAlerts    EnhancedAlert[]        @relation("AlertRuleEnhancedAlerts")
  
  @@index([venueId, isActive])
  @@index([ruleType, isActive])
  @@map("alert_rules")
}

model EnhancedAlert {
  id                String                 @id @default(cuid())
  type              EnhancedAlertType
  subType           String?                // More specific alert categorization
  title             String
  description       String
  severity          AlertSeverity
  priority          AlertPriority          @default(MEDIUM)
  status            EnhancedAlertStatus    @default(ACTIVE)
  source            AlertSource            @default(SYSTEM)
  sourceId          String?                // ID of the source (camera, sensor, etc.)
  floorPlanZoneId   String?                // Missing field
  location          Json?                  // Specific location information
  affectedArea      Json?                  // Area affected by the alert
  estimatedImpact   ImpactLevel            @default(LOW)
  confidence        Float?                 // Confidence level of the alert (0-1)
  falsePositiveRisk Float?                 // Risk of being a false positive (0-1)
  autoResolvable    Boolean                @default(false)
  autoResolveAt     DateTime?              // Auto-resolve timestamp
  requiresHumanAction Boolean              @default(true)
  escalationLevel   Int                    @default(0)
  maxEscalationLevel Int                   @default(3)
  acknowledgmentRequired Boolean           @default(true)
  responseTimeLimit Int?                   // Maximum response time in seconds
  resolutionTimeLimit Int?                 // Maximum resolution time in seconds
  tags              Json?                  // Tags for categorization and filtering
  relatedAlerts     Json?                  // IDs of related alerts
  parentAlertId     String?                // Parent alert if this is a sub-alert
  childAlerts       Json?                  // Child alert IDs
  triggerData       Json?                  // Data that triggered the alert
  contextData       Json?                  // Additional context information
  mediaUrls         Json?                  // Associated media (images, videos)
  actionsTaken      Json?                  // Actions taken in response to alert
  preventiveMeasures Json?                 // Suggested preventive measures
  lessonsLearned    String?                // Lessons learned after resolution
  costImpact        Float?                 // Estimated cost impact
  imageUrls         Json?                  // Array of image URLs
  videoUrls         Json?                  // Array of video URLs
  lastSeenLocation  Json?                  // Last seen location information
  lastSeenTime      DateTime?              // Last seen timestamp
  ruleId            String?
  childId           String?
  venueId           String
  triggeredAt       DateTime               @default(now())
  acknowledgedAt    DateTime?
  acknowledgedBy    String?
  escalatedAt       DateTime?
  escalatedBy       String?
  resolvedAt        DateTime?
  resolvedBy        String?
  resolution        String?
  resolutionMethod  ResolutionMethod?
  closedAt          DateTime?
  closedBy          String?
  reopenedAt        DateTime?
  reopenedBy        String?
  reopenReason      String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  rule              AlertRule?             @relation("AlertRuleEnhancedAlerts", fields: [ruleId], references: [id])
  child             Child?                 @relation(fields: [childId], references: [id])
  venue             Venue                  @relation("VenueEnhancedAlerts", fields: [venueId], references: [id])
  camera            Camera?                @relation(fields: [sourceId], references: [id]) // Missing relation
  zone              FloorPlanZone?         @relation(fields: [floorPlanZoneId], references: [id]) // Missing relation
  acknowledgments   AlertAcknowledgment[]
  timeline          AlertTimelineEntry[]   // Timeline entries for this alert
  notifications     AlertNotification[]
  
  @@index([venueId, status])
  @@index([type, severity])
  @@index([triggeredAt, status])
  @@map("enhanced_alerts")
}

model WebSocketEvent {
  id                String                 @id @default(cuid())
  eventType         String
  eventData         Json
  eventAction       String?                // Action associated with the event
  userId            String?
  targetUserId      String?                // Target user for the event
  venueId           String?
  createdAt         DateTime               @default(now())
  user              User?                  @relation("UserWebSocketEvents", fields: [userId], references: [id])
  venue             Venue?                 @relation("VenueWebSocketEvents", fields: [venueId], references: [id])
  
  @@index([eventType, createdAt])
  @@map("websocket_events")
}

model AlertAcknowledgment {
  id                String                 @id @default(cuid())
  alertId           String
  userId            String
  acknowledgedAt    DateTime               @default(now())
  method            AcknowledgmentMethod   @default(MANUAL)
  location          Json?                  // Where the acknowledgment was made
  deviceInfo        Json?                  // Device used for acknowledgment
  notes             String?
  response          String?                // Missing field
  estimatedResolutionTime Int?             // Estimated time to resolve (minutes)
  metadata          Json?                  // Additional metadata
  alert             EnhancedAlert          @relation(fields: [alertId], references: [id], onDelete: Cascade)
  user              User                   @relation("UserAlertAcknowledgments", fields: [userId], references: [id])
  
  @@unique([alertId, userId], map: "alertId_userId")
  @@index([alertId, acknowledgedAt])
  @@map("alert_acknowledgments")
}

model AlertTimelineEntry {
  id                String                 @id @default(cuid())
  alertId           String
  entryType         TimelineEntryType
  eventType         String?                // Missing field
  title             String
  description       String?
  timestamp         DateTime               @default(now())
  userId            String?
  performedBy       String?                // User who performed the action
  automated         Boolean                @default(false)
  data              Json?                  // Additional data for the entry
  metadata          Json?                  // Additional metadata for the entry
  mediaUrls         Json?                  // Associated media
  location          Json?                  // Location where entry was made
  alert             EnhancedAlert          @relation(fields: [alertId], references: [id], onDelete: Cascade)
  user              User?                  @relation("UserAlertTimelineEntries", fields: [userId], references: [id])
  
  @@index([alertId, timestamp])
  @@map("alert_timeline_entries")
}

model AlertNotification {
  id                String                 @id @default(cuid())
  alertId           String
  userId            String
  recipientId       String?                // Missing field
  channel           NotificationChannel
  status            NotificationStatus     @default(PENDING)
  scheduledAt       DateTime?              // Missing field
  sentAt            DateTime?
  deliveredAt       DateTime?
  readAt            DateTime?
  failureReason     String?
  retryCount        Int                    @default(0)
  maxRetries        Int                    @default(3)
  priority          NotificationPriority   @default(NORMAL)
  message           String
  subject           String?
  metadata          Json?
  alert             EnhancedAlert          @relation(fields: [alertId], references: [id], onDelete: Cascade)
  user              User                   @relation("UserAlertNotifications", fields: [userId], references: [id])
  recipient         User?                  @relation("UserAlertNotificationRecipients", fields: [recipientId], references: [id]) // Missing relation
  
  @@index([alertId, status])
  @@index([userId, status])
  @@map("alert_notifications")
}

model EmergencyContact {
  id                String                 @id @default(cuid())
  name              String
  relationship      String
  phone             String
  email             String?
  address           String?
  isPrimary         Boolean                @default(false)
  isActive          Boolean                @default(true)
  contactMethod     ContactMethod          @default(PHONE)
  availability      Json?                  // When this contact is available
  specialInstructions String?
  lastContacted     DateTime?
  responseTime      Int?                   // Average response time in minutes
  reliability       Float?                 // Reliability score (0-1)
  userId            String?
  childId           String?
  venueId           String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  user              User?                  @relation("UserEmergencyContacts", fields: [userId], references: [id])
  child             Child?                 @relation(fields: [childId], references: [id])
  venue             Venue?                 @relation("VenueEmergencyContacts", fields: [venueId], references: [id])
  
  @@index([userId, isPrimary])
  @@index([childId, isPrimary])
  @@map("emergency_contacts")
}

model UnauthorizedDetection {
  id                String                 @id @default(cuid())
  detectionType     UnauthorizedType
  confidence        Float
  location          Json?                  // Where the detection occurred
  timestamp         DateTime               @default(now())
  imageUrl          String?
  videoUrl          String?
  description       String?
  severity          DetectionSeverity      @default(MEDIUM)
  status            DetectionStatus        @default(PENDING)
  investigatedBy    String?
  investigatedAt    DateTime?
  resolution        String?
  falsePositive     Boolean?
  actionsTaken      Json?                  // Actions taken in response
  venueId           String
  cameraId          String?
  alertId           String?                // Associated alert
  venue             Venue                  @relation("VenueUnauthorizedDetections", fields: [venueId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([detectionType, status])
  @@map("unauthorized_detections")
}

model ChildSighting {
  id                String                 @id @default(cuid())
  childId           String
  venueId           String
  floorPlanZoneId   String?                // Added missing field for zone reference
  location          Json                   // Specific location where child was sighted
  position          Json?                  // Added missing position field
  boundingBox       Json?                  // Added missing bounding box field  
  timestamp         DateTime               @default(now())
  confidence        Float                  // Confidence level of the sighting
  source            SightingSource         @default(CAMERA)
  sightingType      String?                @default("DETECTED") // Added missing sighting type field
  sourceId          String?                // ID of camera, staff member, etc.
  imageUrl          String?
  imageKey          String?                // Added missing image key field
  verified          Boolean                @default(false)
  verifiedBy        String?
  verifiedAt        DateTime?
  notes             String?
  alertTriggered    Boolean                @default(false)
  parentNotified    Boolean                @default(false)
  recognitionEventId String?
  child             Child                  @relation(fields: [childId], references: [id])
  venue             Venue                  @relation(fields: [venueId], references: [id])
  zone              FloorPlanZone?         @relation("ChildSightingZone", fields: [floorPlanZoneId], references: [id])
  recognitionEvent  FaceRecognitionEvent?  @relation(fields: [recognitionEventId], references: [id])
  
  @@index([childId, timestamp])
  @@index([venueId, timestamp])
  @@index([floorPlanZoneId, timestamp])
  @@map("child_sightings")
}

model NotificationPreference {
  id                String                 @id @default(cuid())
  userId            String
  alertTypes        Json                   // Types of alerts to receive
  channels          Json                   // Preferred notification channels
  quietHours        Json?                  // Hours when notifications should be minimized
  frequency         NotificationFrequency  @default(IMMEDIATE)
  minimumSeverity   AlertSeverity          @default(LOW)
  locationBased     Boolean                @default(true)
  childSpecific     Json?                  // Child-specific preferences
  venueSpecific     Json?                  // Venue-specific preferences
  escalationSettings Json?                 // Escalation preferences
  isActive          Boolean                @default(true)
  user              User                   @relation("UserNotificationPreferences", fields: [userId], references: [id])
  
  @@unique([userId])
  @@map("notification_preferences")
}

// Mobile Dashboard Models

model MobileDevice {
  id                String                 @id @default(cuid())
  deviceId          String                 @unique
  deviceName        String
  platform          DevicePlatform
  osVersion         String?
  appVersion        String?
  pushToken         String?
  isActive          Boolean                @default(true)
  lastSeen          DateTime               @default(now())
  userId            String
  registeredAt      DateTime               @default(now())
  user              User                   @relation("UserMobileDevices", fields: [userId], references: [id])
  notifications     MobileNotification[]
  
  @@index([userId, isActive])
  @@map("mobile_devices")
}

model PhotoNotification {
  id                String                 @id @default(cuid())
  childId           String
  venueId           String
  userId            String
  photoUrl          String
  thumbnailUrl      String?
  capturedAt        DateTime
  notifiedAt        DateTime               @default(now())
  viewed            Boolean                @default(false)
  viewedAt          DateTime?
  purchased         Boolean                @default(false)
  purchasedAt       DateTime?
  price             Float?
  confidence        Float?                 // Face recognition confidence
  location          Json?                  // Where photo was taken
  child             Child                  @relation(fields: [childId], references: [id])
  venue             Venue                  @relation(fields: [venueId], references: [id])
  user              User                   @relation("UserPhotoNotifications", fields: [userId], references: [id])
  
  @@index([userId, notifiedAt])
  @@index([childId, capturedAt])
  @@map("photo_notifications")
}

model ChildLocationHistory {
  id                String                 @id @default(cuid())
  childId           String
  venueId           String
  location          Json                   // Specific location coordinates
  zone              String?                // Zone name or ID
  timestamp         DateTime               @default(now())
  confidence        Float?
  source            LocationSource         @default(CAMERA)
  sourceId          String?                // Camera ID, beacon ID, etc.
  duration          Int?                   // Time spent at this location (seconds)
  activity          String?                // Detected activity
  child             Child                  @relation(fields: [childId], references: [id])
  venue             Venue                  @relation(fields: [venueId], references: [id])
  
  @@index([childId, timestamp])
  @@index([venueId, timestamp])
  @@map("child_location_history")
}

model CheckInOutEvent {
  id                String                 @id @default(cuid())
  childId           String
  venueId           String
  userId            String
  membershipId      String?                // Link to membership used for check-in/out
  eventType         CheckInOutType
  timestamp         DateTime               @default(now())
  method            CheckInMethod          @default(MANUAL)
  location          Json?                  // Where the check-in/out occurred
  notes             String?
  verifiedBy        String?                // Staff member who verified
  qrCodeUsed        String?
  biometricUsed     Boolean                @default(false)
  photoTaken        String?                // Photo URL for verification
  duration          Int?                   // Duration of stay (for check-out events)
  identityVerificationId String?            // Added missing field for identity verification
  child             Child                  @relation(fields: [childId], references: [id])
  venue             Venue                  @relation(fields: [venueId], references: [id])
  user              User                   @relation("UserCheckInOutEvents", fields: [userId], references: [id])
  membership        Membership?            @relation(fields: [membershipId], references: [id])
  identityVerifications IdentityVerification[] @relation("CheckInOutIdentityVerifications") // Added missing relation
  
  @@index([childId, timestamp])
  @@index([venueId, eventType])
  @@map("check_in_out_events")
}

model MobileNotification {
  id                String                 @id @default(cuid())
  userId            String
  childId           String?
  deviceId          String?
  relatedEntityId   String?                // Missing field
  relatedEntityType String?                // Type of related entity
  type              MobileNotificationType
  title             String
  message           String
  data              Json?                  // Additional data payload
  priority          NotificationPriority   @default(NORMAL)
  scheduled         Boolean                @default(false)
  scheduledFor      DateTime?
  scheduledAt       DateTime?              // Scheduled time for notification
  sent              Boolean                @default(false)
  sentAt            DateTime?
  delivered         Boolean                @default(false)
  deliveredAt       DateTime?
  opened            Boolean                @default(false)
  openedAt          DateTime?
  actionTaken       String?                // Action taken by user
  expiresAt         DateTime?
  metadata          Json?                  // Additional metadata for notification
  createdAt         DateTime               @default(now())
  user              User                   @relation("UserMobileNotifications", fields: [userId], references: [id])
  child             Child?                 @relation(fields: [childId], references: [id])
  device            MobileDevice?          @relation(fields: [deviceId], references: [id])
  
  @@index([userId, sent])
  @@index([scheduledFor, scheduled])
  @@map("mobile_notifications")
}

model OfflineDataCache {
  id                String                 @id @default(cuid())
  userId            String
  dataType          OfflineDataType
  data              Json                   // Cached data
  lastUpdated       DateTime               @default(now())
  expiresAt         DateTime?
  syncStatus        SyncStatus             @default(PENDING)
  syncedAt          DateTime?
  version           Int                    @default(1)
  user              User                   @relation("UserOfflineDataCache", fields: [userId], references: [id])
  
  @@unique([userId, dataType])
  @@index([expiresAt, syncStatus])
  @@map("offline_data_cache")
}

model ParentSession {
  id                String                 @id @default(cuid())
  userId            String
  sessionId         String                 @unique
  deviceInfo        Json?
  startTime         DateTime               @default(now())
  endTime           DateTime?
  duration          Int?                   // Session duration in seconds
  activitiesCount   Int                    @default(0)
  photosViewed      Int                    @default(0)
  alertsReceived    Int                    @default(0)
  lastActivity      DateTime               @default(now())
  ipAddress         String?
  userAgent         String?
  user              User                   @relation("UserParentSessions", fields: [userId], references: [id])
  
  @@index([userId, startTime])
  @@map("parent_sessions")
}

model VenueQRCode {
  id                String                 @id @default(cuid())
  venueId           String
  qrCode            String                 @unique
  purpose           QRCodePurpose
  isActive          Boolean                @default(true)
  expiresAt         DateTime?
  usageCount        Int                    @default(0)
  maxUsage          Int?
  metadata          Json?
  createdAt         DateTime               @default(now())
  venue             Venue                  @relation(fields: [venueId], references: [id])
  
  @@index([venueId, isActive])
  @@map("venue_qr_codes")
}

// Safety Analytics Models

model AnalyticsEvent {
  id                String                 @id @default(cuid())
  eventType         AnalyticsEventType
  category          EventCategory          @default(GENERAL)
  timestamp         DateTime               @default(now())
  userId            String?
  childId           String?
  venueId           String
  sessionId         String?
  data              Json                   // Event-specific data
  metadata          Json?                  // Additional metadata
  processed         Boolean                @default(false)
  processedAt       DateTime?
  user              User?                  @relation("UserAnalyticsEvents", fields: [userId], references: [id])
  child             Child?                 @relation("ChildAnalyticsEvents", fields: [childId], references: [id])
  venue             Venue                  @relation("VenueAnalyticsEvents", fields: [venueId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([eventType, timestamp])
  @@map("analytics_events")
}

model SafetyReport {
  id                String                 @id @default(cuid())
  title             String
  reportType        SafetyReportType
  period            ReportPeriod
  startDate         DateTime
  endDate           DateTime
  venueId           String
  generatedBy       String
  generatedAt       DateTime               @default(now())
  status            ReportStatus           @default(GENERATING)
  fileUrl           String?
  filePath          String?
  fileSize          Int?
  format            ReportFormat           @default(PDF)
  summary           Json?                  // Report summary data
  metrics           Json?                  // Key metrics
  insights          Json?                  // Generated insights
  recommendations   Json?                  // Recommendations
  charts            Json?                  // Chart data
  isScheduled       Boolean                @default(false)
  scheduleId        String?
  emailSent         Boolean                @default(false)
  emailSentAt       DateTime?
  downloadCount     Int                    @default(0)
  lastDownloaded    DateTime?
  venue             Venue                  @relation("VenueSafetyReports", fields: [venueId], references: [id])
  generator         User                   @relation("UserGeneratedReports", fields: [generatedBy], references: [id])
  
  @@index([venueId, generatedAt])
  @@index([reportType, status])
  @@map("safety_reports")
}

model IncidentReport {
  id                String                 @id @default(cuid())
  title             String
  description       String
  incidentType      IncidentType
  severity          IncidentSeverity       @default(LOW)
  status            IncidentStatus         @default(OPEN)
  priority          IncidentPriority       @default(MEDIUM)
  occurredAt        DateTime
  reportedAt        DateTime               @default(now())
  reportedBy        String
  assignedTo        String?
  childId           String?
  venueId           String
  location          Json?                  // Where incident occurred
  witnesses         Json?                  // Witness information
  evidence          Json?                  // Evidence files, photos, etc.
  actions           Json?                  // Actions taken
  outcome           String?
  preventiveMeasures Json?                 // Measures to prevent recurrence
  followUpRequired  Boolean                @default(false)
  followUpDate      DateTime?
  closedAt          DateTime?
  closedBy          String?
  reopenedAt        DateTime?
  reopenedBy        String?
  reopenReason      String?
  tags              Json?
  relatedIncidents  Json?                  // Related incident IDs
  costImpact        Float?
  reporter          User                   @relation("UserReportedIncidents", fields: [reportedBy], references: [id])
  assignee          User?                  @relation("UserAssignedIncidents", fields: [assignedTo], references: [id])
  child             Child?                 @relation("ChildIncidentReports", fields: [childId], references: [id])
  venue             Venue                  @relation("VenueIncidentReports", fields: [venueId], references: [id])
  
  @@index([venueId, occurredAt])
  @@index([status, priority])
  @@map("incident_reports")
}

model CameraPerformance {
  id                String                 @id @default(cuid())
  cameraId          String
  venueId           String
  date              DateTime
  uptime            Float                  // Percentage uptime
  detectionAccuracy Float?                 // Face detection accuracy
  falsePositiveRate Float?                 // False positive rate
  responseTime      Int?                   // Average response time in ms
  frameRate         Float?                 // Actual frame rate
  resolution        String?                // Actual resolution
  bandwidth         Float?                 // Bandwidth usage in Mbps
  storageUsed       Float?                 // Storage used in GB
  alertsGenerated   Int                    @default(0)
  maintenanceEvents Int                    @default(0)
  errorCount        Int                    @default(0)
  qualityScore      Float?                 // Overall quality score (0-100)
  notes             String?
  camera            Camera                 @relation("CameraPerformance", fields: [cameraId], references: [id])
  venue             Venue                  @relation("VenueCameraPerformance", fields: [venueId], references: [id])
  
  @@unique([cameraId, date])
  @@index([venueId, date])
  @@map("camera_performance")
}

model ParentEngagement {
  id                String                 @id @default(cuid())
  userId            String
  venueId           String
  date              DateTime
  sessionCount      Int                    @default(0)
  totalSessionTime  Int                    @default(0) // Total time in seconds
  photosViewed      Int                    @default(0)
  photosPurchased   Int                    @default(0)
  alertsReceived    Int                    @default(0)
  alertsAcknowledged Int                   @default(0)
  checkIns          Int                    @default(0)
  checkOuts         Int                    @default(0)
  appOpens          Int                    @default(0)
  pushNotificationsReceived Int            @default(0)
  pushNotificationsOpened Int              @default(0)
  engagementScore   Float?                 // Calculated engagement score
  lastActivity      DateTime?
  user              User                   @relation("UserEngagementMetrics", fields: [userId], references: [id])
  venue             Venue                  @relation("VenueParentEngagement", fields: [venueId], references: [id])
  
  @@unique([userId, venueId, date])
  @@index([venueId, date])
  @@map("parent_engagement")
}

model TrafficPattern {
  id                String                 @id @default(cuid())
  venueId           String
  date              DateTime
  hour              Int                    // Hour of day (0-23)
  dayOfWeek         Int                    // Day of week (0-6, 0=Sunday)
  entryCount        Int                    @default(0)
  exitCount         Int                    @default(0)
  peakOccupancy     Int                    @default(0)
  averageStayTime   Int                    @default(0) // Average stay time in minutes
  ageGroupBreakdown Json?                  // Breakdown by age groups
  popularZones      Json?                  // Most popular zones
  weatherCondition  String?
  specialEvents     Json?                  // Any special events
  venue             Venue                  @relation("VenueTrafficPatterns", fields: [venueId], references: [id])
  
  @@unique([venueId, date, hour])
  @@index([venueId, dayOfWeek])
  @@map("traffic_patterns")
}

model PerformanceMetric {
  id                String                 @id @default(cuid())
  venueId           String
  metricType        PerformanceMetricType
  metricName        String
  value             Float
  unit              String?
  timestamp         DateTime               @default(now())
  period            MetricPeriod           @default(HOURLY)
  metadata          Json?
  venue             Venue                  @relation("VenuePerformanceMetrics", fields: [venueId], references: [id])
  
  @@index([venueId, metricType, timestamp])
  @@map("performance_metrics")
}

model ReportSchedule {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  reportType        SafetyReportType
  frequency         ScheduleFrequency
  cronExpression    String?                // For custom schedules
  recipients        Json                   // Email recipients
  venueId           String
  createdBy         String
  isActive          Boolean                @default(true)
  lastRun           DateTime?
  nextRun           DateTime?
  runCount          Int                    @default(0)
  failureCount      Int                    @default(0)
  lastError         String?
  format            ReportFormat           @default(PDF)
  parameters        Json?                  // Report parameters
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  venue             Venue                  @relation("VenueReportSchedules", fields: [venueId], references: [id])
  creator           User                   @relation("UserCreatedSchedules", fields: [createdBy], references: [id])
  
  @@index([venueId, isActive])
  @@index([nextRun, isActive])
  @@map("report_schedules")
}

model AnalyticsConfig {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  configType        AnalyticsConfigType
  settings          Json                   // Configuration settings
  venueId           String
  appliedBy         String
  isActive          Boolean                @default(true)
  appliedAt         DateTime               @default(now())
  venue             Venue                  @relation("VenueAnalyticsConfigs", fields: [venueId], references: [id])
  applier           User                   @relation("UserAppliedConfigs", fields: [appliedBy], references: [id])
  
  @@index([venueId, configType])
  @@map("analytics_configs")
}

// Digital Check-in/Check-out Models

model MembershipPackage {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  packageType       String?                // Type of membership package
  price             Float
  currency          String                 @default("USD") // Currency for the price
  duration          Int                    // Duration in days
  checkInLimit      Int?                   // Maximum check-ins per month/period
  guestLimit        Int?                   // Maximum guests allowed per membership
  photoCredits      Int?                   // Photo/video credits included in package
  videoCredits      Int?                   // Video credits included in package
  benefits          Json                   // List of benefits
  restrictions      Json?                  // Any restrictions
  isActive          Boolean                @default(true)
  venueId           String
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  venue             Venue                  @relation("VenueMembershipPackages", fields: [venueId], references: [id])
  memberships       Membership[]
  
  @@index([venueId, isActive])
  @@map("membership_packages")
}

model Membership {
  id                String                 @id @default(cuid())
  membershipNumber  String                 @unique
  userId            String
  venueId           String
  packageId         String
  status            MembershipStatus       @default(ACTIVE)
  startDate         DateTime
  endDate           DateTime
  autoRenew         Boolean                @default(false)
  paymentMethod     String?
  discountApplied   Float?                 @default(0)
  totalPaid         Float
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  user              User                   @relation("ParentMemberships", fields: [userId], references: [id])
  venue             Venue                  @relation("VenueMemberships", fields: [venueId], references: [id])
  package           MembershipPackage      @relation(fields: [packageId], references: [id])
  checkInEvents     CheckInOutEvent[]      // Check-in/out events using this membership
  
  @@index([userId, status])
  @@index([venueId, status])
  @@map("memberships")
}

model ParentQRCode {
  id                String                 @id @default(cuid())
  userId            String
  qrCode            String                 @unique
  isActive          Boolean                @default(true)
  expiresAt         DateTime?
  lastUsed          DateTime?
  usageCount        Int                    @default(0)
  createdAt         DateTime               @default(now())
  user              User                   @relation("ParentQRCodes", fields: [userId], references: [id])
  
  @@index([userId, isActive])
  @@map("parent_qr_codes")
}

model ChildQRCode {
  id                String                 @id @default(cuid())
  childId           String
  qrCode            String                 @unique
  isActive          Boolean                @default(true)
  expiresAt         DateTime?
  lastUsed          DateTime?
  usageCount        Int                    @default(0)
  createdAt         DateTime               @default(now())
  child             Child                  @relation(fields: [childId], references: [id])
  
  @@index([childId, isActive])
  @@map("child_qr_codes")
}

model PickupAuthorization {
  id                String                 @id @default(cuid())
  childId           String
  authorizedBy      String                 // Parent user ID
  authorizedPerson  String                 // Name of authorized person
  relationship      String
  phone             String
  email             String?
  photoUrl          String?                // Photo of authorized person
  idDocument        String?                // ID document URL
  isActive          Boolean                @default(true)
  validFrom         DateTime               @default(now())
  validUntil        DateTime?
  restrictions      Json?                  // Any pickup restrictions
  emergencyOnly     Boolean                @default(false)
  requiresVerification Boolean             @default(true)
  verificationMethod VerificationMethod    @default(PHOTO_ID)
  lastUsed          DateTime?
  usageCount        Int                    @default(0)
  notes             String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  child             Child                  @relation(fields: [childId], references: [id])
  authorizer        User                   @relation("ParentPickupAuth", fields: [authorizedBy], references: [id])
  
  @@index([childId, isActive])
  @@index([authorizedBy, isActive])
  @@map("pickup_authorizations")
}

model POSTransaction {
  id                String                 @id @default(cuid())
  transactionId     String                 @unique
  venueId           String
  amount            Float
  tax               Float?                 @default(0)
  tip               Float?                 @default(0)
  total             Float
  paymentMethod     PaymentMethod
  status            TransactionStatus      @default(PENDING)
  items             Json                   // Items purchased
  customerInfo      Json?                  // Customer information
  staffId           String?                // Staff member who processed
  timestamp         DateTime               @default(now())
  refundedAt        DateTime?
  refundAmount      Float?
  refundReason      String?
  metadata          Json?
  venue             Venue                  @relation("VenuePOSTransactions", fields: [venueId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([status, timestamp])
  @@map("pos_transactions")
}

model CheckInKiosk {
  id                String                 @id @default(cuid())
  name              String
  location          String
  venueId           String
  ipAddress         String?
  macAddress        String?
  serialNumber      String?
  status            KioskStatus            @default(OFFLINE)
  lastHeartbeat     DateTime?
  softwareVersion   String?
  hardwareVersion   String?
  features          Json?                  // Available features
  configuration     Json?                  // Kiosk configuration
  maintenanceMode   Boolean                @default(false)
  lastMaintenance   DateTime?
  installationDate  DateTime?
  warrantyExpiry    DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  venue             Venue                  @relation("VenueKiosks", fields: [venueId], references: [id])
  
  @@index([venueId, status])
  @@map("check_in_kiosks")
}

model WorkflowAutomation {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  triggerType       WorkflowTriggerType
  triggerConditions Json                   // Conditions that trigger the workflow
  actions           Json                   // Actions to perform
  isActive          Boolean                @default(true)
  venueId           String
  createdBy         String?
  lastTriggered     DateTime?
  triggerCount      Int                    @default(0)
  successCount      Int                    @default(0)
  failureCount      Int                    @default(0)
  lastError         String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  venue             Venue                  @relation("VenueWorkflows", fields: [venueId], references: [id])
  
  @@index([venueId, isActive])
  @@map("workflow_automations")
}

model ComplianceReport {
  id                String                 @id @default(cuid())
  reportType        ComplianceReportType
  period            ReportPeriod
  startDate         DateTime
  endDate           DateTime
  venueId           String
  status            ReportStatus           @default(GENERATING)
  findings          Json?                  // Compliance findings
  violations        Json?                  // Any violations found
  recommendations   Json?                  // Compliance recommendations
  score             Float?                 // Compliance score (0-100)
  fileUrl           String?
  generatedAt       DateTime               @default(now())
  reviewedBy        String?
  reviewedAt        DateTime?
  approvedBy        String?
  approvedAt        DateTime?
  venue             Venue                  @relation("VenueComplianceReports", fields: [venueId], references: [id])
  
  @@index([venueId, generatedAt])
  @@map("compliance_reports")
}

// Enhanced AI Features Models

model AIAnalysisSession {
  id                String                 @id @default(cuid())
  sessionType       AIAnalysisType
  venueId           String
  startTime         DateTime               @default(now())
  endTime           DateTime?
  duration          Int?                   // Duration in seconds
  status            AIAnalysisStatus       @default(RUNNING)
  inputData         Json?                  // Input data for analysis
  results           Json?                  // Analysis results
  confidence        Float?                 // Overall confidence score
  processingTime    Int?                   // Processing time in milliseconds
  resourcesUsed     Json?                  // Resources consumed
  errorMessage      String?
  metadata          Json?
  venue             Venue                  @relation("VenueAIAnalysisSessions", fields: [venueId], references: [id])
  
  @@index([venueId, startTime])
  @@index([sessionType, status])
  @@map("ai_analysis_sessions")
}

model AgeEstimationAnalysis {
  id                String                 @id @default(cuid())
  venueId           String
  childId           String?
  imageUrl          String
  estimatedAge      Float
  ageRange          Json                   // {min: 5, max: 7}
  confidence        Float
  actualAge         Int?                   // If known for validation
  accuracy          Float?                 // If actual age is known
  timestamp         DateTime               @default(now())
  modelVersion      String?
  processingTime    Int?                   // Processing time in ms
  metadata          Json?
  venue             Venue                  @relation("VenueAgeAnalyses", fields: [venueId], references: [id])
  child             Child?                 @relation("ChildAgeAnalyses", fields: [childId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([childId, timestamp])
  @@map("age_estimation_analyses")
}

model EmotionDetectionAnalysis {
  id                String                 @id @default(cuid())
  venueId           String
  childId           String?
  imageUrl          String
  emotions          Json                   // {happy: 0.8, sad: 0.1, angry: 0.05, ...}
  dominantEmotion   String
  confidence        Float
  timestamp         DateTime               @default(now())
  context           String?                // Context where emotion was detected
  duration          Int?                   // Duration of emotion (if video)
  modelVersion      String?
  processingTime    Int?
  metadata          Json?
  venue             Venue                  @relation("VenueEmotionAnalyses", fields: [venueId], references: [id])
  child             Child?                 @relation("ChildEmotionAnalyses", fields: [childId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([dominantEmotion, timestamp])
  @@map("emotion_detection_analyses")
}

model CrowdDensityAnalysis {
  id                String                 @id @default(cuid())
  venueId           String
  location          Json                   // Area analyzed
  personCount       Int
  density           Float                  // People per square meter
  crowdLevel        CrowdLevel
  timestamp         DateTime               @default(now())
  imageUrl          String?
  heatmapUrl        String?                // Crowd density heatmap
  safetyScore       Float?                 // Safety score based on density
  recommendations   Json?                  // Safety recommendations
  modelVersion      String?
  processingTime    Int?
  metadata          Json?
  venue             Venue                  @relation("VenueCrowdAnalyses", fields: [venueId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([crowdLevel, timestamp])
  @@map("crowd_density_analyses")
}

model BehaviorPatternAnalysis {
  id                String                 @id @default(cuid())
  venueId           String
  childId           String?
  behaviorType      BehaviorType
  description       String
  confidence        Float
  duration          Int?                   // Duration in seconds
  location          Json?                  // Where behavior was observed
  timestamp         DateTime               @default(now())
  videoUrl          String?
  isAnomalous       Boolean                @default(false)
  riskLevel         RiskLevel              @default(LOW)
  actionRequired    Boolean                @default(false)
  actionTaken       String?
  modelVersion      String?
  processingTime    Int?
  metadata          Json?
  venue             Venue                  @relation("VenueBehaviorAnalyses", fields: [venueId], references: [id])
  child             Child?                 @relation("ChildBehaviorAnalyses", fields: [childId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([behaviorType, riskLevel])
  @@map("behavior_pattern_analyses")
}

model VoicePatternAnalysis {
  id                String                 @id @default(cuid())
  venueId           String
  childId           String?
  audioUrl          String
  voiceCharacteristics Json               // Voice characteristics detected
  emotionalState    String?                // Detected emotional state from voice
  stressLevel       Float?                 // Stress level (0-1)
  confidence        Float
  duration          Int                    // Audio duration in seconds
  timestamp         DateTime               @default(now())
  language          String?                // Detected language
  transcription     String?                // Speech-to-text result
  keywords          Json?                  // Important keywords detected
  alertTriggered    Boolean                @default(false)
  modelVersion      String?
  processingTime    Int?
  metadata          Json?
  venue             Venue                  @relation("VenueVoiceAnalyses", fields: [venueId], references: [id])
  child             Child?                 @relation("ChildVoiceAnalyses", fields: [childId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([alertTriggered, timestamp])
  @@map("voice_pattern_analyses")
}

model VisualPatternAnalysis {
  id                String                 @id @default(cuid())
  venueId           String
  childId           String?
  imageUrl          String
  patternType       VisualPatternType
  patterns          Json                   // Detected patterns
  anomalies         Json?                  // Any anomalies detected
  confidence        Float
  timestamp         DateTime               @default(now())
  location          Json?                  // Where pattern was detected
  context           String?                // Context of the analysis
  riskAssessment    Json?                  // Risk assessment based on patterns
  modelVersion      String?
  processingTime    Int?
  metadata          Json?
  venue             Venue                  @relation("VenueVisualAnalyses", fields: [venueId], references: [id])
  child             Child?                 @relation("ChildVisualAnalyses", fields: [childId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([patternType, timestamp])
  @@map("visual_pattern_analyses")
}

model AIInsight {
  id                String                 @id @default(cuid())
  insightType       AIInsightType
  title             String
  description       String
  venueId           String
  childId           String?
  confidence        Float
  importance        InsightImportance      @default(MEDIUM)
  category          InsightCategory        @default(SAFETY)
  data              Json                   // Supporting data
  recommendations   Json?                  // AI recommendations
  actionable        Boolean                @default(true)
  actionTaken       String?
  feedback          String?                // Human feedback on insight
  accuracy          Float?                 // Accuracy rating from human feedback
  timestamp         DateTime               @default(now())
  expiresAt         DateTime?
  isValid           Boolean                @default(true)
  modelVersion      String?
  venue             Venue                  @relation("VenueAIInsights", fields: [venueId], references: [id])
  child             Child?                 @relation("ChildAIInsights", fields: [childId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([insightType, importance])
  @@map("ai_insights")
}

model AISafetyScore {
  id                String                 @id @default(cuid())
  venueId           String
  overallScore      Float                  // Overall safety score (0-100)
  categoryScores    Json                   // Scores by category
  factors           Json                   // Factors affecting the score
  trends            Json?                  // Score trends over time
  benchmarks        Json?                  // Comparison with benchmarks
  recommendations   Json?                  // Recommendations to improve score
  timestamp         DateTime               @default(now())
  period            ScorePeriod            @default(DAILY)
  calculationMethod String?
  dataPoints        Int?                   // Number of data points used
  confidence        Float?
  venue             Venue                  @relation("VenueAISafetyScores", fields: [venueId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([period, timestamp])
  @@map("ai_safety_scores")
}

model AIModelPerformance {
  id                String                 @id @default(cuid())
  modelName         String
  modelVersion      String
  venueId           String
  performanceType   ModelPerformanceType
  metrics           Json                   // Performance metrics
  accuracy          Float?
  precision         Float?
  recall            Float?
  f1Score           Float?
  processingTime    Int?                   // Average processing time in ms
  throughput        Float?                 // Requests per second
  errorRate         Float?
  timestamp         DateTime               @default(now())
  testDataSize      Int?
  environment       String?                // Production, staging, etc.
  venue             Venue                  @relation("VenueAIModelPerformance", fields: [venueId], references: [id])
  
  @@index([venueId, modelName])
  @@index([timestamp, modelName])
  @@map("ai_model_performance")
}

// Messaging and Communication Models

model SharedMedia {
  id                String                 @id @default(cuid())
  type              SharedMediaType
  title             String?
  description       String?
  fileUrl           String
  thumbnailUrl      String?
  fileSize          Int?
  duration          Int?                   // For videos, in seconds
  resolution        String?                // For images/videos
  capturedAt        DateTime?
  uploadedAt        DateTime               @default(now())
  uploadedBy        String
  venueId           String
  isPublic          Boolean                @default(false)
  tags              Json?
  metadata          Json?
  viewCount         Int                    @default(0)
  downloadCount     Int                    @default(0)
  likes             Int                    @default(0)
  status            MediaStatus            @default(ACTIVE)
  moderationStatus  ModerationStatus       @default(PENDING)
  moderatedBy       String?
  moderatedAt       DateTime?
  moderationNotes   String?
  uploader          User                   @relation("UserUploadedMedia", fields: [uploadedBy], references: [id])
  venue             Venue                  @relation("VenueSharedMedia", fields: [venueId], references: [id])
  permissions       MediaPermission[]
  purchases         MediaPurchase[]
  reports           MediaReport[]
  
  @@index([venueId, uploadedAt])
  @@index([uploadedBy, uploadedAt])
  @@map("shared_media")
}

model MediaPermission {
  id                String                 @id @default(cuid())
  mediaId           String
  parentId          String
  childId           String
  permissionType    MediaPermissionType
  granted           Boolean                @default(false)
  grantedAt         DateTime?
  expiresAt         DateTime?
  restrictions      Json?                  // Any restrictions on usage
  notes             String?
  media             SharedMedia            @relation(fields: [mediaId], references: [id])
  parent            User                   @relation("ParentMediaPermissions", fields: [parentId], references: [id])
  child             Child                  @relation("ChildMediaPermissions", fields: [childId], references: [id])
  
  @@unique([mediaId, parentId, childId])
  @@index([parentId, granted])
  @@map("media_permissions")
}

model MediaPurchase {
  id                String                 @id @default(cuid())
  mediaId           String
  purchasedBy       String
  amount            Float
  currency          String                 @default("USD")
  paymentMethod     String?
  transactionId     String?
  purchasedAt       DateTime               @default(now())
  downloadUrl       String?
  downloadExpiry    DateTime?
  downloadCount     Int                    @default(0)
  maxDownloads      Int?
  status            PurchaseStatus         @default(COMPLETED)
  media             SharedMedia            @relation(fields: [mediaId], references: [id])
  purchaser         User                   @relation("UserMediaPurchases", fields: [purchasedBy], references: [id])
  
  @@index([purchasedBy, purchasedAt])
  @@index([mediaId, purchasedAt])
  @@map("media_purchases")
}

model ParentConnection {
  id                String                 @id @default(cuid())
  requesterId       String
  receiverId        String
  status            ConnectionStatus       @default(PENDING)
  requestedAt       DateTime               @default(now())
  respondedAt       DateTime?
  message           String?                // Optional message with request
  connectionType    ConnectionType         @default(FRIEND)
  permissions       Json?                  // What they can share with each other
  requester         User                   @relation("ParentConnectionRequester", fields: [requesterId], references: [id])
  receiver          User                   @relation("ParentConnectionReceiver", fields: [receiverId], references: [id])
  
  @@unique([requesterId, receiverId])
  @@index([receiverId, status])
  @@map("parent_connections")
}

model ChildFriendship {
  id                String                 @id @default(cuid())
  child1Id          String
  child2Id          String
  status            FriendshipStatus       @default(PENDING)
  initiatedBy       String                 // Parent user ID who initiated
  approvedBy        String?                // Parent user ID who approved
  createdAt         DateTime               @default(now())
  approvedAt        DateTime?
  notes             String?
  child1            Child                  @relation("ChildFriendships1", fields: [child1Id], references: [id])
  child2            Child                  @relation("ChildFriendships2", fields: [child2Id], references: [id])
  
  @@unique([child1Id, child2Id])
  @@index([status, createdAt])
  @@map("child_friendships")
}

model SharedActivity {
  id                String                 @id @default(cuid())
  title             String
  description       String?
  activityType      ActivityType
  startTime         DateTime
  endTime           DateTime?
  location          String?
  maxParticipants   Int?
  currentParticipants Int                 @default(0)
  ageRange          Json?                  // {min: 5, max: 12}
  cost              Float?                 @default(0)
  organizedBy       String
  venueId           String
  status            ActivityStatus         @default(PLANNED)
  isPublic          Boolean                @default(true)
  requiresApproval  Boolean                @default(false)
  tags              Json?
  mediaUrls         Json?                  // Associated media
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  organizer         User                   @relation("UserOrganizedActivities", fields: [organizedBy], references: [id])
  venue             Venue                  @relation("VenueSharedActivities", fields: [venueId], references: [id])
  
  @@index([venueId, startTime])
  @@index([organizedBy, startTime])
  @@map("shared_activities")
}

model Chat {
  id                String                 @id @default(cuid())
  name              String?                // Group chat name
  title             String?                // Chat title/subject
  type              ChatType               @default(PRIVATE)
  venueId           String?                // If venue-specific chat
  groupId           String?                // If community group chat
  isActive          Boolean                @default(true)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  lastMessageAt     DateTime?
  venue             Venue?                 @relation("VenueChats", fields: [venueId], references: [id])
  group             CommunityGroup?        @relation(fields: [groupId], references: [id])
  participants      ChatParticipant[]
  messages          Message[]
  
  @@index([venueId, isActive])
  @@map("chats")
}

model ChatParticipant {
  id                String                 @id @default(cuid())
  chatId            String
  userId            String
  role              ChatRole               @default(MEMBER)
  joinedAt          DateTime               @default(now())
  leftAt            DateTime?
  isActive          Boolean                @default(true)
  lastReadAt        DateTime?
  notificationsEnabled Boolean             @default(true)
  chat              Chat                   @relation(fields: [chatId], references: [id])
  user              User                   @relation("UserChatParticipants", fields: [userId], references: [id])
  
  @@unique([chatId, userId])
  @@index([userId, isActive])
  @@map("chat_participants")
}

model Message {
  id                String                 @id @default(cuid())
  chatId            String
  senderId          String
  content           String
  messageType       MessageType            @default(TEXT)
  mediaUrl          String?
  replyToId         String?                // If replying to another message
  isEdited          Boolean                @default(false)
  editedAt          DateTime?
  isDeleted         Boolean                @default(false)
  deletedAt         DateTime?
  sentAt            DateTime               @default(now())
  chat              Chat                   @relation(fields: [chatId], references: [id])
  sender            User                   @relation("UserSentMessages", fields: [senderId], references: [id])
  replyTo           Message?               @relation("MessageReplies", fields: [replyToId], references: [id])
  replies           Message[]              @relation("MessageReplies")
  deliveries        MessageDelivery[]
  
  @@index([chatId, sentAt])
  @@index([senderId, sentAt])
  @@map("messages")
}

model MessageDelivery {
  id                String                 @id @default(cuid())
  messageId         String
  userId            String
  deliveredAt       DateTime               @default(now())
  readAt            DateTime?
  message           Message                @relation(fields: [messageId], references: [id])
  user              User                   @relation("UserMessageDeliveries", fields: [userId], references: [id])
  
  @@unique([messageId, userId])
  @@index([userId, readAt])
  @@map("message_deliveries")
}

model NavigationRequest {
  id                String                 @id @default(cuid())
  parentId          String
  childId           String?
  venueId           String
  requestType       NavigationRequestType
  fromLocation      Json?                  // Starting location
  toLocation        Json                   // Destination
  status            NavigationStatus       @default(PENDING)
  priority          RequestPriority        @default(NORMAL)
  estimatedTime     Int?                   // Estimated time in minutes
  actualTime        Int?                   // Actual time taken
  route             Json?                  // Suggested route
  instructions      Json?                  // Step-by-step instructions
  assignedStaff     String?                // Staff member assigned to help
  requestedAt       DateTime               @default(now())
  startedAt         DateTime?
  completedAt       DateTime?
  notes             String?
  feedback          String?
  rating            Int?                   // 1-5 rating
  parent            User                   @relation("ParentNavigationRequests", fields: [parentId], references: [id])
  child             Child?                 @relation("ChildNavigationRequests", fields: [childId], references: [id])
  venue             Venue                  @relation("VenueNavigationRequests", fields: [venueId], references: [id])
  
  @@index([venueId, status])
  @@index([parentId, requestedAt])
  @@map("navigation_requests")
}

model CommunityGroup {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  groupType         CommunityGroupType
  venueId           String?                // If venue-specific
  adminId           String
  location          String?                // Physical or virtual location
  interests         Json?                  // Group interests/topics
  ageRange          String?                // Target age range
  requirements      String?                // Requirements to join
  isPublic          Boolean                @default(true)
  requiresApproval  Boolean                @default(false)
  maxMembers        Int?
  currentMembers    Int                    @default(0)
  tags              Json?
  rules             String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  venue             Venue?                 @relation("VenueCommunityGroups", fields: [venueId], references: [id])
  admin             User                   @relation("UserAdminGroups", fields: [adminId], references: [id])
  members           CommunityMember[]
  events            CommunityEvent[]
  chats             Chat[]                 // Community group chats
  
  @@index([venueId, isPublic])
  @@index([adminId, createdAt])
  @@map("community_groups")
}

model CommunityMember {
  id                String                 @id @default(cuid())
  groupId           String
  userId            String
  role              CommunityRole          @default(MEMBER)
  status            MembershipStatus       @default(ACTIVE)
  isActive          Boolean                @default(true) // Whether the member is currently active
  contributionScore Int                    @default(0) // Member's contribution score
  joinedAt          DateTime               @default(now())
  leftAt            DateTime?
  invitedBy         String?
  group             CommunityGroup         @relation(fields: [groupId], references: [id])
  user              User                   @relation("UserCommunityMemberships", fields: [userId], references: [id])
  
  @@unique([groupId, userId])
  @@index([userId, status])
  @@map("community_members")
}

model CommunityEvent {
  id                String                 @id @default(cuid())
  title             String
  description       String?
  eventType         CommunityEventType
  startTime         DateTime
  endTime           DateTime?
  location          String?
  venueId           String?
  groupId           String?
  organizerId       String
  maxParticipants   Int?
  currentParticipants Int                 @default(0)
  cost              Float?                 @default(0)
  isPublic          Boolean                @default(true)
  requiresRSVP      Boolean                @default(false)
  requiresApproval  Boolean                @default(false) // Whether organizer must approve participants
  status            EventStatus            @default(SCHEDULED)
  ageRange          String?                // Age range for the event (e.g., "5-12", "Teen", "Adult")
  tags              Json?
  mediaUrls         Json?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  venue             Venue?                 @relation("VenueCommunityEvents", fields: [venueId], references: [id])
  group             CommunityGroup?        @relation(fields: [groupId], references: [id])
  organizer         User                   @relation("UserOrganizedEvents", fields: [organizerId], references: [id])
  participants      EventParticipant[]
  
  @@index([venueId, startTime])
  @@index([groupId, startTime])
  @@map("community_events")
}

model EventParticipant {
  id                String                 @id @default(cuid())
  eventId           String
  userId            String
  status            ParticipationStatus    @default(REGISTERED)
  registeredAt      DateTime               @default(now())
  attendedAt        DateTime?
  feedback          String?
  rating            Int?                   // 1-5 rating
  event             CommunityEvent         @relation(fields: [eventId], references: [id])
  user              User                   @relation("UserEventParticipations", fields: [userId], references: [id])
  
  @@unique([eventId, userId])
  @@index([userId, status])
  @@map("event_participants")
}

model MediaReport {
  id                String                 @id @default(cuid())
  mediaId           String
  reportedBy        String
  reportType        MediaReportType
  reason            String
  description       String?
  status            ReportStatus           @default(GENERATING)
  priority          ReportPriority         @default(MEDIUM)
  assignedTo        String?
  reportedAt        DateTime               @default(now())
  reviewedAt        DateTime?
  resolvedAt        DateTime?
  resolution        String?
  actionTaken       String?
  media             SharedMedia            @relation(fields: [mediaId], references: [id])
  reporter          User                   @relation("UserMediaReports", fields: [reportedBy], references: [id])
  assignee          User?                  @relation("UserAssignedReports", fields: [assignedTo], references: [id])
  
  @@index([mediaId, status])
  @@index([reportedBy, reportedAt])
  @@map("media_reports")
}

model ContentModeration {
  id                String                 @id @default(cuid())
  contentType       ContentType
  contentId         String                 // ID of the content being moderated
  moderatorId       String
  action            ModerationAction
  reason            String?
  notes             String?
  automatedFlags    Json?                  // Flags from automated systems
  severity          ModerationSeverity     @default(LOW)
  appealable        Boolean                @default(true)
  appealDeadline    DateTime?
  moderatedAt       DateTime               @default(now())
  moderator         User                   @relation("UserContentModerations", fields: [moderatorId], references: [id])
  
  @@index([contentType, contentId])
  @@index([moderatorId, moderatedAt])
  @@map("content_moderations")
}

model CommunicationNotification {
  id                String                 @id @default(cuid())
  userId            String
  notificationType  CommunicationNotificationType
  title             String
  message           String
  data              Json?                  // Additional data
  isRead            Boolean                @default(false)
  readAt            DateTime?
  priority          NotificationPriority   @default(NORMAL)
  expiresAt         DateTime?
  createdAt         DateTime               @default(now())
  user              User                   @relation("UserCommunicationNotifications", fields: [userId], references: [id])
  
  @@index([userId, isRead])
  @@index([createdAt, priority])
  @@map("communication_notifications")
}

model PrivacySettings {
  id                String                 @id @default(cuid())
  userId            String                 @unique
  profileVisibility ProfileVisibility      @default(FRIENDS)
  allowFriendRequests Boolean              @default(true)
  allowMediaSharing Boolean                @default(true)
  allowLocationSharing Boolean             @default(false)
  allowActivitySharing Boolean             @default(true)
  dataRetentionPeriod Int?                 // Days to retain data
  allowAnalytics    Boolean                @default(true)
  allowMarketing    Boolean                @default(false)
  allowThirdPartySharing Boolean           @default(false)
  settings          Json?                  // Additional privacy settings
  updatedAt         DateTime               @updatedAt
  user              User                   @relation("UserPrivacySettings", fields: [userId], references: [id])
  
  @@map("privacy_settings")
}

// Legal Compliance Models

model LegalAgreement {
  id                String                 @id @default(cuid())
  userId            String
  agreementType     LegalAgreementType
  version           String
  content           String                 // Agreement content
  agreedAt          DateTime               @default(now())
  ipAddress         String?
  userAgent         String?
  isActive          Boolean                @default(true)
  supersededBy      String?                // ID of newer agreement
  user              User                   @relation("UserLegalAgreements", fields: [userId], references: [id])
  
  @@index([userId, agreementType])
  @@index([agreementType, version])
  @@map("legal_agreements")
}

// Identity & Phone Verification Models

model PhoneVerification {
  id                String                 @id @default(cuid())
  userId            String
  phoneNumber       String
  verificationCode  String
  method            VerificationMethod     @default(SMS_CODE)
  status            VerificationStatus     @default(PENDING)
  attempts          Int                    @default(0)
  maxAttempts       Int                    @default(3)
  expiresAt         DateTime
  verifiedAt        DateTime?
  createdAt         DateTime               @default(now())
  ipAddress         String?
  userAgent         String?
  user              User                   @relation("UserPhoneVerifications", fields: [userId], references: [id])
  
  @@index([userId, status])
  @@index([phoneNumber, status])
  @@map("phone_verifications")
}

model IdentityVerification {
  id                String                 @id @default(cuid())
  userId            String
  verificationType  IdentityVerificationType
  documentType      DocumentType?
  documentNumber    String?
  documentImages    Json?                  // URLs of document images
  selfieImage       String?                // Selfie for comparison
  status            VerificationStatus     @default(PENDING)
  submittedAt       DateTime               @default(now())
  reviewedAt        DateTime?
  reviewedBy        String?                // Admin who reviewed
  rejectionReason   String?
  verificationScore Float?                 // Confidence score
  verificationResult String?               // Added missing verification result field
  matchConfidence   Float?                 // Added missing match confidence field
  externalReference String?                // Reference from external service
  metadata          Json?
  checkInOutEventId String?                // Added field for check-in-out relation
  user              User                   @relation("UserIdentityVerifications", fields: [userId], references: [id])
  checkInOutEvent   CheckInOutEvent?       @relation("CheckInOutIdentityVerifications", fields: [checkInOutEventId], references: [id])
  
  @@index([userId, status])
  @@index([status, submittedAt])
  @@map("identity_verifications")
}

model TwoFactorAttempt {
  id                String                 @id @default(cuid())
  userId            String
  method            TwoFactorMethod
  code              String?                // For TOTP/SMS
  success           Boolean                @default(false)
  attemptedAt       DateTime               @default(now())
  ipAddress         String?
  userAgent         String?
  failureReason     String?
  user              User                   @relation("UserTwoFactorAttempts", fields: [userId], references: [id])
  
  @@index([userId, attemptedAt])
  @@index([success, attemptedAt])
  @@map("two_factor_attempts")
}

model VerificationStatusHistory {
  id                String                 @id @default(cuid())
  userId            String
  previousLevel     VerificationLevel
  newLevel          VerificationLevel
  reason            String?
  changedBy         String?                // Admin who made the change
  changedAt         DateTime               @default(now())
  metadata          Json?
  user              User                   @relation("UserVerificationHistory", fields: [userId], references: [id])
  
  @@index([userId, changedAt])
  @@map("verification_status_history")
}

model TwoFactorBackupCode {
  id                String                 @id @default(cuid())
  userId            String
  code              String                 @unique
  used              Boolean                @default(false)
  usedAt            DateTime?
  createdAt         DateTime               @default(now())
  user              User                   @relation("UserBackupCodes", fields: [userId], references: [id])
  
  @@index([userId, used])
  @@map("two_factor_backup_codes")
}

// Enhanced Verification Models

model WebAuthnCredential {
  id                String                 @id @default(cuid())
  userId            String
  credentialId      String                 @unique
  publicKey         String
  counter           Int                    @default(0)
  deviceType        String?
  deviceName        String?
  createdAt         DateTime               @default(now())
  lastUsed          DateTime?
  isActive          Boolean                @default(true)
  user              User                   @relation("UserWebAuthnCredentials", fields: [userId], references: [id])
  
  @@index([userId, isActive])
  @@map("webauthn_credentials")
}

model EmailVerification {
  id                String                 @id @default(cuid())
  userId            String
  email             String
  verificationToken String                 @unique
  status            VerificationStatus     @default(PENDING)
  expiresAt         DateTime
  verifiedAt        DateTime?
  createdAt         DateTime               @default(now())
  user              User                   @relation("UserEmailVerifications", fields: [userId], references: [id])
  
  @@index([userId, status])
  @@index([email, status])
  @@map("email_verifications")
}

model PushNotificationDevice {
  id                String                 @id @default(cuid())
  userId            String
  deviceToken       String                 @unique
  platform          DevicePlatform
  deviceInfo        Json?
  isActive          Boolean                @default(true)
  registeredAt      DateTime               @default(now())
  lastUsed          DateTime?
  user              User                   @relation("UserPushDevices", fields: [userId], references: [id])
  
  @@index([userId, isActive])
  @@map("push_notification_devices")
}

model VerificationAuditLog {
  id                String                 @id @default(cuid())
  userId            String
  action            VerificationAction
  details           Json?
  ipAddress         String?
  userAgent         String?
  timestamp         DateTime               @default(now())
  user              User                   @relation("UserVerificationAuditLogs", fields: [userId], references: [id])
  
  @@index([userId, timestamp])
  @@index([action, timestamp])
  @@map("verification_audit_logs")
}

// Payment and Subscription Models

model UserSubscription {
  id                String                 @id @default(cuid())
  userId            String                 @unique
  planType          SubscriptionPlan
  status            SubscriptionStatus     @default(ACTIVE)
  startDate         DateTime               @default(now())
  endDate           DateTime?
  autoRenew         Boolean                @default(true)
  paymentMethodId   String?                @unique
  stripeSubscriptionId String?             @unique
  stripeCustomerId  String?
  currentPeriodStart DateTime?
  currentPeriodEnd  DateTime?
  cancelAtPeriodEnd Boolean                @default(false)
  canceledAt        DateTime?
  cancelReason      String?
  trialStart        DateTime?
  trialEnd          DateTime?
  metadata          Json?
  user              User                   @relation("UserSubscription", fields: [userId], references: [id])
  paymentMethod     UserPaymentMethod?     @relation("SubscriptionPaymentMethod", fields: [paymentMethodId], references: [id])
  
  @@index([status, endDate])
  @@map("user_subscriptions")
}

model UserPaymentMethod {
  id                String                 @id @default(cuid())
  userId            String
  type              PaymentMethodType
  stripePaymentMethodId String?            @unique
  last4             String?
  brand             String?
  expiryMonth       Int?
  expiryYear        Int?
  isDefault         Boolean                @default(false)
  isActive          Boolean                @default(true)
  billingAddress    Json?
  createdAt         DateTime               @default(now())
  user              User                   @relation("UserPaymentMethods", fields: [userId], references: [id])
  subscription      UserSubscription?      @relation("SubscriptionPaymentMethod")
  transactions      PaymentTransaction[]
  
  @@index([userId, isActive])
  @@map("user_payment_methods")
}

model PaymentTransaction {
  id                String                 @id @default(cuid())
  userId            String
  paymentMethodId   String?
  type              TransactionType
  status            PaymentStatus          @default(PENDING)
  amount            Float
  currency          String                 @default("USD")
  description       String?
  stripePaymentIntentId String?            @unique
  stripeChargeId    String?
  refundAmount      Float?
  refundReason      String?
  failureReason     String?
  metadata          Json?
  createdAt         DateTime               @default(now())
  processedAt       DateTime?
  user              User                   @relation("UserPaymentTransactions", fields: [userId], references: [id])
  paymentMethod     UserPaymentMethod?     @relation(fields: [paymentMethodId], references: [id])
  
  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@map("payment_transactions")
}

model SubscriptionHistory {
  id                String                 @id @default(cuid())
  userId            String
  planType          SubscriptionPlan
  action            SubscriptionAction
  previousStatus    SubscriptionStatus?
  newStatus         SubscriptionStatus
  effectiveDate     DateTime
  reason            String?
  metadata          Json?
  createdAt         DateTime               @default(now())
  user              User                   @relation("UserSubscriptionHistory", fields: [userId], references: [id])
  
  @@index([userId, createdAt])
  @@map("subscription_history")
}

model UsageRecord {
  id                String                 @id @default(cuid())
  userId            String
  feature           UsageFeature
  quantity          Int                    @default(1)
  unit              String?                // e.g., "requests", "storage_gb"
  timestamp         DateTime               @default(now())
  metadata          Json?
  user              User                   @relation("UserUsageRecords", fields: [userId], references: [id])
  
  @@index([userId, feature, timestamp])
  @@map("usage_records")
}

model BillingEvent {
  id                String                 @id @default(cuid())
  userId            String
  eventType         BillingEventType
  amount            Float?
  currency          String?                @default("USD")
  description       String
  stripeEventId     String?                @unique
  processed         Boolean                @default(false)
  processedAt       DateTime?
  metadata          Json?
  timestamp         DateTime               @default(now())
  user              User                   @relation("UserBillingEvents", fields: [userId], references: [id])
  
  @@index([userId, timestamp])
  @@index([eventType, processed])
  @@map("billing_events")
}

// Discount Code Models

model DiscountCode {
  id                String                 @id @default(cuid())
  code              String                 @unique
  name              String?
  description       String?
  type              DiscountType
  category          DiscountCategory?      // Added missing category field
  value             Float                  // Percentage or fixed amount
  currency          String?                @default("USD")
  minimumAmount     Float?                 // Minimum order amount
  maximumDiscount   Float?                 // Maximum discount amount
  usageLimit        Int?                   // Total usage limit
  usageCount        Int                    @default(0)
  userUsageLimit    Int?                   // Per-user usage limit
  validFrom         DateTime               @default(now())
  validUntil        DateTime?
  expiresAt         DateTime?              // Added missing field
  maxUses           Int?                   // Added missing field (alias for usageLimit)
  currentUses       Int                    @default(0) // Added missing field (alias for usageCount)
  clickCount        Int                    @default(0) // Added missing field
  stripePromotionCodeId String?            // Added missing field
  isActive          Boolean                @default(true)
  venueSpecific     Boolean                @default(false)   // Missing field
  applicableVenues  Json?                  // Which venues this applies to
  applicableProducts Json?                 // Which products/plans this applies to
  restrictedUsers   Json?                  // Users who cannot use this code
  userRestrictions  Json?                  // User restrictions for this code
  allowedUserRoles  Json?                  // Allowed user roles for this code
  allowedCountries  Json?                  // Allowed countries for this code
  allowedStates     Json?                  // Allowed states for this code
  allowedZipCodes   Json?                  // Allowed ZIP codes for this code
  campaignName      String?                // Associated campaign name
  affiliateId       String?                // Associated affiliate ID
  autoApplyConditions Json?                // Auto-apply conditions
  restrictToNewUsers Boolean               @default(false)
  restrictToFirstTime Boolean              @default(false) // Restrict to first-time users only
  createdBy         String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  discountCodeUsages DiscountCodeUsage[] @relation("DiscountCodeUsages") // Relation for tracking usage
  usageHistory      DiscountCodeUsage[] @relation("DiscountCodeHistory") // Relation for usage history
  
  @@index([code, isActive])
  @@index([validFrom, validUntil])
  @@map("discount_codes")
}

model DiscountCodeUsage {
  id                String                 @id @default(cuid())
  codeId            String
  userId            String
  venueId           String?
  orderId           String?                // Order or transaction ID
  discountAmount    Float
  originalAmount    Float
  finalAmount       Float
  usedAt            DateTime               @default(now())
  usageStatus       String?                // Added missing usage status field
  metadata          Json?
  code              DiscountCode           @relation("DiscountCodeUsages", fields: [codeId], references: [id])
  historyCode       DiscountCode?          @relation("DiscountCodeHistory", fields: [historyCodeId], references: [id])
  historyCodeId     String?                // Added field for history relation
  user              User                   @relation("UserDiscountUsages", fields: [userId], references: [id])
  venue             Venue?                 @relation("VenueDiscountUsages", fields: [venueId], references: [id])
  
  @@index([codeId, usedAt])
  @@index([userId, usedAt])
  @@map("discount_code_usages")
}

// Payment and Revenue Sharing Models

model VenuePaymentSettings {
  id                String                 @id @default(cuid())
  venueId           String                 @unique
  stripeAccountId   String?                @unique
  payoutSchedule    PayoutSchedule         @default(WEEKLY)
  minimumPayout     Float                  @default(25.0)
  commissionRate    Float                  @default(0.15) // 15% commission
  taxId             String?
  businessType      String?
  bankAccount       Json?                  // Bank account details
  isActive          Boolean                @default(true)
  onboardingComplete Boolean               @default(false)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  venue             Venue                  @relation("VenuePaymentSettings", fields: [venueId], references: [id])
  
  @@map("venue_payment_settings")
}

model RevenueTransaction {
  id                String                 @id @default(cuid())
  venueId           String
  transactionType   RevenueTransactionType
  amount            Float
  commission        Float
  netAmount         Float                  // Amount after commission
  currency          String                 @default("USD")
  description       String?
  sourceTransactionId String?              // Original transaction ID
  stripeTransferId  String?
  status            RevenueStatus          @default(PENDING)
  processedAt       DateTime?
  metadata          Json?
  createdAt         DateTime               @default(now())
  venue             Venue                  @relation("VenueRevenueTransactions", fields: [venueId], references: [id])
  
  @@index([venueId, createdAt])
  @@index([status, processedAt])
  @@map("revenue_transactions")
}

model PayoutHistory {
  id                String                 @id @default(cuid())
  venueId           String
  amount            Float
  currency          String                 @default("USD")
  stripePayoutId    String?                @unique
  status            PayoutStatus           @default(PENDING)
  periodStart       DateTime
  periodEnd         DateTime
  transactionCount  Int                    @default(0)
  fees              Float                  @default(0)
  netAmount         Float
  payoutDate        DateTime?
  failureReason     String?
  metadata          Json?
  createdAt         DateTime               @default(now())
  venue             Venue                  @relation("VenuePayoutHistory", fields: [venueId], references: [id])
  
  @@index([venueId, createdAt])
  @@index([status, payoutDate])
  @@map("payout_history")
}

// Email Automation Models

model EmailPreferences {
  id                String                 @id @default(cuid())
  userId            String                 @unique
  marketingEmails   Boolean                @default(true)
  productUpdates    Boolean                @default(true)
  securityAlerts    Boolean                @default(true)
  weeklyDigest      Boolean                @default(true)
  eventNotifications Boolean               @default(true)
  promotionalOffers Boolean                @default(true)
  frequency         EmailFrequency         @default(IMMEDIATE)
  unsubscribedAt    DateTime?
  unsubscribeReason String?
  language          String?                @default("en")
  preferredTime     String?                // Preferred time for emails
  lastUpdated       DateTime?              // Last updated timestamp
  updatedAt         DateTime               @updatedAt
  emailEnabled      Boolean                @default(true)    // Missing field
  alertEmails       Boolean                @default(true)    // Missing field
  featureUpdates    Boolean                @default(true)    // Missing field
  eventReminders    Boolean                @default(true)    // Missing field
  monthlyReport     Boolean                @default(true)    // Missing field
  securityEmails    Boolean                @default(true)    // Missing field
  welcomeSequence   Boolean                @default(true)    // Missing field
  timeZone          String?                @default("UTC")   // Missing field
  unsubscribeToken  String?                @unique          // Missing field
  user              User                   @relation("UserEmailPreferences", fields: [userId], references: [id])
  
  @@map("email_preferences")
}

model EmailLog {
  id                String                 @id @default(cuid())
  userId            String?
  email             String
  subject           String
  templateId        String?
  campaignId        String?
  status            EmailStatus            @default(SENT)
  createdAt         DateTime               @default(now()) // Added missing createdAt field
  sentAt            DateTime               @default(now())
  deliveredAt       DateTime?
  openedAt          DateTime?
  clickedAt         DateTime?
  bouncedAt         DateTime?
  bounceReason      String?
  unsubscribedAt    DateTime?
  metadata          Json?
  user              User?                  @relation("UserEmailLogs", fields: [userId], references: [id])
  automationExecution EmailAutomationExecution? // Missing opposite relation
  
  @@index([userId, sentAt])
  @@index([email, sentAt])
  @@map("email_logs")
}

model EmailNotification {
  id                String                 @id @default(cuid())
  userId            String
  email             String
  recipientEmail    String                 // Recipient email address
  subject           String
  content           String
  status            EmailStatus            @default(SENT)
  sentAt            DateTime               @default(now())
  deliveredAt       DateTime?
  openedAt          DateTime?
  clickedAt         DateTime?
  metadata          Json?
  user              User                   @relation("UserEmailNotifications", fields: [userId], references: [id])
  
  @@index([userId, sentAt])
  @@index([email, status])
  @@map("email_notifications")
}

model EmailTemplate {
  id                String                 @id @default(cuid())
  name              String
  templateType      EmailTemplateType      @default(CUSTOM)
  category          EmailCategory          @default(GENERAL)
  subject           String
  content           String                 // HTML content
  isActive          Boolean                @default(true)
  createdBy         String
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  creator           User                   @relation("UserEmailTemplates", fields: [createdBy], references: [id])
  automationRules   EmailAutomationRule[]
  
  @@index([templateType, category])
  @@map("email_templates")
}

model EmailSegment {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  criteria          Json                   // Segmentation criteria
  isActive          Boolean                @default(true)
  memberCount       Int                    @default(0)
  lastUpdated       DateTime               @default(now())
  createdBy         String
  createdAt         DateTime               @default(now())
  creator           User                   @relation("UserEmailSegments", fields: [createdBy], references: [id])
  members           EmailSegmentMember[]
  campaigns         EmailCampaign[]
  automationRules   EmailAutomationRule[]  // Missing relation
  
  @@index([isActive, lastUpdated])
  @@map("email_segments")
}

model EmailSegmentMember {
  id                String                 @id @default(cuid())
  segmentId         String
  userId            String
  addedAt           DateTime               @default(now())
  segment           EmailSegment           @relation(fields: [segmentId], references: [id])
  user              User                   @relation("UserSegmentMemberships", fields: [userId], references: [id])
  
  @@unique([segmentId, userId])
  @@index([userId, addedAt])
  @@map("email_segment_members")
}

model EmailCampaign {
  id                String                 @id @default(cuid())
  name              String
  subject           String
  content           String                 // HTML content
  segmentId         String?
  emailSegmentId    String?                // Missing field
  targetSegment     String?                // Missing field
  segmentFilters    Json?                  // Missing field
  status            CampaignStatus         @default(DRAFT)
  scheduledAt       DateTime?
  sentAt            DateTime?
  recipientCount    Int                    @default(0)
  deliveredCount    Int                    @default(0)
  openedCount       Int                    @default(0)
  clickedCount      Int                    @default(0)
  bouncedCount      Int                    @default(0)
  unsubscribedCount Int                    @default(0)
  isRecurring       Boolean                @default(false)
  recurrencePattern Json?                  // Recurrence pattern for campaigns
  priority          Int                    @default(1)
  trackOpens        Boolean                @default(true)
  trackClicks       Boolean                @default(true) // Track click events
  maxRecipients     Int?                   // Maximum number of recipients
  rateLimitPerHour  Int?                   // Rate limit per hour for sending
  sendImmediately   Boolean                @default(false) // Send immediately flag
  createdBy         String
  approvedBy        String?
  approvedAt        DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  segment           EmailSegment?          @relation(fields: [segmentId], references: [id])
  creator           User                   @relation("UserCreatedCampaigns", fields: [createdBy], references: [id])
  approver          User?                  @relation("UserApprovedCampaigns", fields: [approvedBy], references: [id])
  
  @@index([status, scheduledAt])
  @@index([createdBy, createdAt])
  @@map("email_campaigns")
}

model EmailAutomationRule {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  trigger           EmailTrigger
  conditions        Json                   // Conditions for the rule
  triggerConditions Json?                  // Missing field
  stopConditions    Json?                  // Stop conditions for the rule
  actions           Json                   // Actions to perform
  delay             Int?                   // Missing field (in minutes)
  maxSends          Int?                   // Missing field
  isActive          Boolean                @default(true)
  priority          Int                    @default(1)
  sendOnWeekends    Boolean                @default(true)
  sendTimeStart     String?                // Start time for sending emails
  sendTimeEnd       String?                // End time for sending emails
  timezone          String?                @default("UTC") // Timezone for scheduling
  userSegment       Json?                  // User segment targeting
  segmentFilters    Json?                  // Segment filter criteria
  createdBy         String
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  creator           User                   @relation("UserAutomationRules", fields: [createdBy], references: [id])
  executions        EmailAutomationExecution[]
  templateId        String?                // Template ID
  template          EmailTemplate?         @relation(fields: [templateId], references: [id]) // Missing relation
  emailSegmentId    String?                // Email segment ID
  emailSegment      EmailSegment?          @relation(fields: [emailSegmentId], references: [id]) // Missing relation
  
  @@index([isActive, priority])
  @@map("email_automation_rules")
}

model EmailAutomationExecution {
  id                String                 @id @default(cuid())
  ruleId            String
  userId            String
  triggerData       Json                   // Data that triggered the rule
  status            ExecutionStatus        @default(PENDING)
  executedAt        DateTime?
  completedAt       DateTime?
  errorMessage      String?
  metadata          Json?
  scheduledAt       DateTime?              // Missing field
  createdAt         DateTime               @default(now())
  rule              EmailAutomationRule    @relation(fields: [ruleId], references: [id])
  user              User                   @relation("UserAutomationExecutions", fields: [userId], references: [id])
  emailLogId        String?                @unique // Email log ID
  emailLog          EmailLog?              @relation(fields: [emailLogId], references: [id]) // Missing relation
  
  @@index([ruleId, createdAt])
  @@index([userId, status])
  @@map("email_automation_executions")
}



// Missing Models Referenced in Code

model KnowledgeBaseArticle {
  id                String                 @id @default(cuid())
  title             String
  content           String
  slug              String                 @unique
  category          String
  isPublished       Boolean                @default(false)
  authorId          String
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  author            User                   @relation("UserKnowledgeBaseArticles", fields: [authorId], references: [id])
  feedback          ArticleFeedback[]
  
  @@index([category, isPublished])
  @@map("knowledge_base_articles")
}

model ArticleFeedback {
  id                String                 @id @default(cuid())
  articleId         String
  userId            String?
  rating            Int                    // 1-5 rating
  comment           String?
  isHelpful         Boolean
  createdAt         DateTime               @default(now())
  article           KnowledgeBaseArticle   @relation(fields: [articleId], references: [id])
  user              User?                  @relation("UserArticleFeedback", fields: [userId], references: [id])
  
  @@index([articleId, rating])
  @@map("article_feedback")
}

model ChatMessage {
  id                String                 @id @default(cuid())
  sessionId         String
  senderId          String
  content           String
  messageType       String                 @default("text")
  isFromAgent       Boolean                @default(false)
  createdAt         DateTime               @default(now())
  session           SupportChatSession     @relation(fields: [sessionId], references: [id])
  sender            User                   @relation("UserChatMessages", fields: [senderId], references: [id])
  
  @@index([sessionId, createdAt])
  @@map("chat_messages")
}

model SupportTicketMessage {
  id                String                 @id @default(cuid())
  ticketId          String
  senderId          String
  content           String
  isFromAgent       Boolean                @default(false)
  createdAt         DateTime               @default(now())
  ticket            SupportTicket          @relation(fields: [ticketId], references: [id])
  sender            User                   @relation("UserTicketMessages", fields: [senderId], references: [id])
  
  @@index([ticketId, createdAt])
  @@map("support_ticket_messages")
}

model SupportTicketTimeline {
  id                String                 @id @default(cuid())
  ticketId          String
  actionType        String
  description       String
  performedBy       String
  createdAt         DateTime               @default(now())
  ticket            SupportTicket          @relation(fields: [ticketId], references: [id])
  performer         User                   @relation("UserTicketTimeline", fields: [performedBy], references: [id])
  
  @@index([ticketId, createdAt])
  @@map("support_ticket_timeline")
}

// Support Center Models

model SupportTicket {
  id                String                 @id @default(cuid())
  ticketNumber      String                 @unique
  subject           String
  description       String
  category          SupportCategory
  priority          SupportPriority        @default(MEDIUM)
  status            SupportTicketStatus    @default(OPEN)
  userId            String?
  venueId           String?
  assignedTo        String?                // Support agent ID
  tags              Json?
  attachments       Json?                  // File attachments
  resolution        String?
  satisfactionRating Int?                  // 1-5 rating
  feedback          String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  resolvedAt        DateTime?
  closedAt          DateTime?
  user              User?                  @relation("UserSupportTickets", fields: [userId], references: [id])
  venue             Venue?                 @relation("VenueSupportTickets", fields: [venueId], references: [id])
  agent             SupportAgent?          @relation("AgentSupportTickets", fields: [assignedTo], references: [id])
  chatSessions      SupportChatSession[]
  messages          SupportTicketMessage[] // Missing relation
  timeline          SupportTicketTimeline[] // Missing relation
  
  @@index([status, priority])
  @@index([userId, createdAt])
  @@map("support_tickets")
}

model SupportAgent {
  id                String                 @id @default(cuid())
  userId            String                 @unique
  agentId           String                 @unique
  specialties       Json?                  // Areas of expertise
  languages         Json?                  // Supported languages
  isActive          Boolean                @default(true)
  maxConcurrentTickets Int                 @default(10)
  currentTicketCount Int                   @default(0)
  averageRating     Float?
  totalTicketsResolved Int                 @default(0)
  averageResolutionTime Int?               // In hours
  createdAt         DateTime               @default(now())
  user              User                   @relation("UserSupportAgent", fields: [userId], references: [id])
  assignedTickets   SupportTicket[]        @relation("AgentSupportTickets")
  chatSessions      SupportChatSession[]
  
  @@index([isActive, currentTicketCount])
  @@map("support_agents")
}

model SupportChatSession {
  id                String                 @id @default(cuid())
  ticketId          String?
  userId            String
  agentId           String?
  status            ChatSessionStatus      @default(ACTIVE)
  startedAt         DateTime               @default(now())
  endedAt           DateTime?
  messageCount      Int                    @default(0)
  rating            Int?                   // 1-5 rating
  feedback          String?
  ticket            SupportTicket?         @relation(fields: [ticketId], references: [id])
  user              User                   @relation("UserChatSessions", fields: [userId], references: [id])
  agent             SupportAgent?          @relation(fields: [agentId], references: [id])
  messages          ChatMessage[]          // Missing relation
  
  @@index([userId, startedAt])
  @@index([agentId, status])
  @@map("support_chat_sessions")
}

// Family Member Management Models

model FamilyInvitation {
  id                String                 @id @default(cuid())
  inviterId         String
  inviterUserId     String?                // Missing field (alias for inviterId)
  inviteeEmail      String
  inviteeId         String?                // If user already exists
  inviteeName       String?                // Missing field
  relationship      FamilyRelationship
  permissions       Json?                  // Permissions to grant
  permissionSet     Json?                  // Missing field (alias for permissions)
  familyRole        String?                // Missing field
  message           String?
  token             String                 @unique
  invitationToken   String?                @unique // Missing field (alias for token)
  linkedChildrenIds String[]               // Missing field
  status            InvitationStatus       @default(PENDING)
  expiresAt         DateTime
  sentAt            DateTime               @default(now())
  acceptedAt        DateTime?
  acceptedBy        String?                // Missing field
  acceptanceIpAddress String?              // IP address of acceptance
  acceptanceUserAgent String?              // User agent of acceptance
  invitationMessage String?                // Custom invitation message
  ipAddress         String?                // IP address of inviter
  revokedAt         DateTime?              // Time when invitation was revoked
  revokedBy         String?                // User who revoked the invitation
  revokeReason      String?                // Reason for revoking invitation
  userAgent         String?                // User agent string
  declinedAt        DateTime?
  inviter           User                   @relation("UserSentInvitations", fields: [inviterId], references: [id])
  invitee           User?                  @relation("UserReceivedInvitations", fields: [inviteeId], references: [id])
  linkedChildren    Child[]                // Missing relation
  
  @@index([inviterId, status])
  @@index([inviteeEmail, status])
  @@map("family_invitations")
}

model FamilyMember {
  id                String                 @id @default(cuid())
  familyId          String                 // Primary family member's user ID
  memberId          String
  relationship      FamilyRelationship
  status            FamilyMemberStatus     @default(ACTIVE)
  joinedAt          DateTime               @default(now())
  leftAt            DateTime?
  invitedBy         String?
  invitationId      String?                // ID of the invitation used to join
  notes             String?
  displayName       String?                // Display name for the family member
  familyOwnerId     String?                // Owner of the family
  familyRole        String?                // Role in the family
  canViewAllChildren Boolean               @default(false)
  canEditChildren   Boolean                @default(false)
  canCheckInOut     Boolean                @default(false)
  canPurchaseMedia  Boolean                @default(false)
  canViewPhotos     Boolean                @default(false) // Can view photos
  isBlocked         Boolean                @default(false)
  family            User                   @relation("UserFamilyMemberships", fields: [familyId], references: [id])
  familyOwner       User?                  @relation("UserFamilyOwnerships", fields: [familyOwnerId], references: [id])
  member            User                   @relation("UserFamilyMembers", fields: [memberId], references: [id])
  permissions       FamilyPermission[]     @relation("FamilyMemberPermissions")
  childAccess       ChildAccess[]          @relation("FamilyMemberChildAccess")
  
  @@unique([familyId, memberId])
  @@index([memberId, status])
  @@map("family_members")
}

model FamilyPermission {
  id                String                 @id @default(cuid())
  granterId         String                 // Who granted the permission
  granteeId         String                 // Who received the permission
  familyMemberId    String?                // Associated family member record
  permissionType    FamilyPermissionType
  resourceType      PermissionResourceType
  resourceId        String?                // Specific resource ID (child, venue, etc.)
  isActive          Boolean                @default(true)
  grantedAt         DateTime               @default(now())
  expiresAt         DateTime?
  revokedAt         DateTime?
  revokedBy         String?
  conditions        Json?                  // Conditions for the permission
  grantedBy         String?                // User who granted the permission
  receivedBy        String?                // User who received the permission
  permissionLevel   String?                // Permission level
  canRead           Boolean                @default(true)
  canWrite          Boolean                @default(false)
  canDelete         Boolean                @default(false)
  canShare          Boolean                @default(false) // Can share permissions
  grantor           User                   @relation("UserGrantedPermissions", fields: [granterId], references: [id])
  grantee           User                   @relation("UserReceivedPermissions", fields: [granteeId], references: [id])
  familyMember      FamilyMember?          @relation("FamilyMemberPermissions", fields: [familyMemberId], references: [id])
  
  @@index([granteeId, isActive])
  @@index([resourceType, resourceId])
  @@map("family_permissions")
}

model ChildAccess {
  id                String                 @id @default(cuid())
  childId           String
  granterId         String                 // Parent who granted access
  granteeId         String                 // Family member who received access
  familyMemberId    String?
  accessLevel       ChildAccessLevel
  permissions       Json                   // Specific permissions
  isActive          Boolean                @default(true)
  grantedAt         DateTime               @default(now())
  expiresAt         DateTime?
  revokedAt         DateTime?
  conditions        Json?                  // Access conditions
  grantedBy         String?                // Missing field
  accessedBy        String?                // Missing field
  canViewPhotos     Boolean                @default(true)  // Missing field
  canViewVideos     Boolean                @default(true)  // Missing field
  canCheckInOut     Boolean                @default(true)  // Missing field
  canViewProfile    Boolean                @default(true)  // Missing field
  canEditProfile    Boolean                @default(false) // Can edit profile information
  canViewLocation   Boolean                @default(true)  // Missing field
  canReceiveAlerts  Boolean                @default(true)  // Missing field
  canPurchaseMedia  Boolean                @default(true)  // Missing field
  isBlocked         Boolean                @default(false) // Missing field
  status            String?                // Missing field
  child             Child                  @relation("ChildFamilyMemberAccess", fields: [childId], references: [id])
  grantor           User                   @relation("UserChildAccessGrants", fields: [granterId], references: [id])
  grantee           User                   @relation("UserChildAccessReceived", fields: [granteeId], references: [id])
  familyMember      FamilyMember?          @relation("FamilyMemberChildAccess", fields: [familyMemberId], references: [id])
  
  @@unique([childId, granteeId])
  @@index([granteeId, isActive])
  @@map("child_access")
}

// Individual Purchase Models (v1.5.0)

model IndividualPurchase {
  id                     String                   @id @default(cuid())
  userId                 String
  purchaseType           IndividualPurchaseType
  amount                 Float                    // $0.99 for photo, $2.99 for video
  currency               String                   @default("usd")
  stripePaymentIntentId  String?                  // For payment tracking
  stripeSessionId        String?                  // For checkout session tracking
  paymentStatus          PaymentStatus
  memoryId               String?                  // If purchasing specific memory
  downloadUrl            String?                  // Generated download URL
  downloadExpiresAt      DateTime?                // When download link expires
  purchasedAt            DateTime                 @default(now())
  downloadedAt           DateTime?
  metadata               Json?                    // Additional purchase data
  user                   User                     @relation("UserIndividualPurchases", fields: [userId], references: [id])
  memory                 Memory?                  @relation("MemoryIndividualPurchases", fields: [memoryId], references: [id])
  
  @@index([userId, purchaseType])
  @@index([paymentStatus])
  @@map("individual_purchases")
}

model PhotoVideoPackPurchase {
  id                     String                   @id @default(cuid())
  userId                 String
  packType               PhotoVideoPackType
  amount                 Float                    // $9.99, $19.99, or $29.99
  currency               String                   @default("usd")
  stripePaymentIntentId  String?
  stripeSessionId        String?
  paymentStatus          PaymentStatus
  photoCredits           Int                      // Number of photo downloads included
  videoCredits           Int                      // Number of video downloads included
  purchasedAt            DateTime                 @default(now())
  expiresAt              DateTime?                // When credits expire (if applicable)
  metadata               Json?
  user                   User                     @relation("UserPhotoVideoPackPurchases", fields: [userId], references: [id])
  credits                PhotoVideoPackCredit[]   @relation("PackPurchaseCredits")
  
  @@index([userId, packType])
  @@index([paymentStatus])
  @@map("photo_video_pack_purchases")
}

model PhotoVideoPackCredit {
  id                     String                   @id @default(cuid())
  userId                 String
  packPurchaseId         String
  creditType             IndividualPurchaseType   // PHOTO or VIDEO_MONTAGE
  isUsed                 Boolean                  @default(false)
  usedAt                 DateTime?
  memoryId               String?                  // If used for specific memory
  downloadUrl            String?
  downloadExpiresAt      DateTime?
  createdAt              DateTime                 @default(now())
  expiresAt              DateTime?
  user                   User                     @relation("UserPhotoVideoPackCredits", fields: [userId], references: [id])
  packPurchase           PhotoVideoPackPurchase   @relation("PackPurchaseCredits", fields: [packPurchaseId], references: [id])
  memory                 Memory?                  @relation("MemoryPackCreditUses", fields: [memoryId], references: [id])
  
  @@index([userId, creditType, isUsed])
  @@index([packPurchaseId])
  @@map("photo_video_pack_credits")
}

// Enums

enum UserRole {
  PARENT
  VENUE_ADMIN
  SUPER_ADMIN
  SUPPORT_AGENT
  MODERATOR
}

enum ChildStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum TrackingEventType {
  ENTRY
  EXIT
  MOVEMENT
  ALERT
}

enum MemoryType {
  PHOTO
  VIDEO
}

enum MemoryStatus {
  AVAILABLE
  PURCHASED
  EXPIRED
  DELETED
}

enum AlertType {
  CHILD_MISSING
  UNAUTHORIZED_PERSON
  CAPACITY_EXCEEDED
  EMERGENCY
  SYSTEM_ERROR
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
  DISMISSED
}

enum ContactMessageStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ContactFormType {
  CONTACT
  SUPPORT
  SALES
  PARTNERSHIP
}

enum FaceRecognitionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  EXPIRED
  ACTIVE
}

enum RecognitionEventType {
  FACE_DETECTED
  FACE_MATCHED
  FACE_NOT_MATCHED
  PROCESSING_ERROR
}

// Zone Management Enums

enum ZoneType {
  PLAY_AREA
  ENTRANCE
  EXIT
  EMERGENCY_EXIT
  RESTROOM
  FOOD_COURT
  PARTY_ROOM
  STAFF_ONLY
  STORAGE
  MAINTENANCE
  MEDICAL
  SECURITY
  PARKING
  OUTDOOR
  QUIET_ZONE
  ACTIVE_ZONE
}

enum ZonePriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum SafetyLevel {
  MINIMAL
  STANDARD
  ENHANCED
  MAXIMUM
}

enum HazardLevel {
  NONE
  LOW
  MEDIUM
  HIGH
  EXTREME
}

enum ZoneAccessRuleType {
  AGE_RESTRICTION
  TIME_RESTRICTION
  CAPACITY_LIMIT
  MEMBERSHIP_REQUIRED
  STAFF_ESCORT
  PERMISSION_REQUIRED
  EMERGENCY_ONLY
}

enum ViolationAction {
  ALERT
  BLOCK_ACCESS
  NOTIFY_STAFF
  ESCALATE
  LOG_ONLY
}

enum CapacityStatus {
  NORMAL
  APPROACHING_LIMIT
  AT_CAPACITY
  OVER_CAPACITY
  CLOSED
}

enum OccupancyEventType {
  ENTRY
  EXIT
  CAPACITY_UPDATE
  ZONE_CLOSED
  ZONE_OPENED
}

enum ZoneAccessType {
  ENTRY
  EXIT
  TRANSIT
}

enum AccessMethod {
  AUTOMATIC
  MANUAL
  QR_CODE
  BIOMETRIC
  STAFF_OVERRIDE
}

enum AccessResult {
  GRANTED
  DENIED
  PENDING
  EXPIRED
}

enum EvacuationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum ObstacleStatus {
  CLEAR
  PARTIALLY_BLOCKED
  BLOCKED
  UNDER_MAINTENANCE
}

enum ZoneNotificationType {
  CAPACITY_ALERT
  SAFETY_ALERT
  MAINTENANCE_NOTICE
  CLOSURE_NOTICE
  EMERGENCY_ALERT
  GENERAL_ANNOUNCEMENT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  EMERGENCY
}

enum NotificationDeliveryStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  EXPIRED
}

// Camera Management Enums

enum CameraType {
  FIXED
  PTZ
  DOME
  BULLET
  HIDDEN
  THERMAL
  NIGHT_VISION
}

enum CameraProtocol {
  RTSP
  HTTP
  HTTPS
  ONVIF
  PROPRIETARY
}

enum CameraStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
  ERROR
  RECORDING
  STREAMING
}

enum CameraEventType {
  ONLINE
  OFFLINE
  MOTION_DETECTED
  RECORDING_STARTED
  RECORDING_STOPPED
  ERROR_OCCURRED
  MAINTENANCE_REQUIRED
  STORAGE_FULL
  CONNECTION_LOST
}

enum EventSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum CameraRecommendationType {
  PLACEMENT_OPTIMIZATION
  UPGRADE_HARDWARE
  MAINTENANCE_SCHEDULE
  COVERAGE_IMPROVEMENT
  PERFORMANCE_ENHANCEMENT
  SECURITY_ENHANCEMENT
}

enum RecommendationPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RecommendationStatus {
  PENDING
  APPROVED
  REJECTED
  IMPLEMENTED
  CANCELLED
}

// Enhanced Alert System Enums

enum AlertRuleType {
  CAPACITY_THRESHOLD
  UNAUTHORIZED_ACCESS
  CHILD_MISSING
  EMERGENCY_SITUATION
  SYSTEM_FAILURE
  BEHAVIORAL_ANOMALY
  TIME_BASED
  LOCATION_BASED
}

enum AlertPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  EMERGENCY
}

enum EnhancedAlertType {
  SAFETY_ALERT
  SECURITY_ALERT
  OPERATIONAL_ALERT
  SYSTEM_ALERT
  BEHAVIORAL_ALERT
  ENVIRONMENTAL_ALERT
  COMPLIANCE_ALERT
}

enum AlertSeverity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum EnhancedAlertStatus {
  ACTIVE
  ACKNOWLEDGED
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
  CANCELLED
}

enum AlertSource {
  CAMERA
  SENSOR
  MANUAL
  SYSTEM
  AI_ANALYSIS
  THIRD_PARTY
}

enum ImpactLevel {
  MINIMAL
  LOW
  MEDIUM
  HIGH
  SEVERE
}

enum ResolutionMethod {
  AUTOMATIC
  MANUAL
  ESCALATED
  EXTERNAL
}

enum AcknowledgmentMethod {
  MANUAL
  AUTOMATIC
  MOBILE_APP
  WEB_INTERFACE
  API
}

enum TimelineEntryType {
  CREATED
  ACKNOWLEDGED
  ESCALATED
  UPDATED
  RESOLVED
  CLOSED
  REOPENED
  COMMENT_ADDED
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH_NOTIFICATION
  IN_APP
  WEBHOOK
  PHONE_CALL
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
  EXPIRED
}

enum ContactMethod {
  PHONE
  EMAIL
  SMS
  IN_PERSON
}

enum UnauthorizedType {
  UNKNOWN_PERSON
  RESTRICTED_AREA_ACCESS
  AFTER_HOURS_ACCESS
  SUSPICIOUS_BEHAVIOR
  PROHIBITED_ITEM
}

enum DetectionSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DetectionStatus {
  PENDING
  INVESTIGATING
  CONFIRMED
  FALSE_POSITIVE
  RESOLVED
}

enum SightingSource {
  CAMERA
  STAFF
  PARENT
  AUTOMATED_SYSTEM
}

enum NotificationFrequency {
  IMMEDIATE
  HOURLY
  DAILY
  WEEKLY
  NEVER
}

// Mobile Dashboard Enums

enum DevicePlatform {
  IOS
  ANDROID
  WEB
}

enum LocationSource {
  CAMERA
  BEACON
  WIFI
  MANUAL
  GPS
}

enum CheckInOutType {
  CHECK_IN
  CHECK_OUT
}

enum CheckInMethod {
  MANUAL
  QR_CODE
  BIOMETRIC
  FACIAL_RECOGNITION
  NFC
}

enum MobileNotificationType {
  CHILD_PHOTO
  SAFETY_ALERT
  CHECK_IN_REMINDER
  PROMOTIONAL
  SYSTEM_UPDATE
  EMERGENCY
}

enum OfflineDataType {
  CHILD_PROFILES
  VENUE_INFO
  SAFETY_ALERTS
  PHOTOS
  SETTINGS
}

enum SyncStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum QRCodePurpose {
  CHECK_IN
  VENUE_INFO
  EMERGENCY_CONTACT
  PROMOTIONAL
}

// Safety Analytics Enums

enum AnalyticsEventType {
  PAGE_VIEW
  BUTTON_CLICK
  PHOTO_VIEW
  PHOTO_PURCHASE
  ALERT_RECEIVED
  CHECK_IN
  CHECK_OUT
  SEARCH
  FILTER_APPLIED
  REPORT_GENERATED
}

enum EventCategory {
  USER_INTERACTION
  SAFETY
  COMMERCE
  SYSTEM
  GENERAL
}

enum SafetyReportType {
  DAILY_SUMMARY
  WEEKLY_SUMMARY
  MONTHLY_SUMMARY
  INCIDENT_REPORT
  PERFORMANCE_REPORT
  COMPLIANCE_REPORT
  CUSTOM_REPORT
}

enum ReportPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
  CANCELLED
}

enum ReportFormat {
  PDF
  EXCEL
  CSV
  JSON
}

enum IncidentType {
  INJURY
  MISSING_CHILD
  UNAUTHORIZED_ACCESS
  EQUIPMENT_FAILURE
  BEHAVIORAL_ISSUE
  MEDICAL_EMERGENCY
  SECURITY_BREACH
  OTHER
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
}

enum IncidentPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PerformanceMetricType {
  RESPONSE_TIME
  ACCURACY
  UPTIME
  THROUGHPUT
  ERROR_RATE
  USER_SATISFACTION
}

enum MetricPeriod {
  REAL_TIME
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}

enum ScheduleFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  CUSTOM
}

enum AnalyticsConfigType {
  ALERT_THRESHOLDS
  REPORTING_SETTINGS
  PERFORMANCE_TARGETS
  NOTIFICATION_RULES
}

// Digital Check-in/Check-out Enums

enum MembershipStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  CANCELLED
  PENDING
}

enum VerificationMethod {
  PHOTO_ID
  BIOMETRIC
  SMS_CODE
  EMAIL_VERIFICATION
  STAFF_VERIFICATION
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
  GIFT_CARD
  MEMBERSHIP_CREDIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum KioskStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
  ERROR
}

enum WorkflowTriggerType {
  TIME_BASED
  EVENT_BASED
  CONDITION_BASED
  MANUAL
}

enum ComplianceReportType {
  SAFETY_COMPLIANCE
  DATA_PRIVACY
  FINANCIAL_COMPLIANCE
  OPERATIONAL_COMPLIANCE
}

// Enhanced AI Features Enums

enum AIAnalysisType {
  AGE_ESTIMATION
  EMOTION_DETECTION
  CROWD_DENSITY
  BEHAVIOR_PATTERN
  VOICE_PATTERN
  VISUAL_PATTERN
  SAFETY_ASSESSMENT
}

enum AIAnalysisStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum CrowdLevel {
  EMPTY
  LOW
  MODERATE
  HIGH
  OVERCROWDED
}

enum BehaviorType {
  NORMAL_PLAY
  AGGRESSIVE_BEHAVIOR
  DISTRESSED
  LOST
  RUNNING
  CLIMBING
  FIGHTING
  CRYING
  WANDERING
}

enum RiskLevel {
  MINIMAL
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum VisualPatternType {
  MOVEMENT_PATTERN
  INTERACTION_PATTERN
  SPATIAL_PATTERN
  TEMPORAL_PATTERN
  ANOMALY_DETECTION
}

enum AIInsightType {
  SAFETY_RECOMMENDATION
  OPERATIONAL_IMPROVEMENT
  BEHAVIORAL_INSIGHT
  PREDICTIVE_ALERT
  PERFORMANCE_OPTIMIZATION
}

enum InsightImportance {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InsightCategory {
  SAFETY
  OPERATIONS
  CUSTOMER_EXPERIENCE
  EFFICIENCY
  COMPLIANCE
}

enum ScorePeriod {
  REAL_TIME
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}

enum ModelPerformanceType {
  ACCURACY
  LATENCY
  THROUGHPUT
  RESOURCE_USAGE
  ERROR_ANALYSIS
}

// Messaging and Communication Enums

enum SharedMediaType {
  PHOTO
  VIDEO
  DOCUMENT
  AUDIO
}

enum MediaStatus {
  ACTIVE
  ARCHIVED
  DELETED
  REPORTED
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}

enum MediaPermissionType {
  VIEW
  DOWNLOAD
  SHARE
  PURCHASE
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum ConnectionType {
  FRIEND
  FAMILY
  ACQUAINTANCE
}

enum FriendshipStatus {
  PENDING
  ACTIVE
  BLOCKED
}

enum ActivityType {
  BIRTHDAY_PARTY
  PLAYDATE
  GROUP_ACTIVITY
  EDUCATIONAL
  SPORTS
  ARTS_CRAFTS
  OTHER
}

enum ActivityStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ChatType {
  PRIVATE
  GROUP
  VENUE_CHAT
  SUPPORT_CHAT
  COMMUNITY
}

enum ChatRole {
  MEMBER
  ADMIN
  MODERATOR
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
  LOCATION
  SYSTEM
}

enum NavigationRequestType {
  FIND_CHILD
  FIND_LOCATION
  EMERGENCY_EXIT
  ASSISTANCE_NEEDED
}

enum NavigationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RequestPriority {
  LOW
  NORMAL
  HIGH
  EMERGENCY
}

enum CommunityGroupType {
  PARENTS
  ACTIVITIES
  SUPPORT
  LOCAL_COMMUNITY
  SPECIAL_INTERESTS
}

enum CommunityRole {
  MEMBER
  MODERATOR
  ADMIN
}

enum CommunityEventType {
  MEETUP
  WORKSHOP
  CELEBRATION
  FUNDRAISER
  EDUCATIONAL
  SOCIAL
}

enum EventStatus {
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELLED
  POSTPONED
}

enum ParticipationStatus {
  REGISTERED
  CONFIRMED
  ATTENDED
  NO_SHOW
  CANCELLED
}

enum MediaReportType {
  INAPPROPRIATE_CONTENT
  COPYRIGHT_VIOLATION
  SPAM
  HARASSMENT
  PRIVACY_VIOLATION
  OTHER
}

enum ReportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ContentType {
  MEDIA
  MESSAGE
  COMMENT
  PROFILE
  EVENT
}

enum ModerationAction {
  APPROVED
  REJECTED
  FLAGGED
  REMOVED
  WARNING_ISSUED
}

enum ModerationSeverity {
  LOW
  MEDIUM
  HIGH
  SEVERE
}

enum CommunicationNotificationType {
  NEW_MESSAGE
  FRIEND_REQUEST
  EVENT_INVITATION
  MEDIA_SHARED
  COMMENT_REPLY
  MENTION
  COMMUNITY_INVITE
}

enum ProfileVisibility {
  PUBLIC
  FRIENDS
  PRIVATE
}

// Legal Compliance Enums

enum LegalAgreementType {
  TERMS_OF_SERVICE
  PRIVACY_POLICY
  COOKIE_POLICY
  DATA_PROCESSING_AGREEMENT
  PARENTAL_CONSENT
}

// Identity & Phone Verification Enums

enum VerificationStatus {
  PENDING
  VERIFIED
  FAILED
  EXPIRED
  CANCELLED
}

enum IdentityVerificationType {
  GOVERNMENT_ID
  PASSPORT
  DRIVERS_LICENSE
  UTILITY_BILL
  BANK_STATEMENT
}

enum DocumentType {
  DRIVERS_LICENSE
  PASSPORT
  NATIONAL_ID
  UTILITY_BILL
  BANK_STATEMENT
  OTHER
}

enum TwoFactorMethod {
  SMS
  TOTP
  EMAIL
  BACKUP_CODE
  BIOMETRIC
}

enum VerificationLevel {
  UNVERIFIED
  EMAIL_VERIFIED
  PHONE_VERIFIED
  IDENTITY_VERIFIED
  FULLY_VERIFIED
}

enum VerificationAction {
  EMAIL_VERIFICATION_SENT
  EMAIL_VERIFIED
  PHONE_VERIFICATION_SENT
  PHONE_VERIFIED
  IDENTITY_DOCUMENT_UPLOADED
  IDENTITY_VERIFIED
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  VERIFICATION_LEVEL_CHANGED
}

// Payment and Subscription Enums

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  FAMILY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
  UNPAID
  TRIALING
}

enum IndividualPurchaseType {
  PHOTO
  VIDEO_MONTAGE
}

enum PhotoVideoPackType {
  PACK_1    // 5 photos + 3 montages = $9.99
  PACK_2    // 10 photos + 5 montages = $19.99
  PACK_3    // 20 photos + 10 montages = $29.99
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  BANK_ACCOUNT
  DIGITAL_WALLET
  CRYPTOCURRENCY
}

enum TransactionType {
  SUBSCRIPTION
  ONE_TIME_PURCHASE
  REFUND
  ADJUSTMENT
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum SubscriptionAction {
  CREATED
  ACTIVATED
  CANCELLED
  RENEWED
  UPGRADED
  DOWNGRADED
  PAUSED
  RESUMED
}

enum UsageFeature {
  API_REQUESTS
  STORAGE_GB
  FACE_RECOGNITION_CALLS
  ALERT_NOTIFICATIONS
  REPORT_GENERATIONS
  USER_ACCOUNTS
}

enum BillingEventType {
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_UPDATED
  PAYMENT_SUCCEEDED
  PAYMENT_FAILED
  INVOICE_CREATED
  INVOICE_PAID
  REFUND_CREATED
}

// Discount Code Enums

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  BUY_ONE_GET_ONE
  FREE_TRIAL_EXTENSION
}

enum DiscountCodeStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  PAUSED
}

enum DiscountCategory {
  WELCOME
  LOYALTY
  SEASONAL
  FLASH_SALE
  STUDENT
  REFERRAL
  BULK
  PROMOTIONAL
}

enum DiscountApplication {
  AUTOMATIC
  USER_INPUT
  ADMIN_APPLIED
}

// Payment and Revenue Sharing Enums

enum PayoutSchedule {
  DAILY
  WEEKLY
  MONTHLY
  MANUAL
}

enum RevenueTransactionType {
  PHOTO_SALE
  VIDEO_SALE
  MEMBERSHIP_FEE
  EVENT_BOOKING
  MERCHANDISE
  OTHER
}

enum RevenueStatus {
  PENDING
  PROCESSED
  FAILED
  CANCELLED
}

enum PayoutStatus {
  PENDING
  IN_TRANSIT
  PAID
  FAILED
  CANCELLED
}

// Email Automation Enums

enum EmailFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
  MONTHLY
  NEVER
}

enum EmailStatus {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  UNSUBSCRIBED
  FAILED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}

enum EmailTrigger {
  USER_REGISTRATION
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_CANCELLED
  PAYMENT_FAILED
  INACTIVITY
  BIRTHDAY
  CUSTOM_EVENT
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

// Support Center Enums

enum SupportCategory {
  TECHNICAL_ISSUE
  BILLING_QUESTION
  ACCOUNT_HELP
  FEATURE_REQUEST
  BUG_REPORT
  GENERAL_INQUIRY
}

enum SupportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SupportTicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_CUSTOMER
  RESOLVED
  CLOSED
}

enum ChatSessionStatus {
  ACTIVE
  ENDED
  TRANSFERRED
}

// Family Member Management Enums

enum FamilyRelationship {
  SPOUSE
  PARENT
  CHILD
  SIBLING
  GRANDPARENT
  GRANDCHILD
  AUNT_UNCLE
  COUSIN
  GUARDIAN
  CAREGIVER
  OTHER
  CUSTOM
  FRIEND
  NANNY
  BABYSITTER
  TEACHER
  EMERGENCY_CONTACT
  RELATIVE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
  REVOKED
  WAITING
  UNDER_REVIEW
}

enum FamilyMemberStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  REMOVED
}

enum FamilyPermissionType {
  VIEW_CHILD_INFO
  RECEIVE_ALERTS
  PICKUP_AUTHORIZATION
  EMERGENCY_CONTACT
  PHOTO_ACCESS
  LOCATION_TRACKING
  FULL_ACCESS
  CHECK_IN_OUT
  PURCHASE_MEDIA
  VIEW_REPORTS
  MANAGE_FAMILY
  MAKE_PAYMENTS
  VIEW_CHILD
  EDIT_CHILD
  TRACK_LOCATION
  VIEW_MEDIA
  DOWNLOAD_MEDIA
  AUTHORIZE_PICKUP
  EMERGENCY_ACCESS
  CUSTOM_PERMISSION
}

enum PermissionResourceType {
  CHILD
  VENUE
  PHOTO
  ALERT
  LOCATION
  ALL
  VIDEO
  FAMILY
  EMERGENCY_CONTACT
  REPORT
  PAYMENT
}

enum ChildAccessLevel {
  VIEW_ONLY
  LIMITED_ACCESS
  FULL_ACCESS
  EMERGENCY_ONLY
  BASIC
  CUSTOM
  BLOCKED
  RESTRICTED
  FULL
}

enum EmailTemplateType {
  CUSTOM
  SYSTEM
  ONBOARDING
  NOTIFICATION
  MARKETING
  TRANSACTIONAL
  NEWSLETTER
}

enum EmailCategory {
  GENERAL
  WELCOME
  VERIFICATION
  ALERTS
  REPORTS
  PROMOTIONS
  SUPPORT
}

enum EmergencyContactType {
  PRIMARY
  SECONDARY
  MEDICAL
  GUARDIAN
  FAMILY
  FRIEND
  OTHER
}
