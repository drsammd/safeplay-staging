generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/safeplay-app/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  name              String
  role              UserRole
  phone             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts          Account[]
  children          Child[]   @relation("ParentChildren")
  purchasedMemories Memory[]  @relation("MemoryPurchaser")
  sessions          Session[]
  managedVenues     Venue[]   @relation("VenueAdmin")
  uploadedFloorPlans FloorPlan[] @relation("FloorPlanUploader")
  
  // Enhanced Alert System Relations
  alertAcknowledgments    AlertAcknowledgment[]    @relation("UserAlertAcknowledgments")
  alertTimelineEntries    AlertTimelineEntry[]     @relation("UserAlertTimelineEntries")
  alertNotifications      AlertNotification[]      @relation("UserAlertNotifications")
  emergencyContacts       EmergencyContact[]       @relation("UserEmergencyContacts")
  notificationPreferences NotificationPreference[] @relation("UserNotificationPreferences")
  
  // Mobile Dashboard Relations
  mobileDevices           MobileDevice[]           @relation("UserMobileDevices")
  photoNotifications      PhotoNotification[]      @relation("UserPhotoNotifications")
  checkInOutEvents        CheckInOutEvent[]        @relation("UserCheckInOutEvents")
  mobileNotifications     MobileNotification[]     @relation("UserMobileNotifications")
  offlineDataCache        OfflineDataCache[]       @relation("UserOfflineDataCache")
  parentSessions          ParentSession[]          @relation("UserParentSessions")
  
  // Safety Analytics Relations
  analyticsEvents         AnalyticsEvent[]         @relation("UserAnalyticsEvents")
  generatedReports        SafetyReport[]           @relation("UserGeneratedReports")
  reportedIncidents       IncidentReport[]         @relation("UserReportedIncidents")
  assignedIncidents       IncidentReport[]         @relation("UserAssignedIncidents")
  engagementMetrics       ParentEngagement[]       @relation("UserEngagementMetrics")
  createdSchedules        ReportSchedule[]         @relation("UserCreatedSchedules")
  appliedConfigs          AnalyticsConfig[]        @relation("UserAppliedConfigs")

  // Digital Check-in/Check-out Relations
  parentQRCodes           ParentQRCode[]           @relation("ParentQRCodes")
  parentMemberships       Membership[]             @relation("ParentMemberships") 
  parentPickupAuth        PickupAuthorization[]    @relation("ParentPickupAuth")

  // Messaging and Communication Relations
  uploadedMedia             SharedMedia[]            @relation("UserUploadedMedia")
  mediaPermissions          MediaPermission[]        @relation("ParentMediaPermissions")
  mediaPurchases            MediaPurchase[]          @relation("UserMediaPurchases")
  connectionRequests        ParentConnection[]       @relation("ParentConnectionRequester")
  connectionReceived        ParentConnection[]       @relation("ParentConnectionReceiver")
  organizedActivities       SharedActivity[]         @relation("UserOrganizedActivities")
  chatParticipants          ChatParticipant[]        @relation("UserChatParticipants")
  sentMessages              Message[]                @relation("UserSentMessages")
  messageDeliveries         MessageDelivery[]        @relation("UserMessageDeliveries")
  navigationRequests        NavigationRequest[]      @relation("ParentNavigationRequests")
  adminGroups               CommunityGroup[]         @relation("UserAdminGroups")
  communityMemberships      CommunityMember[]        @relation("UserCommunityMemberships")
  organizedEvents           CommunityEvent[]         @relation("UserOrganizedEvents")
  eventParticipations       EventParticipant[]       @relation("UserEventParticipations")
  mediaReports              MediaReport[]            @relation("UserMediaReports")
  assignedReports           MediaReport[]            @relation("UserAssignedReports")
  contentModerations        ContentModeration[]      @relation("UserContentModerations")
  communicationNotifications CommunicationNotification[] @relation("UserCommunicationNotifications")
  privacySettings           PrivacySettings?         @relation("UserPrivacySettings")
  
  // Legal Compliance Relations
  legalAgreements           LegalAgreement[]         @relation("UserLegalAgreements")

  // Payment and Subscription Relations
  subscription              UserSubscription?        @relation("UserSubscription")
  paymentMethods            UserPaymentMethod[]      @relation("UserPaymentMethods")
  paymentTransactions       PaymentTransaction[]     @relation("UserPaymentTransactions")
  subscriptionHistory       SubscriptionHistory[]    @relation("UserSubscriptionHistory")
  usageRecords              UsageRecord[]            @relation("UserUsageRecords")
  billingEvents             BillingEvent[]           @relation("UserBillingEvents")
  
  // Discount Code Relations
  discountCodeUsages        DiscountCodeUsage[]      @relation("UserDiscountUsages")

  @@map("users")
}

model Venue {
  id                String                 @id @default(cuid())
  name              String
  address           String
  city              String
  state             String
  zipCode           String
  phone             String
  email             String
  operatingHours    Json
  capacity          Int
  ageGroups         String[]
  cameraConfig      Json
  alertSettings     Json
  adminId           String
  active            Boolean                @default(true)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  alerts            Alert[]
  children          Child[]
  recognitionEvents FaceRecognitionEvent[]
  memories          Memory[]
  trackingEvents    TrackingEvent[]
  analytics         VenueAnalytics[]
  admin             User                   @relation("VenueAdmin", fields: [adminId], references: [id])
  floorPlans        FloorPlan[]
  cameras           Camera[]
  cameraEvents      CameraEvent[]
  cameraRecommendations CameraRecommendation[]
  
  // Enhanced Alert System Relations
  alertRules              AlertRule[]              @relation("VenueAlertRules")
  enhancedAlerts          EnhancedAlert[]          @relation("VenueEnhancedAlerts")
  emergencyContacts       EmergencyContact[]       @relation("VenueEmergencyContacts")
  unauthorizedDetections  UnauthorizedDetection[]  @relation("VenueUnauthorizedDetections")
  childSightings          ChildSighting[]
  
  // Mobile Dashboard Relations
  photoNotifications      PhotoNotification[]
  childLocationHistory    ChildLocationHistory[]
  checkInOutEvents        CheckInOutEvent[]
  venueQRCodes            VenueQRCode[]
  
  // Safety Analytics Relations
  analyticsEvents         AnalyticsEvent[]         @relation("VenueAnalyticsEvents")
  safetyReports           SafetyReport[]           @relation("VenueSafetyReports")
  incidentReports         IncidentReport[]         @relation("VenueIncidentReports")
  cameraPerformance       CameraPerformance[]      @relation("VenueCameraPerformance")
  parentEngagement        ParentEngagement[]       @relation("VenueParentEngagement")
  trafficPatterns         TrafficPattern[]         @relation("VenueTrafficPatterns")
  performanceMetrics      PerformanceMetric[]      @relation("VenuePerformanceMetrics")
  reportSchedules         ReportSchedule[]         @relation("VenueReportSchedules")
  analyticsConfigs        AnalyticsConfig[]        @relation("VenueAnalyticsConfigs")

  // Digital Check-in/Check-out Relations
  membershipPackages      MembershipPackage[]      @relation("VenueMembershipPackages")
  memberships             Membership[]             @relation("VenueMemberships")
  posTransactions         POSTransaction[]         @relation("VenuePOSTransactions") 
  kiosks                  CheckInKiosk[]           @relation("VenueKiosks")
  workflows               WorkflowAutomation[]     @relation("VenueWorkflows")
  complianceReports       ComplianceReport[]       @relation("VenueComplianceReports")

  // Enhanced AI Features Relations
  aiAnalysisSessions      AIAnalysisSession[]      @relation("VenueAIAnalysisSessions")
  ageAnalyses             AgeEstimationAnalysis[]  @relation("VenueAgeAnalyses")
  emotionAnalyses         EmotionDetectionAnalysis[] @relation("VenueEmotionAnalyses")
  crowdAnalyses           CrowdDensityAnalysis[]   @relation("VenueCrowdAnalyses")
  behaviorAnalyses        BehaviorPatternAnalysis[] @relation("VenueBehaviorAnalyses")
  voiceAnalyses           VoicePatternAnalysis[]   @relation("VenueVoiceAnalyses")
  visualAnalyses          VisualPatternAnalysis[]  @relation("VenueVisualAnalyses")
  aiInsights              AIInsight[]              @relation("VenueAIInsights")
  aiSafetyScores          AISafetyScore[]          @relation("VenueAISafetyScores")
  aiModelPerformance      AIModelPerformance[]     @relation("VenueAIModelPerformance")

  // Messaging and Communication Relations
  sharedMedia             SharedMedia[]            @relation("VenueSharedMedia")
  sharedActivities        SharedActivity[]         @relation("VenueSharedActivities")
  chats                   Chat[]                   @relation("VenueChats")
  navigationRequests      NavigationRequest[]      @relation("VenueNavigationRequests")
  communityGroups         CommunityGroup[]         @relation("VenueCommunityGroups")
  communityEvents         CommunityEvent[]         @relation("VenueCommunityEvents")

  // Payment and Revenue Sharing Relations
  paymentSettings         VenuePaymentSettings?    @relation("VenuePaymentSettings")
  revenueTransactions     RevenueTransaction[]     @relation("VenueRevenueTransactions")
  payoutHistory           PayoutHistory[]          @relation("VenuePayoutHistory")
  discountUsages          DiscountCodeUsage[]      @relation("VenueDiscountUsages")

  @@map("venues")
}

model Child {
  id                     String                 @id @default(cuid())
  firstName              String
  lastName               String
  dateOfBirth            DateTime
  profilePhoto           String?
  biometricId            String?
  status                 ChildStatus            @default(ACTIVE)
  parentId               String
  currentVenueId         String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  faceRecognitionConsent Boolean                @default(false)
  faceRecognitionEnabled Boolean                @default(false)
  recognitionThreshold   Float                  @default(0.95)
  alerts                 Alert[]
  currentVenue           Venue?                 @relation(fields: [currentVenueId], references: [id])
  parent                 User                   @relation("ParentChildren", fields: [parentId], references: [id])
  faceCollection         FaceCollection?
  recognitionEvents      FaceRecognitionEvent[]
  memories               Memory[]
  trackingEvents         TrackingEvent[]
  
  // Enhanced Alert System Relations
  childSightings         ChildSighting[]
  enhancedAlerts         EnhancedAlert[]
  emergencyContacts      EmergencyContact[]
  
  // Mobile Dashboard Relations
  photoNotifications     PhotoNotification[]
  childLocationHistory   ChildLocationHistory[]
  checkInOutEvents       CheckInOutEvent[]
  mobileNotifications    MobileNotification[]
  
  // Safety Analytics Relations
  analyticsEvents        AnalyticsEvent[]        @relation("ChildAnalyticsEvents")
  incidentReports        IncidentReport[]        @relation("ChildIncidentReports")

  // Digital Check-in/Check-out Relations
  childQRCodes           ChildQRCode[]
  pickupAuthorizations   PickupAuthorization[]

  // Enhanced AI Features Relations
  ageAnalyses            AgeEstimationAnalysis[]  @relation("ChildAgeAnalyses")
  emotionAnalyses        EmotionDetectionAnalysis[] @relation("ChildEmotionAnalyses")
  behaviorAnalyses       BehaviorPatternAnalysis[] @relation("ChildBehaviorAnalyses")
  voiceAnalyses          VoicePatternAnalysis[]   @relation("ChildVoiceAnalyses")
  visualAnalyses         VisualPatternAnalysis[]  @relation("ChildVisualAnalyses")
  aiInsights             AIInsight[]              @relation("ChildAIInsights")

  // Messaging and Communication Relations
  mediaPermissions       MediaPermission[]        @relation("ChildMediaPermissions")
  friendships1           ChildFriendship[]        @relation("ChildFriendships1")
  friendships2           ChildFriendship[]        @relation("ChildFriendships2")
  navigationRequests     NavigationRequest[]      @relation("ChildNavigationRequests")

  @@map("children")
}

model TrackingEvent {
  id         String            @id @default(cuid())
  type       TrackingEventType
  timestamp  DateTime          @default(now())
  location   Json?
  confidence Float?
  cameraId   String?
  metadata   Json?
  childId    String
  venueId    String
  child      Child             @relation(fields: [childId], references: [id])
  venue      Venue             @relation(fields: [venueId], references: [id])

  @@map("tracking_events")
}

model Memory {
  id                String                 @id @default(cuid())
  type              MemoryType
  fileName          String
  fileUrl           String
  originalUrl       String?
  thumbnailUrl      String?
  capturedAt        DateTime
  price             Float
  status            MemoryStatus           @default(AVAILABLE)
  childId           String
  venueId           String
  purchaserId       String?
  purchasedAt       DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  recognitionEvents FaceRecognitionEvent[]
  child             Child                  @relation(fields: [childId], references: [id])
  purchaser         User?                  @relation("MemoryPurchaser", fields: [purchaserId], references: [id])
  venue             Venue                  @relation(fields: [venueId], references: [id])

  @@map("memories")
}

model Alert {
  id          String      @id @default(cuid())
  type        AlertType
  title       String
  description String
  severity    Int
  status      AlertStatus @default(ACTIVE)
  childId     String?
  venueId     String
  resolvedAt  DateTime?
  resolvedBy  String?
  resolution  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  child       Child?      @relation(fields: [childId], references: [id])
  venue       Venue       @relation(fields: [venueId], references: [id])

  @@map("alerts")
}

model VenueAnalytics {
  id              String   @id @default(cuid())
  date            DateTime
  totalCheckIns   Int      @default(0)
  totalCheckOuts  Int      @default(0)
  peakOccupancy   Int      @default(0)
  averageStayTime Int      @default(0)
  memoryRevenue   Float    @default(0)
  photosSold      Int      @default(0)
  videosSold      Int      @default(0)
  alertsGenerated Int      @default(0)
  emergencyAlerts Int      @default(0)
  avgResponseTime Int      @default(0)
  venueId         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  venue           Venue    @relation(fields: [venueId], references: [id])

  @@unique([venueId, date])
  @@map("venue_analytics")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ContactMessage {
  id        String               @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    ContactMessageStatus @default(NEW)
  formType  ContactFormType      @default(CONTACT)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@map("contact_messages")
}

model FaceCollection {
  id              String                @id @default(cuid())
  awsCollectionId String                @unique
  collectionName  String
  status          FaceRecognitionStatus @default(PENDING)
  childId         String                @unique
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  child           Child                 @relation(fields: [childId], references: [id], onDelete: Cascade)
  faceRecords     FaceRecord[]

  @@map("face_collections")
}

model FaceRecord {
  id                String                @id @default(cuid())
  awsFaceId         String                @unique
  imageUrl          String
  imageKey          String
  boundingBox       Json?
  confidence        Float?
  landmarks         Json?
  emotions          Json?
  ageRange          Json?
  quality           Json?
  status            FaceRecognitionStatus @default(PENDING)
  registrationNotes String?
  collectionId      String
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  collection        FaceCollection        @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@map("face_records")
}

model FaceRecognitionEvent {
  id              String               @id @default(cuid())
  eventType       RecognitionEventType
  confidence      Float
  matchedFaceId   String?
  sourceImageUrl  String
  sourceImageKey  String
  boundingBox     Json?
  recognitionData Json?
  processingTime  Int?
  childId         String
  venueId         String?
  memoryId        String?
  createdAt       DateTime             @default(now())
  child           Child                @relation(fields: [childId], references: [id])
  memory          Memory?              @relation(fields: [memoryId], references: [id])
  venue           Venue?               @relation(fields: [venueId], references: [id])
  
  // Enhanced Alert System Relations
  childSightings  ChildSighting[]

  @@map("face_recognition_events")
}

// Advanced Zone Management Models

model ZoneConfiguration {
  id                    String                 @id @default(cuid())
  zoneId                String                 @unique
  maxCapacity           Int                    @default(0)
  minStaffRequired      Int                    @default(0)
  maxAge                Int?                   // Maximum age allowed in zone
  minAge                Int?                   // Minimum age allowed in zone
  requiresAdultSupervision Boolean             @default(false)
  isRestrictedAccess    Boolean                @default(false)
  accessPermissions     ZoneAccessPermission[] // Who can access this zone
  operatingHours        Json?                  // Operating hours for zone {"start": "09:00", "end": "17:00"}
  isMaintenanceMode     Boolean                @default(false)
  isEmergencyExit       Boolean                @default(false)
  priorityLevel         ZonePriority           @default(NORMAL)
  safetyLevel           SafetyLevel            @default(STANDARD)
  hazardLevel           HazardLevel            @default(NONE)
  evacuationPriority    Int                    @default(1) // 1 = highest priority
  allowedActivities     String[]               // List of allowed activities
  prohibitedItems       String[]               // List of prohibited items
  requiredEquipment     String[]               // Required safety equipment
  alertThresholds       Json                   // Alert thresholds for capacity, time, etc.
  environmentSettings   Json?                  // Temperature, lighting, sound levels
  complianceRequirements Json?                 // Regulatory compliance requirements
  metadata              Json?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  zone                  FloorPlanZone          @relation("ZoneConfigurationZone", fields: [zoneId], references: [id], onDelete: Cascade)
  
  @@map("zone_configurations")
}

model ZoneAccessRule {
  id                String             @id @default(cuid())
  zoneId            String
  ruleType          ZoneAccessRuleType
  userRole          UserRole?          // Which user role this rule applies to
  ageRange          Json?              // {"min": 5, "max": 12} - age range restriction
  timeRestrictions  Json?              // Time-based access restrictions
  membershipRequired Boolean           @default(false)
  staffEscortRequired Boolean          @default(false)
  maxOccupancyTime  Int?               // Maximum time allowed in zone (minutes)
  requiresPermission Boolean           @default(false)
  permissionGrantedBy String?          // User ID who can grant permission
  priority          Int                @default(1)
  isActive          Boolean            @default(true)
  conditions        Json?              // Additional conditions for access
  exceptions        Json?              // Exceptions to the rule
  violationAction   ViolationAction    @default(ALERT)
  metadata          Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  zone              FloorPlanZone      @relation("ZoneAccessRules", fields: [zoneId], references: [id], onDelete: Cascade)
  
  @@map("zone_access_rules")
}

model ZoneCapacityRecord {
  id                String           @id @default(cuid())
  zoneId            String
  currentOccupancy  Int              @default(0)
  maxCapacity       Int
  utilizationRate   Float            @default(0.0) // Current occupancy / max capacity
  averageStayTime   Int?             // Average time spent in zone (minutes)
  peakOccupancy     Int              @default(0)
  peakTime          DateTime?
  queueLength       Int              @default(0) // Number waiting to enter
  entryRate         Float            @default(0.0) // Entries per hour
  exitRate          Float            @default(0.0) // Exits per hour
  capacityStatus    CapacityStatus   @default(NORMAL)
  lastUpdated       DateTime         @default(now())
  recordDate        DateTime         @default(now())
  zone              FloorPlanZone    @relation("ZoneCapacityRecords", fields: [zoneId], references: [id], onDelete: Cascade)
  
  @@unique([zoneId, recordDate])
  @@index([zoneId, recordDate])
  @@map("zone_capacity_records")
}

model ZoneOccupancyHistory {
  id                String           @id @default(cuid())
  zoneId            String
  occupancyCount    Int
  timestamp         DateTime         @default(now())
  eventType         OccupancyEventType
  childId           String?          // If related to specific child entry/exit
  duration          Int?             // Time spent in zone for exit events
  entryMethod       String?          // How child entered (camera detection, manual, etc.)
  confidence        Float?           // Confidence level of detection
  metadata          Json?
  zone              FloorPlanZone    @relation("ZoneOccupancyHistory", fields: [zoneId], references: [id], onDelete: Cascade)
  
  @@index([zoneId, timestamp])
  @@index([childId, timestamp])
  @@map("zone_occupancy_history")
}

model ZoneAccessLog {
  id                String           @id @default(cuid())
  zoneId            String
  childId           String?
  userId            String?          // Staff member if manual entry
  accessType        ZoneAccessType
  accessMethod      AccessMethod     @default(AUTOMATIC)
  accessResult      AccessResult     @default(GRANTED)
  denialReason      String?          // Reason for access denial
  duration          Int?             // Time spent in zone (minutes)
  entryTime         DateTime
  exitTime          DateTime?
  isAuthorized      Boolean          @default(true)
  authorizedBy      String?          // Staff member who authorized access
  ruleViolations    String[]         // List of violated rules
  alertTriggered    Boolean          @default(false)
  alertId           String?          // Associated alert ID
  ipAddress         String?          // For kiosk/digital access
  deviceId          String?          // Device used for access
  biometricUsed     Boolean          @default(false)
  qrCodeUsed        String?          // QR code used for access
  cameraDetection   Boolean          @default(false)
  confidence        Float?           // Detection confidence
  metadata          Json?
  zone              FloorPlanZone    @relation("ZoneAccessLogs", fields: [zoneId], references: [id], onDelete: Cascade)
  
  @@index([zoneId, entryTime])
  @@index([childId, entryTime])
  @@index([accessResult, entryTime])
  @@map("zone_access_logs")
}

model EvacuationRoute {
  id                String           @id @default(cuid())
  name              String
  fromZoneId        String
  toZoneId          String           // Usually an emergency exit zone
  routePath         Json             // Array of coordinates defining the path
  distance          Float            // Distance in meters
  estimatedTime     Int              // Estimated evacuation time in seconds
  maxCapacity       Int              // Maximum people this route can handle
  currentLoad       Int              @default(0)
  isActive          Boolean          @default(true)
  isPrimary         Boolean          @default(false) // Primary evacuation route
  isAccessible      Boolean          @default(true) // Wheelchair accessible
  hazardLevel       HazardLevel      @default(NONE)
  lighting          Boolean          @default(true) // Adequate lighting
  signage           Boolean          @default(true) // Proper emergency signage
  obstacleStatus    ObstacleStatus   @default(CLEAR)
  lastInspection    DateTime?
  inspectedBy       String?
  maintenanceNotes  String?
  emergencyContacts Json?            // Emergency contacts for this route
  alternativeRoutes String[]         // IDs of alternative routes
  weatherDependency Boolean          @default(false) // Route affected by weather
  specialRequirements Json?          // Special equipment or procedures needed
  metadata          Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  fromZone          FloorPlanZone    @relation("EvacuationFromZone", fields: [fromZoneId], references: [id], onDelete: Cascade)
  toZone            FloorPlanZone    @relation("EvacuationToZone", fields: [toZoneId], references: [id], onDelete: Cascade)
  routeAssignments  RouteAssignment[]
  
  @@index([fromZoneId, isActive])
  @@index([isPrimary, isActive])
  @@map("evacuation_routes")
}

model RouteAssignment {
  id                String           @id @default(cuid())
  routeId           String
  childId           String?          // Assigned child for evacuation
  staffId           String?          // Assigned staff member
  priority          Int              @default(1) // 1 = highest priority
  estimatedTime     Int              // Estimated time for this assignment
  actualTime        Int?             // Actual evacuation time
  status            EvacuationStatus @default(PENDING)
  assignedAt        DateTime         @default(now())
  startedAt         DateTime?
  completedAt       DateTime?
  location          Json?            // Current location during evacuation
  assistanceNeeded  Boolean          @default(false)
  specialNeeds      String?          // Special assistance requirements
  contactAttempts   Int              @default(0)
  lastContact       DateTime?
  metadata          Json?
  route             EvacuationRoute  @relation(fields: [routeId], references: [id], onDelete: Cascade)
  
  @@index([routeId, status])
  @@index([priority, status])
  @@map("route_assignments")
}

model ZoneNotification {
  id                String                    @id @default(cuid())
  zoneId            String
  notificationType  ZoneNotificationType
  title             String
  message           String
  priority          NotificationPriority      @default(NORMAL)
  targetAudience    NotificationAudience[]    // Who should receive this notification
  deliveryChannels  NotificationChannel[]     // How to deliver the notification
  isScheduled       Boolean                   @default(false)
  scheduledAt       DateTime?
  isRecurring       Boolean                   @default(false)
  recurrencePattern Json?                     // Cron-like pattern for recurring notifications
  expiresAt         DateTime?
  isActive          Boolean                   @default(true)
  conditions        Json?                     // Conditions that trigger the notification
  customData        Json?                     // Custom data for the notification
  deliveryCount     Int                       @default(0)
  lastDelivered     DateTime?
  successfulDeliveries Int                    @default(0)
  failedDeliveries  Int                       @default(0)
  metadata          Json?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  zone              FloorPlanZone             @relation("ZoneNotifications", fields: [zoneId], references: [id], onDelete: Cascade)
  deliveryLogs      NotificationDeliveryLog[]
  
  @@index([zoneId, isActive])
  @@index([notificationType, isActive])
  @@map("zone_notifications")
}

model NotificationDeliveryLog {
  id                String                    @id @default(cuid())
  notificationId    String
  recipientId       String                    // User ID or device ID
  recipientType     NotificationRecipientType
  channel           NotificationChannel
  status            NotificationStatus
  deliveredAt       DateTime?
  readAt            DateTime?
  failureReason     String?
  retryCount        Int                       @default(0)
  responseData      Json?                     // Response from delivery service
  metadata          Json?
  notification      ZoneNotification          @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  
  @@index([notificationId, status])
  @@index([recipientId, status])
  @@map("notification_delivery_logs")
}

model ZoneViolation {
  id                String              @id @default(cuid())
  zoneId            String
  violationType     ZoneViolationType
  severity          ViolationSeverity   @default(MEDIUM)
  description       String
  violatorId        String?             // Child or user who violated
  violatorType      ViolatorType        @default(CHILD)
  detectionMethod   DetectionMethod     @default(CAMERA)
  confidence        Float?              // Detection confidence
  ruleViolated      String              // Which rule was violated
  actionTaken       ViolationAction     @default(ALERT)
  staffNotified     Boolean             @default(false)
  parentNotified    Boolean             @default(false)
  incidentCreated   Boolean             @default(false)
  incidentId        String?
  resolutionTime    Int?                // Time to resolve in minutes
  isResolved        Boolean             @default(false)
  resolvedAt        DateTime?
  resolvedBy        String?
  resolutionNotes   String?
  preventiveMeasures String?
  imageUrls         String[]            // Associated evidence images
  videoUrls         String[]            // Associated evidence videos
  location          Json?               // Specific location of violation
  timestamp         DateTime            @default(now())
  metadata          Json?
  zone              FloorPlanZone       @relation("ZoneViolations", fields: [zoneId], references: [id], onDelete: Cascade)
  
  @@index([zoneId, timestamp])
  @@index([violationType, severity])
  @@index([isResolved, timestamp])
  @@map("zone_violations")
}

model ZoneAnalytics {
  id                    String           @id @default(cuid())
  zoneId                String
  date                  DateTime
  totalEntries          Int              @default(0)
  totalExits            Int              @default(0)
  peakOccupancy         Int              @default(0)
  averageOccupancy      Float            @default(0.0)
  utilizationRate       Float            @default(0.0) // Percentage of capacity used
  averageStayTime       Int              @default(0) // In minutes
  longestStayTime       Int              @default(0) // In minutes
  shortestStayTime      Int              @default(0) // In minutes
  totalViolations       Int              @default(0)
  alertsGenerated       Int              @default(0)
  emergencyActivations  Int              @default(0)
  maintenanceEvents     Int              @default(0)
  popularTimeSlots      Json?            // Most popular hours
  ageGroupAnalysis      Json?            // Usage by age groups
  activityAnalysis      Json?            // Most popular activities
  safetyScore           Float?           // Overall safety score for the day
  efficiencyScore       Float?           // Operational efficiency score
  customerSatisfaction  Float?           // Customer satisfaction rating
  revenueGenerated      Float            @default(0.0)
  costPerVisitor        Float            @default(0.0)
  energyConsumption     Float?           // Energy usage for the zone
  weatherImpact         Json?            // Weather impact analysis
  staffingLevels        Json?            // Staff coverage analysis
  complianceScore       Float?           // Regulatory compliance score
  incidentRate          Float            @default(0.0)
  responseTimeAverage   Int              @default(0) // Average response time in seconds
  parentFeedbackScore   Float?           // Parent feedback for the zone
  recommendations       String[]         // AI-generated recommendations
  trends                Json?            // Trend analysis data
  comparisons           Json?            // Comparison with other zones/periods
  metadata              Json?
  createdAt             DateTime         @default(now())
  zone                  FloorPlanZone    @relation("ZoneAnalytics", fields: [zoneId], references: [id], onDelete: Cascade)
  
  @@unique([zoneId, date])
  @@index([zoneId, date])
  @@index([utilizationRate, date])
  @@map("zone_analytics")
}

model EmergencyProcedure {
  id                String              @id @default(cuid())
  zoneId            String
  procedureType     EmergencyType
  name              String
  description       String
  stepByStepGuide   Json                // Detailed procedure steps
  estimatedDuration Int                 // Expected duration in minutes
  requiredPersonnel Int                 // Number of staff required
  requiredEquipment String[]            // Required emergency equipment
  priorityLevel     EmergencyPriority   @default(MEDIUM)
  contactProcedure  Json                // Emergency contact procedures
  evacuationInstructions Json?          // Specific evacuation instructions
  communicationProtocol Json?           // Communication protocols
  postEmergencySteps Json?              // Post-emergency procedures
  trainingRequired  Boolean             @default(true)
  certificationRequired Boolean         @default(false)
  lastReviewed      DateTime?
  reviewedBy        String?
  nextReviewDate    DateTime?
  isActive          Boolean             @default(true)
  version           Int                 @default(1)
  parentProcedureId String?             // Parent procedure if this is a sub-procedure
  relatedProcedures String[]            // Related procedure IDs
  complianceRequirements Json?          // Regulatory compliance requirements
  successCriteria   Json?               // Success criteria for the procedure
  failureProtocol   Json?               // What to do if procedure fails
  documentation     String[]            // Links to related documents
  videoGuides       String[]            // Links to training videos
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  zone              FloorPlanZone       @relation("ZoneEmergencyProcedures", fields: [zoneId], references: [id], onDelete: Cascade)
  
  @@index([zoneId, procedureType])
  @@index([priorityLevel, isActive])
  @@map("emergency_procedures")
}

enum UserRole {
  COMPANY_ADMIN
  VENUE_ADMIN
  PARENT
}

enum ChildStatus {
  ACTIVE
  INACTIVE
  CHECKED_IN
  CHECKED_OUT
}

enum TrackingEventType {
  CHECK_IN
  CHECK_OUT
  MOVEMENT
  ALERT
  EMERGENCY
}

enum MemoryType {
  PHOTO
  VIDEO
}

enum MemoryStatus {
  AVAILABLE
  PURCHASED
  PROCESSING
}

enum AlertType {
  SAFETY
  EXIT
  UNAUTHORIZED_ACCESS
  EMERGENCY
}

enum AlertStatus {
  ACTIVE
  RESOLVED
  DISMISSED
}

enum ContactMessageStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ContactFormType {
  CONTACT
  SUPPORT
  SALES
  GENERAL
}

enum FaceRecognitionStatus {
  PENDING
  ACTIVE
  INACTIVE
  FAILED
}

enum RecognitionEventType {
  FACE_DETECTED
  FACE_MATCHED
  FACE_UNMATCHED
  MULTIPLE_FACES
}

model FloorPlan {
  id              String             @id @default(cuid())
  name            String
  description     String?
  fileUrl         String
  fileType        FloorPlanFileType
  originalFileName String
  fileSize        Int
  dimensions      Json?              // width, height, scale
  metadata        Json?              // CAD file metadata, layers, etc.
  version         Int                @default(1)
  isActive        Boolean            @default(true)
  venueId         String
  uploadedBy      String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  venue           Venue              @relation(fields: [venueId], references: [id], onDelete: Cascade)
  uploader        User               @relation("FloorPlanUploader", fields: [uploadedBy], references: [id])
  cameras         Camera[]
  zones           FloorPlanZone[]
  
  @@map("floor_plans")
}

model FloorPlanZone {
  id          String           @id @default(cuid())
  name        String
  type        FloorPlanZoneType
  coordinates Json             // polygon coordinates defining the zone
  color       String           @default("#3B82F6")
  description String?
  metadata    Json?
  floorPlanId String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  floorPlan   FloorPlan        @relation(fields: [floorPlanId], references: [id], onDelete: Cascade)
  cameras     Camera[]         @relation("ZoneCameras")
  
  // Enhanced Alert System Relations
  childSightings         ChildSighting[]
  enhancedAlerts         EnhancedAlert[]
  unauthorizedDetections UnauthorizedDetection[]
  
  // Mobile Dashboard Relations
  locationHistory        ChildLocationHistory[]   @relation("LocationHistoryZone")
  
  // Safety Analytics Relations
  analyticsEvents        AnalyticsEvent[]         @relation("ZoneAnalyticsEvents")
  trafficPatterns        TrafficPattern[]         @relation("ZoneTrafficPatterns")
  incidentReports        IncidentReport[]         @relation("ZoneIncidentReports")
  
  // Advanced Zone Management Relations
  zoneConfig             ZoneConfiguration?       @relation("ZoneConfigurationZone")
  accessRules            ZoneAccessRule[]         @relation("ZoneAccessRules")
  capacityRecords        ZoneCapacityRecord[]     @relation("ZoneCapacityRecords")
  occupancyHistory       ZoneOccupancyHistory[]   @relation("ZoneOccupancyHistory")
  accessLogs             ZoneAccessLog[]          @relation("ZoneAccessLogs")
  evacuationRoutes       EvacuationRoute[]        @relation("EvacuationFromZone")
  evacuationDestinations EvacuationRoute[]        @relation("EvacuationToZone")
  zoneNotifications      ZoneNotification[]       @relation("ZoneNotifications")
  subZones               FloorPlanZone[]          @relation("ParentSubZones")
  parentZone             FloorPlanZone?           @relation("ParentSubZones", fields: [parentZoneId], references: [id])
  parentZoneId           String?
  zoneViolations         ZoneViolation[]          @relation("ZoneViolations")
  zoneAnalytics          ZoneAnalytics[]          @relation("ZoneAnalytics")
  emergencyProcedures    EmergencyProcedure[]     @relation("ZoneEmergencyProcedures")
  
  // Enhanced AI Features Relations
  ageAnalyses            AgeEstimationAnalysis[]  @relation("ZoneAgeAnalyses")
  emotionAnalyses        EmotionDetectionAnalysis[] @relation("ZoneEmotionAnalyses")
  crowdAnalyses          CrowdDensityAnalysis[]   @relation("ZoneCrowdAnalyses")
  behaviorAnalyses       BehaviorPatternAnalysis[] @relation("ZoneBehaviorAnalyses")
  voiceAnalyses          VoicePatternAnalysis[]   @relation("ZoneVoiceAnalyses")
  visualAnalyses         VisualPatternAnalysis[]  @relation("ZoneVisualAnalyses")
  aiInsights             AIInsight[]              @relation("ZoneAIInsights")
  
  @@map("floor_plan_zones")
}

model Camera {
  id                  String                  @id @default(cuid())
  name                String
  model               String?
  serialNumber        String?
  ipAddress           String?
  streamUrl           String?
  status              CameraStatus            @default(OFFLINE)
  lastPing            DateTime?
  venueId             String
  floorPlanId         String?
  position            Json?                   // x, y coordinates on floor plan
  viewAngle           Float?                  @default(60.0)
  viewDistance        Float?                  @default(10.0)
  rotation            Float?                  @default(0.0)
  height              Float?                  @default(2.5)
  specifications      Json?                   // resolution, fps, night vision, etc.
  configuration       Json?                   // detection settings, zones, etc.
  isRecordingEnabled  Boolean                 @default(true)
  isRecognitionEnabled Boolean                @default(true)
  recognitionThreshold Float                  @default(0.85)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  venue               Venue                   @relation(fields: [venueId], references: [id], onDelete: Cascade)
  floorPlan           FloorPlan?              @relation(fields: [floorPlanId], references: [id])
  coverageAreas       CameraCoverageArea[]
  recognitionZones    CameraRecognitionZone[]
  zones               FloorPlanZone[]         @relation("ZoneCameras")
  cameraEvents        CameraEvent[]
  
  // Enhanced Alert System Relations
  childSightings         ChildSighting[]
  enhancedAlerts         EnhancedAlert[]
  unauthorizedDetections UnauthorizedDetection[]
  
  // Mobile Dashboard Relations
  locationHistory        ChildLocationHistory[]
  
  // Safety Analytics Relations
  analyticsEvents        AnalyticsEvent[]       @relation("CameraAnalyticsEvents")
  performanceRecords     CameraPerformance[]    @relation("CameraPerformanceRecords")
  incidentReports        IncidentReport[]       @relation("CameraIncidentReports")
  
  // Enhanced AI Features Relations
  aiAnalysisSessions     AIAnalysisSession[]    @relation("CameraAIAnalysisSessions")
  crowdAnalyses          CrowdDensityAnalysis[] @relation("CameraCrowdAnalyses")
  behaviorAnalyses       BehaviorPatternAnalysis[] @relation("CameraBehaviorAnalyses")
  visualAnalyses         VisualPatternAnalysis[] @relation("CameraVisualAnalyses")
  
  @@map("cameras")
}

model CameraCoverageArea {
  id         String    @id @default(cuid())
  cameraId   String
  area       Json      // polygon coordinates of coverage area
  confidence Float     @default(1.0)
  metadata   Json?     // blind spots, overlaps, etc.
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  camera     Camera    @relation(fields: [cameraId], references: [id], onDelete: Cascade)
  
  @@map("camera_coverage_areas")
}

model CameraRecognitionZone {
  id               String    @id @default(cuid())
  name             String
  cameraId         String
  coordinates      Json      // polygon defining the recognition zone within camera view
  isActive         Boolean   @default(true)
  recognitionTypes String[]  // face detection, motion, etc.
  sensitivity      Float     @default(0.8)
  alertsEnabled    Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  camera           Camera    @relation(fields: [cameraId], references: [id], onDelete: Cascade)
  
  @@map("camera_recognition_zones")
}

model CameraEvent {
  id           String           @id @default(cuid())
  type         CameraEventType
  description  String?
  severity     CameraEventSeverity @default(INFO)
  metadata     Json?
  cameraId     String
  venueId      String?
  resolvedAt   DateTime?
  resolvedBy   String?
  createdAt    DateTime         @default(now())
  camera       Camera           @relation(fields: [cameraId], references: [id], onDelete: Cascade)
  venue        Venue?           @relation(fields: [venueId], references: [id])
  
  @@map("camera_events")
}

model CameraRecommendation {
  id              String                      @id @default(cuid())
  venueId         String
  floorPlanId     String?
  recommendationType CameraRecommendationType
  suggestedPosition Json                     // x, y coordinates
  reasoning       String
  priority        CameraRecommendationPriority @default(MEDIUM)
  coverageArea    Json?                       // expected coverage area
  estimatedCost   Float?
  status          CameraRecommendationStatus  @default(PENDING)
  metadata        Json?
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
  venue           Venue                       @relation(fields: [venueId], references: [id], onDelete: Cascade)
  
  @@map("camera_recommendations")
}

enum FloorPlanFileType {
  DWG
  PDF
  PNG
  JPG
  JPEG
  SVG
}

enum FloorPlanZoneType {
  ENTRANCE
  EXIT
  PLAY_AREA
  RESTROOM
  FOOD_COURT
  OFFICE
  STORAGE
  EMERGENCY_EXIT
  HIGH_TRAFFIC
  RESTRICTED
  VIP_AREA
  PREMIUM_ZONE
  STAFF_ONLY
  MAINTENANCE_AREA
  HAZARD_ZONE
  AGE_RESTRICTED
  QUIET_ZONE
  ACTIVITY_ZONE
  OBSERVATION_DECK
  MEDICAL_AREA
  SECURITY_CHECKPOINT
  LOBBY
  WAITING_AREA
  PARTY_ROOM
  ARCADE
  CLIMBING_AREA
  TODDLER_ZONE
  TEEN_ZONE
  FAMILY_AREA
  EQUIPMENT_STORAGE
  KITCHEN
  STAFF_BREAK_ROOM
  CONFERENCE_ROOM
  RECEPTION
  CASHIER
  GIFT_SHOP
  LOCKER_ROOM
  NURSERY
  TIMEOUT_AREA
  FIRST_AID
  SECURITY_OFFICE
  UTILITY_ROOM
  JANITOR_CLOSET
  ELECTRICAL_ROOM
  HVAC_ROOM
  PARKING_AREA
  OUTDOOR_AREA
  ROOF_ACCESS
  BASEMENT
  MEZZANINE
  BALCONY
  TERRACE
  PLAYGROUND
  SANDBOX
  WATER_PLAY
  BALL_PIT
  SLIDE_AREA
  TRAMPOLINE_ZONE
  SOFT_PLAY
  SENSORY_ROOM
  GAMING_AREA
  READING_CORNER
  ART_STUDIO
  MUSIC_ROOM
  DANCE_FLOOR
  STAGE_AREA
  AMPHITHEATER
  PICNIC_AREA
  BIRTHDAY_ZONE
  CUSTOM
}

enum CameraStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
  ERROR
  INACTIVE
}

enum CameraEventType {
  OFFLINE
  ONLINE
  ERROR
  MAINTENANCE_REQUIRED
  CONFIGURATION_CHANGED
  RECORDING_STARTED
  RECORDING_STOPPED
  MOTION_DETECTED
  FACE_DETECTED
  ALERT_TRIGGERED
}

enum CameraEventSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum CameraRecommendationType {
  COVERAGE_GAP
  BLIND_SPOT
  HIGH_TRAFFIC
  ENTRANCE_EXIT
  SECURITY_ENHANCEMENT
  REDUNDANCY
}

enum CameraRecommendationPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CameraRecommendationStatus {
  PENDING
  APPROVED
  REJECTED
  IMPLEMENTED
}

// Enhanced Alert System Models

model AlertRule {
  id                    String                 @id @default(cuid())
  name                  String
  description           String?
  alertType             EnhancedAlertType
  venueId               String
  isActive              Boolean                @default(true)
  conditions            Json                   // Conditions for triggering the alert
  thresholds            Json                   // Time thresholds, confidence levels, etc.
  escalationRules       Json                   // Escalation rules and timeframes
  notificationChannels  NotificationChannel[]  // Which channels to use
  metadata              Json?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  venue                 Venue                  @relation("VenueAlertRules", fields: [venueId], references: [id], onDelete: Cascade)
  
  @@map("alert_rules")
}

model ChildSighting {
  id                    String                 @id @default(cuid())
  childId               String
  venueId               String
  cameraId              String?
  floorPlanZoneId       String?
  position              Json?                  // x, y coordinates if available
  confidence            Float
  boundingBox           Json?                  // Face detection bounding box
  imageUrl              String?                // Captured image URL
  imageKey              String?                // S3 key for the image
  recognitionEventId    String?                // Link to face recognition event
  sightingType          SightingType           @default(DETECTED)
  metadata              Json?
  timestamp             DateTime               @default(now())
  child                 Child                  @relation(fields: [childId], references: [id], onDelete: Cascade)
  venue                 Venue                  @relation(fields: [venueId], references: [id], onDelete: Cascade)
  camera                Camera?                @relation(fields: [cameraId], references: [id])
  zone                  FloorPlanZone?         @relation(fields: [floorPlanZoneId], references: [id])
  recognitionEvent      FaceRecognitionEvent?  @relation(fields: [recognitionEventId], references: [id])
  
  @@index([childId, timestamp])
  @@index([venueId, timestamp])
  @@map("child_sightings")
}

model EnhancedAlert {
  id                  String                 @id @default(cuid())
  type                EnhancedAlertType
  subType             String?                // More specific alert categorization
  title               String
  description         String
  severity            AlertSeverity          @default(MEDIUM)
  priority            AlertPriority          @default(NORMAL)
  status              EnhancedAlertStatus    @default(ACTIVE)
  childId             String?
  venueId             String
  cameraId            String?
  floorPlanZoneId     String?
  triggerData         Json?                  // Data that triggered the alert
  location            Json?                  // Specific location information
  imageUrls           String[]               // Associated images
  videoUrls           String[]               // Associated videos
  lastSeenLocation    Json?                  // Last known location for missing child alerts
  lastSeenTime        DateTime?              // Last sighting time
  escalationLevel     Int                    @default(0)
  escalatedAt         DateTime?
  autoResolveAt       DateTime?              // Auto-resolve time for certain alert types
  resolvedAt          DateTime?
  resolvedBy          String?
  resolution          String?
  responseTime        Int?                   // Time taken to respond in seconds
  acknowledgments     AlertAcknowledgment[]
  notifications       AlertNotification[]
  timeline            AlertTimelineEntry[]
  metadata            Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  child               Child?                 @relation(fields: [childId], references: [id])
  venue               Venue                  @relation("VenueEnhancedAlerts", fields: [venueId], references: [id], onDelete: Cascade)
  camera              Camera?                @relation(fields: [cameraId], references: [id])
  zone                FloorPlanZone?         @relation(fields: [floorPlanZoneId], references: [id])
  
  @@index([status, severity])
  @@index([venueId, status])
  @@index([childId, status])
  @@map("enhanced_alerts")
}

// Enhanced AI Features Models

model AIAnalysisSession {
  id                    String                 @id @default(cuid())
  sessionType           AIAnalysisType         @default(FACE_RECOGNITION)
  venueId               String
  cameraId              String?
  status                AIAnalysisStatus       @default(ACTIVE)
  startTime             DateTime               @default(now())
  endTime               DateTime?
  processingTime        Int?                   // Total processing time in milliseconds
  totalFramesProcessed  Int                    @default(0)
  successfulAnalyses    Int                    @default(0)
  failedAnalyses        Int                    @default(0)
  averageConfidence     Float?
  resourceUsage         Json?                  // CPU, memory, GPU usage stats
  errorLogs             String[]
  metadata              Json?
  venue                 Venue                  @relation("VenueAIAnalysisSessions", fields: [venueId], references: [id], onDelete: Cascade)
  camera                Camera?                @relation("CameraAIAnalysisSessions", fields: [cameraId], references: [id])
  ageAnalyses           AgeEstimationAnalysis[]
  emotionAnalyses       EmotionDetectionAnalysis[]
  crowdAnalyses         CrowdDensityAnalysis[]
  behaviorAnalyses      BehaviorPatternAnalysis[]
  voiceAnalyses         VoicePatternAnalysis[]
  visualAnalyses        VisualPatternAnalysis[]
  
  @@index([venueId, sessionType, status])
  @@index([startTime, sessionType])
  @@map("ai_analysis_sessions")
}

model AgeEstimationAnalysis {
  id                    String                 @id @default(cuid())
  sessionId             String
  childId               String?
  venueId               String
  zoneId                String?
  estimatedAge          Int                    // Estimated age in years
  ageRange              Json                   // {"min": 8, "max": 12}
  confidence            Float                  // 0.0 to 1.0
  detectionMethod       String                 @default("aws_rekognition")
  boundingBox           Json?                  // Face bounding box
  imageUrl              String?
  imageKey              String?
  ageGroupClassification AgeGroup              // INFANT, TODDLER, CHILD, TEEN, ADULT
  zoneAccessCompliant   Boolean                @default(true)
  accessViolation       Boolean                @default(false)
  violationReason       String?
  parentNotified        Boolean                @default(false)
  staffAlerted          Boolean                @default(false)
  actionTaken           AgeEnforcementAction   @default(NONE)
  recommendations       String[]               // Age-appropriate recommendations
  timestamp             DateTime               @default(now())
  metadata              Json?
  session               AIAnalysisSession      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  child                 Child?                 @relation("ChildAgeAnalyses", fields: [childId], references: [id])
  venue                 Venue                  @relation("VenueAgeAnalyses", fields: [venueId], references: [id])
  zone                  FloorPlanZone?         @relation("ZoneAgeAnalyses", fields: [zoneId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([zoneId, accessViolation])
  @@index([estimatedAge, zoneAccessCompliant])
  @@map("age_estimation_analyses")
}

model EmotionDetectionAnalysis {
  id                    String                 @id @default(cuid())
  sessionId             String
  childId               String?
  venueId               String
  zoneId                String?
  primaryEmotion        EmotionType            // HAPPY, SAD, ANGRY, FEAR, SURPRISE, DISGUST, CALM
  emotionConfidence     Float                  // 0.0 to 1.0
  emotionIntensity      EmotionIntensity       @default(MEDIUM)
  allEmotions           Json                   // All detected emotions with confidences
  distressLevel         DistressLevel          @default(NONE)
  elationLevel          ElationLevel           @default(NONE)
  requiresIntervention  Boolean                @default(false)
  interventionType      EmotionInterventionType?
  alertTriggered        Boolean                @default(false)
  alertId               String?
  boundingBox           Json?                  // Face bounding box
  imageUrl              String?
  imageKey              String?
  parentNotified        Boolean                @default(false)
  staffNotified         Boolean                @default(false)
  emotionalState        EmotionalState         @default(STABLE)
  previousEmotions      Json?                  // Recent emotion history
  contextualFactors     Json?                  // Environmental factors affecting emotion
  supportRecommendations String[]              // Recommended support actions
  timestamp             DateTime               @default(now())
  metadata              Json?
  session               AIAnalysisSession      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  child                 Child?                 @relation("ChildEmotionAnalyses", fields: [childId], references: [id])
  venue                 Venue                  @relation("VenueEmotionAnalyses", fields: [venueId], references: [id])
  zone                  FloorPlanZone?         @relation("ZoneEmotionAnalyses", fields: [zoneId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([primaryEmotion, distressLevel])
  @@index([requiresIntervention, alertTriggered])
  @@map("emotion_detection_analyses")
}

model CrowdDensityAnalysis {
  id                    String                 @id @default(cuid())
  sessionId             String
  venueId               String
  zoneId                String?
  cameraId              String?
  totalPeopleCount      Int                    @default(0)
  childrenCount         Int                    @default(0)
  adultsCount           Int                    @default(0)
  densityLevel          CrowdDensityLevel      @default(LOW)
  densityScore          Float                  // 0.0 to 1.0 (1.0 = maximum density)
  capacityUtilization   Float                  // 0.0 to 1.0 (current / max capacity)
  overcrowdingDetected  Boolean                @default(false)
  riskLevel             CrowdRiskLevel         @default(LOW)
  flowDirection         Json?                  // Crowd movement direction
  flowSpeed             Float?                 // Average movement speed
  congestionPoints      Json?                  // Areas of congestion
  emergencyExitAccess   Boolean                @default(true)
  evacuationFeasibility Json?                  // Evacuation assessment
  socialDistancing      Boolean                @default(true)
  distancingCompliance  Float?                 // 0.0 to 1.0
  alertTriggered        Boolean                @default(false)
  alertId               String?
  staffNotified         Boolean                @default(false)
  imageUrl              String?
  imageKey              String?
  heatmapUrl            String?                // Crowd density heatmap
  recommendations       String[]               // Crowd management recommendations
  timestamp             DateTime               @default(now())
  metadata              Json?
  session               AIAnalysisSession      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  venue                 Venue                  @relation("VenueCrowdAnalyses", fields: [venueId], references: [id])
  zone                  FloorPlanZone?         @relation("ZoneCrowdAnalyses", fields: [zoneId], references: [id])
  camera                Camera?                @relation("CameraCrowdAnalyses", fields: [cameraId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([zoneId, densityLevel])
  @@index([overcrowdingDetected, riskLevel])
  @@map("crowd_density_analyses")
}

model BehaviorPatternAnalysis {
  id                    String                 @id @default(cuid())
  sessionId             String
  childId               String?
  venueId               String
  zoneId                String?
  cameraId              String?
  behaviorType          BehaviorType           // BULLYING, DROWNING, SEIZURE, GAIT_ABNORMAL, AGGRESSION, etc.
  behaviorSubtype       String?                // More specific behavior classification
  detectionConfidence   Float                  // 0.0 to 1.0
  severityLevel         BehaviorSeverityLevel  @default(LOW)
  riskAssessment        RiskLevel              @default(LOW)
  immediateIntervention Boolean                @default(false)
  emergencyResponse     Boolean                @default(false)
  behaviorDuration      Int?                   // Duration of behavior in seconds
  participantCount      Int                    @default(1) // Number of people involved
  participantIds        String[]               // IDs of identified participants
  victimId              String?                // Victim in bullying scenarios
  aggressorIds          String[]               // Aggressors in bullying/violence
  behaviorLocation      Json?                  // Specific location coordinates
  behaviorDescription   String
  contextualFactors     Json?                  // Environmental or situational factors
  patternHistory        Json?                  // Previous behavior patterns for this child
  poseAnalysis          Json?                  // Body pose analysis data
  movementAnalysis      Json?                  // Movement pattern analysis
  interactionAnalysis   Json?                  // Social interaction analysis
  alertTriggered        Boolean                @default(false)
  alertId               String?
  parentNotified        Boolean                @default(false)
  staffNotified         Boolean                @default(false)
  emergencyServicesNotified Boolean            @default(false)
  interventionActions   String[]               // Actions taken
  imageUrls             String[]               // Evidence images
  videoUrls             String[]               // Evidence videos
  timelineData          Json?                  // Behavior timeline
  preventionRecommendations String[]           // Prevention strategies
  followUpRequired      Boolean                @default(false)
  followUpNotes         String?
  timestamp             DateTime               @default(now())
  metadata              Json?
  session               AIAnalysisSession      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  child                 Child?                 @relation("ChildBehaviorAnalyses", fields: [childId], references: [id])
  venue                 Venue                  @relation("VenueBehaviorAnalyses", fields: [venueId], references: [id])
  zone                  FloorPlanZone?         @relation("ZoneBehaviorAnalyses", fields: [zoneId], references: [id])
  camera                Camera?                @relation("CameraBehaviorAnalyses", fields: [cameraId], references: [id])
  
  @@index([venueId, behaviorType, timestamp])
  @@index([behaviorType, severityLevel])
  @@index([immediateIntervention, emergencyResponse])
  @@map("behavior_pattern_analyses")
}

model VoicePatternAnalysis {
  id                    String                 @id @default(cuid())
  sessionId             String
  childId               String?
  venueId               String
  zoneId                String?
  audioSourceId         String?                // Microphone or audio device ID
  voiceType             VoiceType              // CRYING, SCREAMING, LAUGHING, TALKING, DISTRESS_CALL
  emotionalState        VoiceEmotionalState    // DISTRESSED, HAPPY, ANGRY, FEARFUL, EXCITED
  intensityLevel        VoiceIntensityLevel    @default(MEDIUM)
  confidenceLevel       Float                  // 0.0 to 1.0
  distressDetected      Boolean                @default(false)
  helpCallDetected      Boolean                @default(false)
  panicDetected         Boolean                @default(false)
  excitementDetected    Boolean                @default(false)
  languageDetected      String?                // Detected language
  keywordsDetected      String[]               // Important keywords (help, stop, etc.)
  sentimentScore        Float?                 // -1.0 to 1.0 (negative to positive)
  volumeLevel           Float                  // Decibel level
  frequencyAnalysis     Json?                  // Audio frequency analysis
  voicePrint            Json?                  // Voice pattern for identification
  backgroundNoise       Float?                 // Background noise level
  audioQuality          AudioQuality           @default(GOOD)
  alertTriggered        Boolean                @default(false)
  alertId               String?
  parentNotified        Boolean                @default(false)
  staffNotified         Boolean                @default(false)
  emergencyResponse     Boolean                @default(false)
  audioUrl              String?                // Audio clip URL
  audioKey              String?                // S3 key for audio
  transcription         String?                // Speech-to-text transcription
  responseActions       String[]               // Actions taken in response
  contextualData        Json?                  // Environmental context
  timestamp             DateTime               @default(now())
  metadata              Json?
  session               AIAnalysisSession      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  child                 Child?                 @relation("ChildVoiceAnalyses", fields: [childId], references: [id])
  venue                 Venue                  @relation("VenueVoiceAnalyses", fields: [venueId], references: [id])
  zone                  FloorPlanZone?         @relation("ZoneVoiceAnalyses", fields: [zoneId], references: [id])
  
  @@index([venueId, voiceType, timestamp])
  @@index([distressDetected, helpCallDetected])
  @@index([alertTriggered, emergencyResponse])
  @@map("voice_pattern_analyses")
}

model VisualPatternAnalysis {
  id                    String                 @id @default(cuid())
  sessionId             String
  childId               String?
  venueId               String
  zoneId                String?
  cameraId              String?
  patternType           VisualPatternType      // FACIAL_EXPRESSION, BODY_LANGUAGE, GESTURE, DISTRESS_SIGNAL
  patternSubtype        String?                // More specific pattern type
  detectionConfidence   Float                  // 0.0 to 1.0
  expressionAnalysis    Json?                  // Facial expression details
  bodyLanguageAnalysis  Json?                  // Body language interpretation
  gestureAnalysis       Json?                  // Gesture recognition details
  postureAnalysis       Json?                  // Posture analysis
  engagementLevel       EngagementLevel        @default(NEUTRAL)
  comfortLevel          ComfortLevel           @default(NEUTRAL)
  anxietyLevel          AnxietyLevel           @default(NONE)
  socialInteraction     SocialInteractionType  @default(NONE)
  attentionState        AttentionState         @default(NORMAL)
  energyLevel           EnergyLevel            @default(NORMAL)
  visualDistressSignals Boolean                @default(false)
  happinessIndicators   Boolean                @default(false)
  fatigueSigns          Boolean                @default(false)
  boundingBox           Json?                  // Detection bounding box
  keypointAnalysis      Json?                  // Pose keypoint analysis
  movementVector        Json?                  // Movement direction and speed
  interactionPartners   String[]               // IDs of interaction partners
  groupDynamics         Json?                  // Group interaction analysis
  environmentalContext  Json?                  // Environmental factors
  alertTriggered        Boolean                @default(false)
  alertId               String?
  parentNotified        Boolean                @default(false)
  staffNotified         Boolean                @default(false)
  imageUrl              String?
  imageKey              String?
  videoUrl              String?                // Video clip URL
  videoKey              String?                // S3 key for video
  analysisResults       Json?                  // Detailed analysis results
  recommendations       String[]               // Action recommendations
  timestamp             DateTime               @default(now())
  metadata              Json?
  session               AIAnalysisSession      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  child                 Child?                 @relation("ChildVisualAnalyses", fields: [childId], references: [id])
  venue                 Venue                  @relation("VenueVisualAnalyses", fields: [venueId], references: [id])
  zone                  FloorPlanZone?         @relation("ZoneVisualAnalyses", fields: [zoneId], references: [id])
  camera                Camera?                @relation("CameraVisualAnalyses", fields: [cameraId], references: [id])
  
  @@index([venueId, patternType, timestamp])
  @@index([visualDistressSignals, alertTriggered])
  @@index([engagementLevel, comfortLevel])
  @@map("visual_pattern_analyses")
}

model AIInsight {
  id                    String                 @id @default(cuid())
  insightType           AIInsightType          // SAFETY_PREDICTION, BEHAVIOR_TREND, RISK_ASSESSMENT, etc.
  title                 String
  description           String
  confidence            Float                  // 0.0 to 1.0
  severity              InsightSeverity        @default(MEDIUM)
  category              InsightCategory        // SAFETY, BEHAVIOR, OPERATIONAL, PREDICTIVE
  venueId               String
  zoneId                String?
  childId               String?
  timeframe             Json                   // Time period the insight covers
  dataPoints            Int                    // Number of data points analyzed
  trendDirection        TrendDirection         @default(STABLE)
  predictiveScore       Float?                 // Predictive accuracy score
  riskLevel             RiskLevel              @default(LOW)
  actionRequired        Boolean                @default(false)
  actionPriority        ActionPriority         @default(NORMAL)
  recommendations       String[]               // AI-generated recommendations
  preventiveMeasures    String[]               // Suggested preventive actions
  implementation        Json?                  // Implementation guidance
  expectedOutcome       String?                // Expected result of implementing recommendations
  costBenefit          Json?                  // Cost-benefit analysis
  successMetrics        String[]               // How to measure success
  relatedInsights       String[]               // Related insight IDs
  sourceData            Json                   // Data sources used for the insight
  analysisMethod        String                 // AI method used
  lastValidated         DateTime?              // Last validation timestamp
  validationAccuracy    Float?                 // Validation accuracy
  isActioned            Boolean                @default(false)
  actionedAt            DateTime?
  actionedBy            String?
  actionResults         Json?                  // Results of implemented actions
  followUpRequired      Boolean                @default(false)
  followUpDate          DateTime?
  tags                  String[]               // Categorization tags
  visibility            InsightVisibility      @default(ADMIN_ONLY)
  sharedWith            String[]               // User IDs insight is shared with
  feedback              Json?                  // User feedback on the insight
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  metadata              Json?
  venue                 Venue                  @relation("VenueAIInsights", fields: [venueId], references: [id])
  zone                  FloorPlanZone?         @relation("ZoneAIInsights", fields: [zoneId], references: [id])
  child                 Child?                 @relation("ChildAIInsights", fields: [childId], references: [id])
  
  @@index([venueId, insightType, createdAt])
  @@index([riskLevel, actionRequired])
  @@index([category, severity])
  @@map("ai_insights")
}

model AISafetyScore {
  id                    String                 @id @default(cuid())
  scoreType             SafetyScoreType        // VENUE, ZONE, CHILD, OVERALL
  entityId              String                 // ID of venue, zone, or child
  venueId               String
  overallScore          Float                  // 0.0 to 100.0
  behaviorScore         Float                  // Behavioral safety score
  emotionalScore        Float                  // Emotional wellbeing score
  physicalScore         Float                  // Physical safety score
  environmentalScore    Float                  // Environmental safety score
  socialScore           Float                  // Social interaction safety score
  complianceScore       Float                  // Rule compliance score
  trendScore            Float                  // Trend improvement score
  riskFactors           Json                   // Identified risk factors
  strengthFactors       Json                   // Identified strength factors
  improvementAreas      String[]               // Areas needing improvement
  achievements          String[]               // Recent achievements
  benchmarkComparison   Json                   // Comparison with benchmarks
  historicalTrend       Json                   // Historical score trends
  predictiveTrend       Json                   // Predicted future trends
  scoreBreakdown        Json                   // Detailed score components
  calculationMethod     String                 // Method used for calculation
  dataQuality           Float                  // Quality of underlying data (0.0 to 1.0)
  confidenceInterval    Json                   // Statistical confidence interval
  lastRecalculated      DateTime               @default(now())
  validUntil            DateTime               // Score validity period
  recommendations       String[]               // Recommendations to improve score
  alertThresholds       Json                   // Score thresholds for alerts
  scorePeriod           Json                   // Time period for this score
  metadata              Json?
  venue                 Venue                  @relation("VenueAISafetyScores", fields: [venueId], references: [id])
  
  @@index([venueId, scoreType, lastRecalculated])
  @@index([overallScore, scoreType])
  @@index([entityId, scoreType])
  @@map("ai_safety_scores")
}

model AIModelPerformance {
  id                    String                 @id @default(cuid())
  modelName             String
  modelVersion          String
  modelType             AIModelType            // FACE_RECOGNITION, EMOTION_DETECTION, etc.
  venueId               String?
  accuracy              Float                  // Model accuracy (0.0 to 1.0)
  precision             Float                  // Model precision
  recall                Float                  // Model recall
  f1Score               Float                  // F1 score
  processingTime        Float                  // Average processing time in ms
  throughput            Float                  // Predictions per second
  resourceUsage         Json                   // CPU, memory, GPU usage
  errorRate             Float                  // Error rate (0.0 to 1.0)
  falsePositiveRate     Float                  // False positive rate
  falseNegativeRate     Float                  // False negative rate
  confidenceDistribution Json                  // Distribution of confidence scores
  calibrationScore      Float?                 // Model calibration quality
  driftDetection        Boolean                @default(false) // Model drift detected
  driftScore            Float?                 // Magnitude of drift
  lastTraining          DateTime?              // Last training date
  trainingDataSize      Int?                   // Size of training dataset
  validationDataSize    Int?                   // Size of validation dataset
  testDataSize          Int?                   // Size of test dataset
  hyperparameters       Json?                  // Model hyperparameters
  performanceTrend      Json                   // Performance over time
  comparisonBaseline    Json                   // Comparison with baseline models
  businessImpact        Json                   // Business impact metrics
  alertsGenerated       Int                    @default(0) // Alerts generated by this model
  correctAlerts         Int                    @default(0) // Correctly identified alerts
  missedIncidents       Int                    @default(0) // Incidents missed by the model
  recommendations       String[]               // Performance improvement recommendations
  needsRetraining       Boolean                @default(false)
  retrainingScheduled   DateTime?
  evaluationDate        DateTime               @default(now())
  evaluatedBy           String?
  notes                 String?
  metadata              Json?
  venue                 Venue?                 @relation("VenueAIModelPerformance", fields: [venueId], references: [id])
  
  @@index([modelType, venueId])
  @@index([accuracy, evaluationDate])
  @@index([needsRetraining, modelType])
  @@map("ai_model_performance")
}

model AlertAcknowledgment {
  id              String         @id @default(cuid())
  alertId         String
  userId          String
  acknowledgedAt  DateTime       @default(now())
  response        String?        // Staff response or action taken
  metadata        Json?
  alert           EnhancedAlert  @relation(fields: [alertId], references: [id], onDelete: Cascade)
  user            User           @relation("UserAlertAcknowledgments", fields: [userId], references: [id])
  
  @@unique([alertId, userId])
  @@map("alert_acknowledgments")
}

model AlertTimelineEntry {
  id          String         @id @default(cuid())
  alertId     String
  eventType   AlertEventType
  description String
  performedBy String?        // User ID who performed the action
  metadata    Json?
  timestamp   DateTime       @default(now())
  alert       EnhancedAlert  @relation(fields: [alertId], references: [id], onDelete: Cascade)
  performer   User?          @relation("UserAlertTimelineEntries", fields: [performedBy], references: [id])
  
  @@map("alert_timeline_entries")
}

model AlertNotification {
  id                String                    @id @default(cuid())
  alertId           String
  recipientId       String
  recipientType     NotificationRecipientType
  channel           NotificationChannel
  status            NotificationStatus        @default(PENDING)
  subject           String?
  message           String
  metadata          Json?                     // Channel-specific data (phone number, email, etc.)
  scheduledAt       DateTime                  @default(now())
  sentAt            DateTime?
  deliveredAt       DateTime?
  readAt            DateTime?
  failedAt          DateTime?
  failureReason     String?
  retryCount        Int                       @default(0)
  maxRetries        Int                       @default(3)
  externalId        String?                   // External service message ID
  alert             EnhancedAlert             @relation(fields: [alertId], references: [id], onDelete: Cascade)
  recipient         User                      @relation("UserAlertNotifications", fields: [recipientId], references: [id])
  
  @@index([status, scheduledAt])
  @@index([recipientId, channel])
  @@map("alert_notifications")
}

model EmergencyContact {
  id                String                     @id @default(cuid())
  name              String
  relationship      String
  phoneNumber       String
  email             String?
  isPrimary         Boolean                    @default(false)
  priority          Int                        @default(1)
  availableHours    Json?                      // When this contact is available
  childId           String?
  venueId           String?
  userId            String?                    // If it's a staff emergency contact
  contactType       EmergencyContactType       @default(PERSONAL)
  isActive          Boolean                    @default(true)
  metadata          Json?
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  child             Child?                     @relation(fields: [childId], references: [id], onDelete: Cascade)
  venue             Venue?                     @relation("VenueEmergencyContacts", fields: [venueId], references: [id], onDelete: Cascade)
  user              User?                      @relation("UserEmergencyContacts", fields: [userId], references: [id])
  
  @@map("emergency_contacts")
}

model NotificationPreference {
  id                      String              @id @default(cuid())
  userId                  String
  alertType               EnhancedAlertType
  channels                NotificationChannel[]
  isEnabled               Boolean             @default(true)
  quietHoursStart         String?             // HH:MM format
  quietHoursEnd           String?             // HH:MM format
  escalationDelay         Int                 @default(300) // seconds before escalation
  metadata                Json?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  user                    User                @relation("UserNotificationPreferences", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, alertType])
  @@map("notification_preferences")
}

model UnauthorizedDetection {
  id                String                 @id @default(cuid())
  venueId           String
  cameraId          String?
  floorPlanZoneId   String?
  detectionType     UnauthorizedType
  confidence        Float
  boundingBox       Json?
  imageUrl          String?
  imageKey          String?
  estimatedAge      Json?                  // Age range estimation
  description       String?
  riskLevel         RiskLevel              @default(LOW)
  alertGenerated    Boolean                @default(false)
  alertId           String?
  metadata          Json?
  timestamp         DateTime               @default(now())
  venue             Venue                  @relation("VenueUnauthorizedDetections", fields: [venueId], references: [id], onDelete: Cascade)
  camera            Camera?                @relation(fields: [cameraId], references: [id])
  zone              FloorPlanZone?         @relation(fields: [floorPlanZoneId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([riskLevel, alertGenerated])
  @@map("unauthorized_detections")
}

// Enhanced Enums

enum EnhancedAlertType {
  CHILD_DETECTED          // Child successfully detected and recognized
  CHILD_MISSING           // Child not seen for configured time threshold
  CHILD_UNAUTHORIZED_EXIT // Child detected near exit without checkout
  UNAUTHORIZED_PERSON     // Unknown person detected
  STRANGER_DANGER         // Adult near children without recognition
  EMERGENCY_BROADCAST     // Manual emergency alert
  SYSTEM_FAILURE          // Camera or system malfunction
  CROWD_DENSITY           // Too many people in restricted area
  RESTRICTED_AREA         // Person in restricted zone
  PANIC_BUTTON            // Manual panic button activation
  MEDICAL_EMERGENCY       // Medical assistance needed
  SECURITY_BREACH         // Security protocol violation
  EVACUATION              // Emergency evacuation
  WEATHER_ALERT           // Weather-related safety alert
  OPERATIONAL             // General operational alerts
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  EMERGENCY
}

enum AlertPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  IMMEDIATE
}

enum EnhancedAlertStatus {
  ACTIVE              // Alert is active and needs attention
  ACKNOWLEDGED        // Alert has been seen by staff
  IN_PROGRESS         // Staff is working on the alert
  ESCALATED           // Alert has been escalated
  RESOLVED            // Alert has been resolved
  DISMISSED           // Alert was dismissed as false positive
  EXPIRED             // Alert auto-expired
}

enum AlertEventType {
  CREATED
  ACKNOWLEDGED
  ESCALATED
  STATUS_CHANGED
  ASSIGNED
  UPDATED
  RESOLVED
  DISMISSED
  COMMENT_ADDED
  NOTIFICATION_SENT
  SYSTEM_ACTION
}

enum NotificationChannel {
  SMS
  EMAIL
  PUSH_NOTIFICATION
  IN_APP
  PHONE_CALL
  DASHBOARD_ALERT
  WEBHOOK
}

enum NotificationRecipientType {
  PARENT
  VENUE_STAFF
  VENUE_ADMIN
  EMERGENCY_CONTACT
  COMPANY_ADMIN
  EXTERNAL_SERVICE
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
  CANCELLED
}

enum EmergencyContactType {
  PERSONAL          // Personal emergency contact for a child
  VENUE_STAFF       // Venue staff contact
  EMERGENCY_SERVICES // Police, fire, medical
  VENUE_MANAGEMENT  // Venue management contacts
}

enum SightingType {
  DETECTED          // Normal face detection sighting
  ENTERING          // Child detected entering venue/zone
  EXITING           // Child detected exiting venue/zone
  MOVING            // Child detected moving between zones
  STATIONARY        // Child detected staying in same area
}

enum UnauthorizedType {
  UNKNOWN_ADULT     // Adult not in system
  UNKNOWN_CHILD     // Child not registered
  RESTRICTED_ACCESS // Person in restricted area
  SUSPICIOUS_BEHAVIOR // Suspicious activity detected
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Mobile Dashboard Models

model MobileDevice {
  id                    String                 @id @default(cuid())
  userId                String
  deviceId              String                 @unique // Device-specific identifier
  deviceToken           String?                // Push notification token
  deviceType            DeviceType
  platform              String                 // iOS, Android, Web
  appVersion            String?
  osVersion             String?
  lastActiveAt          DateTime               @default(now())
  isActive              Boolean                @default(true)
  pushNotificationsEnabled Boolean             @default(true)
  offlineDataEnabled    Boolean                @default(true)
  locationPermission    Boolean                @default(false)
  cameraPermission      Boolean                @default(false)
  notificationSettings  Json?                  // Mobile-specific notification preferences
  metadata              Json?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  user                  User                   @relation("UserMobileDevices", fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("mobile_devices")
}

model PhotoNotification {
  id                    String                 @id @default(cuid())
  childId               String
  parentId              String
  venueId               String
  photoUrl              String
  thumbnailUrl          String?
  originalSize          Int?                   // File size in bytes
  compressedSize        Int?                   // Compressed size for mobile
  capturedAt            DateTime
  detectionConfidence   Float?                 // Face detection confidence
  recognitionConfidence Float?                 // Face recognition confidence
  location              Json?                  // Camera location/zone
  metadata              Json?                  // EXIF data, camera info, etc.
  isViewed              Boolean                @default(false)
  viewedAt              DateTime?
  isDownloaded          Boolean                @default(false)
  downloadedAt          DateTime?
  isShared              Boolean                @default(false)
  sharedAt              DateTime?
  notificationSent      Boolean                @default(false)
  sentAt                DateTime?
  child                 Child                  @relation(fields: [childId], references: [id], onDelete: Cascade)
  parent                User                   @relation("UserPhotoNotifications", fields: [parentId], references: [id])
  venue                 Venue                  @relation(fields: [venueId], references: [id])
  
  @@index([parentId, isViewed])
  @@index([childId, capturedAt])
  @@map("photo_notifications")
}

model ChildLocationHistory {
  id                String                 @id @default(cuid())
  childId           String
  venueId           String
  cameraId          String?
  zoneId            String?
  position          Json?                  // x, y coordinates
  accuracy          Float?                 // Location accuracy confidence
  detectionType     LocationDetectionType  @default(CAMERA_DETECTION)
  entryTime         DateTime?              // When child entered this location
  exitTime          DateTime?              // When child left this location
  duration          Int?                   // Duration in seconds
  isCurrentLocation Boolean                @default(false)
  confidence        Float                  @default(0.0)
  metadata          Json?
  timestamp         DateTime               @default(now())
  child             Child                  @relation(fields: [childId], references: [id], onDelete: Cascade)
  venue             Venue                  @relation(fields: [venueId], references: [id])
  camera            Camera?                @relation(fields: [cameraId], references: [id])
  zone              FloorPlanZone?         @relation("LocationHistoryZone", fields: [zoneId], references: [id])
  
  @@index([childId, timestamp])
  @@index([venueId, timestamp])
  @@index([isCurrentLocation])
  @@map("child_location_history")
}

model CheckInOutEvent {
  id                String                 @id @default(cuid())
  childId           String
  venueId           String
  parentId          String
  eventType         CheckInOutType
  method            CheckInMethod          @default(STAFF_MANUAL)
  qrCode            String?                // QR code used for check-in
  authorizedBy      String?                // Staff member who authorized
  pickupPersonName  String?                // Name of person picking up child
  pickupPersonId    String?                // ID verification
  pickupRelation    String?                // Relationship to child
  isAuthorized      Boolean                @default(true)
  requiresVerification Boolean             @default(false)
  verifiedAt        DateTime?
  verifiedBy        String?
  location          Json?                  // Check-in/out location
  duration          Int?                   // Visit duration in minutes
  notes             String?
  metadata          Json?
  timestamp         DateTime               @default(now())
  
  // Additional relation fields
  membershipId      String?                // Associated membership
  kioskId           String?                // Kiosk used for check-in
  kioskSessionId    String?                // Kiosk session
  child             Child                  @relation(fields: [childId], references: [id])
  venue             Venue                  @relation(fields: [venueId], references: [id])
  parent            User                   @relation("UserCheckInOutEvents", fields: [parentId], references: [id])
  
  // Digital Check-in/Check-out Relations
  childQRCode       ChildQRCode?           @relation("ChildQRCheckInEvents", fields: [qrCode], references: [qrCode])
  membership        Membership?            @relation("MembershipCheckInEvents", fields: [membershipId], references: [id])
  kiosk             CheckInKiosk?          @relation("KioskCheckInEvents", fields: [kioskId], references: [id])
  kioskSession      KioskSession?          @relation("SessionCheckInEvents", fields: [kioskSessionId], references: [id])
  posTransaction    POSTransaction?        @relation("TransactionCheckInEvents")
  pickupEvent       PickupEvent?           @relation("PickupEventCheckInOut")
  biometricVerifications BiometricVerification[] @relation("BiometricCheckInEvents")
  
  @@index([childId, timestamp])
  @@index([venueId, eventType])
  @@map("check_in_out_events")
}

model MobileNotification {
  id                String                    @id @default(cuid())
  userId            String
  childId           String?
  alertId           String?
  notificationType  MobileNotificationType
  title             String
  message           String
  data              Json?                     // Additional notification data
  priority          NotificationPriority      @default(NORMAL)
  isRead            Boolean                   @default(false)
  readAt            DateTime?
  isActionRequired  Boolean                   @default(false)
  actionTaken       String?
  actionTakenAt     DateTime?
  deepLinkUrl       String?                   // Deep link for notification tap
  imageUrl          String?                   // Notification image
  expiresAt         DateTime?
  deliveryStatus    NotificationDeliveryStatus @default(PENDING)
  deliveredAt       DateTime?
  failureReason     String?
  retryCount        Int                       @default(0)
  metadata          Json?
  createdAt         DateTime                  @default(now())
  user              User                      @relation("UserMobileNotifications", fields: [userId], references: [id])
  child             Child?                    @relation(fields: [childId], references: [id])
  
  @@index([userId, isRead])
  @@index([notificationType, priority])
  @@map("mobile_notifications")
}

model OfflineDataCache {
  id                String                 @id @default(cuid())
  userId            String
  dataType          OfflineDataType
  dataKey           String                 // Unique identifier for the cached data
  data              Json                   // Cached data
  lastSyncAt        DateTime               @default(now())
  expiresAt         DateTime?
  isStale           Boolean                @default(false)
  syncPriority      Int                    @default(1) // 1 = highest priority
  dataSize          Int?                   // Size in bytes
  metadata          Json?
  user              User                   @relation("UserOfflineDataCache", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, dataType, dataKey])
  @@index([userId, dataType])
  @@map("offline_data_cache")
}

model ParentSession {
  id                String                 @id @default(cuid())
  userId            String
  deviceId          String?
  sessionToken      String                 @unique
  refreshToken      String?
  ipAddress         String?
  userAgent         String?
  isActive          Boolean                @default(true)
  lastActivity      DateTime               @default(now())
  location          Json?                  // GPS location if available
  appVersion        String?
  platform          String?
  createdAt         DateTime               @default(now())
  expiresAt         DateTime
  user              User                   @relation("UserParentSessions", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isActive])
  @@map("parent_sessions")
}

model VenueQRCode {
  id                String                 @id @default(cuid())
  venueId           String
  qrCode            String                 @unique
  qrType            QRCodeType
  purpose           String                 // check-in, check-out, emergency, info
  isActive          Boolean                @default(true)
  expiresAt         DateTime?
  usageCount        Int                    @default(0)
  maxUsage          Int?
  allowedRoles      UserRole[]             // Who can use this QR code
  metadata          Json?
  createdAt         DateTime               @default(now())
  venue             Venue                  @relation(fields: [venueId], references: [id], onDelete: Cascade)
  
  @@map("venue_qr_codes")
}

// Enhanced Enums for Mobile Features

enum DeviceType {
  IOS
  ANDROID
  WEB
  TABLET
}

enum LocationDetectionType {
  CAMERA_DETECTION
  ZONE_ENTRY
  ZONE_EXIT
  MANUAL_CHECK_IN
  QR_SCAN
  STAFF_REPORT
}

enum CheckInOutType {
  CHECK_IN
  CHECK_OUT
  EMERGENCY_PICKUP
  EARLY_PICKUP
  TRANSFER
}

enum CheckInMethod {
  QR_CODE
  STAFF_MANUAL
  PARENT_APP
  FACIAL_RECOGNITION
  ID_VERIFICATION
}

enum MobileNotificationType {
  CHILD_CHECK_IN
  CHILD_CHECK_OUT
  CHILD_DETECTED
  CHILD_MISSING
  PHOTO_AVAILABLE
  EMERGENCY_ALERT
  PICKUP_AUTHORIZATION
  VENUE_ANNOUNCEMENT
  SYSTEM_UPDATE
  BATTERY_LOW
  CONNECTION_LOST
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  EMERGENCY
}

enum NotificationDeliveryStatus {
  PENDING
  DELIVERED
  FAILED
  EXPIRED
  CANCELLED
}

enum OfflineDataType {
  CHILD_INFO
  EMERGENCY_CONTACTS
  VENUE_INFO
  RECENT_PHOTOS
  LOCATION_HISTORY
  NOTIFICATIONS
  SETTINGS
}

enum QRCodeType {
  CHECK_IN
  CHECK_OUT
  EMERGENCY
  INFO
  VENUE_ACCESS
}

// Safety Analytics & Reporting Models

model AnalyticsEvent {
  id              String              @id @default(cuid())
  eventType       AnalyticsEventType
  category        EventCategory
  subcategory     String?
  description     String?
  value           Float?              // Numeric value for the event
  unit            String?             // Unit of measurement
  venueId         String
  childId         String?
  userId          String?
  cameraId        String?
  zoneId          String?
  alertId         String?
  sessionId       String?
  deviceId        String?
  location        Json?               // Geographic or floor plan coordinates
  metadata        Json?               // Additional event-specific data
  tags            String[]            // Tags for categorization
  timestamp       DateTime            @default(now())
  processedAt     DateTime?           // When the event was processed for analytics
  venue           Venue               @relation("VenueAnalyticsEvents", fields: [venueId], references: [id], onDelete: Cascade)
  child           Child?              @relation("ChildAnalyticsEvents", fields: [childId], references: [id])
  user            User?               @relation("UserAnalyticsEvents", fields: [userId], references: [id])
  camera          Camera?             @relation("CameraAnalyticsEvents", fields: [cameraId], references: [id])
  zone            FloorPlanZone?      @relation("ZoneAnalyticsEvents", fields: [zoneId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([eventType, timestamp])
  @@index([category, timestamp])
  @@map("analytics_events")
}

model SafetyReport {
  id                      String                 @id @default(cuid())
  title                   String
  description             String?
  reportType              SafetyReportType
  period                  ReportPeriod
  startDate               DateTime
  endDate                 DateTime
  venueId                 String?                // null for multi-venue reports
  generatedBy             String
  status                  ReportStatus           @default(GENERATING)
  format                  ReportFormat           @default(PDF)
  fileUrl                 String?                // Generated report file URL
  fileKey                 String?                // S3 key for the report file
  fileSize                Int?
  executiveSummary        Json?                  // Key metrics and insights
  sections                Json                   // Report sections and content
  charts                  Json?                  // Chart configurations and data
  metrics                 Json                   // Calculated metrics
  insights                Json?                  // AI-generated insights
  recommendations         Json?                  // Actionable recommendations
  comparisonData          Json?                  // Period-over-period comparisons
  benchmarkData           Json?                  // Industry benchmarks
  customFilters           Json?                  // Applied filters
  schedule                ReportSchedule?        @relation(fields: [scheduleId], references: [id])
  scheduleId              String?
  isScheduled             Boolean                @default(false)
  recipients              String[]               // Email addresses for delivery
  deliveredAt             DateTime?
  deliveryStatus          DeliveryStatus         @default(PENDING)
  downloadCount           Int                    @default(0)
  lastAccessedAt          DateTime?
  retentionDays           Int                    @default(365)
  metadata                Json?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  venue                   Venue?                 @relation("VenueSafetyReports", fields: [venueId], references: [id])
  generator               User                   @relation("UserGeneratedReports", fields: [generatedBy], references: [id])
  
  @@index([venueId, reportType, startDate])
  @@index([status, createdAt])
  @@map("safety_reports")
}

model IncidentReport {
  id                    String                @id @default(cuid())
  incidentNumber        String                @unique // Auto-generated incident number
  title                 String
  description           String
  incidentType          IncidentType
  severity              IncidentSeverity      @default(MEDIUM)
  status                IncidentStatus        @default(REPORTED)
  venueId               String
  childId               String?
  reportedBy            String
  assignedTo            String?
  location              Json?                 // Specific location where incident occurred
  zoneId                String?
  cameraId              String?
  involvedPersons       Json                  // People involved in the incident
  witnesses             Json?                 // Witness information
  evidenceUrls          String[]              // Photos, videos, documents
  timeline              Json                  // Chronological timeline of events
  rootCause             String?
  contributingFactors   Json?                 // Factors that contributed to incident
  responseActions       Json                  // Actions taken in response
  preventiveActions     Json?                 // Actions to prevent recurrence
  followUpRequired      Boolean               @default(false)
  followUpDate          DateTime?
  followUpNotes         String?
  regulatoryNotification Boolean              @default(false)
  insuranceClaim        Boolean               @default(false)
  incidentOccurredAt    DateTime
  reportedAt            DateTime              @default(now())
  acknowledgedAt        DateTime?
  investigationStartedAt DateTime?
  resolvedAt            DateTime?
  closedAt              DateTime?
  responseTime          Int?                  // Time to first response in minutes
  resolutionTime        Int?                  // Time to resolution in minutes
  cost                  Float?                // Associated costs
  legalImplications     String?
  parentNotified        Boolean               @default(false)
  parentNotifiedAt      DateTime?
  authorityNotified     Boolean               @default(false)
  authorityNotifiedAt   DateTime?
  metadata              Json?
  venue                 Venue                 @relation("VenueIncidentReports", fields: [venueId], references: [id], onDelete: Cascade)
  child                 Child?                @relation("ChildIncidentReports", fields: [childId], references: [id])
  reporter              User                  @relation("UserReportedIncidents", fields: [reportedBy], references: [id])
  assignee              User?                 @relation("UserAssignedIncidents", fields: [assignedTo], references: [id])
  zone                  FloorPlanZone?        @relation("ZoneIncidentReports", fields: [zoneId], references: [id])
  camera                Camera?               @relation("CameraIncidentReports", fields: [cameraId], references: [id])
  
  @@index([venueId, incidentOccurredAt])
  @@index([status, severity])
  @@index([incidentType, incidentOccurredAt])
  @@map("incident_reports")
}

model CameraPerformance {
  id                    String              @id @default(cuid())
  cameraId              String
  venueId               String
  date                  DateTime            // Date of the performance record
  uptimePercentage      Float               @default(0.0)
  totalUptime           Int                 @default(0) // Minutes
  totalDowntime         Int                 @default(0) // Minutes
  detectionCount        Int                 @default(0) // Total detections
  faceDetectionCount    Int                 @default(0) // Face detections
  accurateDetections    Int                 @default(0) // Verified accurate detections
  falsePositives        Int                 @default(0) // False positive detections
  accuracyRate          Float               @default(0.0) // Percentage accuracy
  avgConfidenceScore    Float               @default(0.0) // Average confidence
  alertsGenerated       Int                 @default(0) // Alerts generated by camera
  coverageEffectiveness Float               @default(0.0) // Coverage effectiveness score
  dataTransmitted       Int                 @default(0) // MB of data transmitted
  storageUsed           Int                 @default(0) // MB of storage used
  maintenanceEvents     Int                 @default(0) // Maintenance interventions
  errorCount            Int                 @default(0) // Technical errors
  lastCalibration       DateTime?           // Last calibration date
  performanceScore      Float               @default(0.0) // Overall performance score
  utilizationRate       Float               @default(0.0) // How much the camera was used
  criticalEvents        Int                 @default(0) // Critical events detected
  responseTime          Float               @default(0.0) // Average response time to events
  metadata              Json?               // Additional performance metrics
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  camera                Camera              @relation("CameraPerformanceRecords", fields: [cameraId], references: [id], onDelete: Cascade)
  venue                 Venue               @relation("VenueCameraPerformance", fields: [venueId], references: [id], onDelete: Cascade)
  
  @@unique([cameraId, date])
  @@index([venueId, date])
  @@map("camera_performance")
}

model ParentEngagement {
  id                        String              @id @default(cuid())
  userId                    String
  venueId                   String?
  date                      DateTime
  sessionCount              Int                 @default(0) // App sessions
  totalSessionDuration      Int                 @default(0) // Minutes
  averageSessionDuration    Float               @default(0.0) // Minutes
  photosViewed              Int                 @default(0)
  photosShared              Int                 @default(0)
  photosPurchased           Int                 @default(0)
  notificationsReceived     Int                 @default(0)
  notificationsRead         Int                 @default(0)
  notificationResponseTime  Float               @default(0.0) // Average response time in minutes
  checkInsInitiated         Int                 @default(0)
  checkOutsInitiated        Int                 @default(0)
  alertsReceived            Int                 @default(0)
  alertsAcknowledged        Int                 @default(0)
  emergencyContactsUpdated  Int                 @default(0)
  profileUpdates            Int                 @default(0)
  feedbackSubmitted         Int                 @default(0)
  supportTicketsCreated     Int                 @default(0)
  appRating                 Float?              // App rating if provided
  npsScore                  Int?                // Net Promoter Score
  featureUsage              Json                // Usage of specific features
  deviceType                String?             // iOS, Android, Web
  lastActiveAt              DateTime?
  engagementScore           Float               @default(0.0) // Calculated engagement score
  satisfactionScore         Float               @default(0.0) // Parent satisfaction score
  retentionRisk             RiskLevel           @default(LOW) // Risk of parent churning
  metadata                  Json?
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  user                      User                @relation("UserEngagementMetrics", fields: [userId], references: [id], onDelete: Cascade)
  venue                     Venue?              @relation("VenueParentEngagement", fields: [venueId], references: [id])
  
  @@unique([userId, venueId, date])
  @@index([venueId, date])
  @@index([engagementScore, date])
  @@map("parent_engagement")
}

model TrafficPattern {
  id                    String              @id @default(cuid())
  venueId               String
  zoneId                String?
  date                  DateTime
  hour                  Int                 // Hour of the day (0-23)
  dayOfWeek             Int                 // Day of week (0-6, 0=Sunday)
  childCount            Int                 @default(0) // Number of unique children
  adultCount            Int                 @default(0) // Number of adults detected
  totalOccupancy        Int                 @default(0) // Total people in area
  peakOccupancy         Int                 @default(0) // Peak occupancy during hour
  averageDwellTime      Float               @default(0.0) // Average time spent in area (minutes)
  entryCount            Int                 @default(0) // People entering area
  exitCount             Int                 @default(0) // People leaving area
  throughTraffic        Int                 @default(0) // People passing through
  movementDensity       Float               @default(0.0) // Movement density score
  congestionLevel       CongestionLevel     @default(LOW) // Congestion level
  popularityScore       Float               @default(0.0) // Area popularity score
  safetyIncidents       Int                 @default(0) // Safety incidents in hour
  emergencyEvents       Int                 @default(0) // Emergency events
  ageGroupDistribution  Json                // Age group breakdown
  activityLevel         ActivityLevel       @default(NORMAL) // Activity level
  weatherConditions     String?             // Weather if outdoor venue
  specialEvents         String?             // Special events affecting traffic
  holidayFlag           Boolean             @default(false) // Holiday indicator
  schoolDayFlag         Boolean             @default(true) // School day indicator
  capacityUtilization   Float               @default(0.0) // Percentage of capacity used
  efficiency            Float               @default(0.0) // Traffic flow efficiency
  bottlenecks           Json?               // Identified bottlenecks
  recommendations       Json?               // Traffic optimization recommendations
  metadata              Json?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  venue                 Venue               @relation("VenueTrafficPatterns", fields: [venueId], references: [id], onDelete: Cascade)
  zone                  FloorPlanZone?      @relation("ZoneTrafficPatterns", fields: [zoneId], references: [id])
  
  @@unique([venueId, zoneId, date, hour])
  @@index([venueId, date])
  @@index([congestionLevel, date])
  @@map("traffic_patterns")
}

model PerformanceMetric {
  id                String              @id @default(cuid())
  metricType        MetricType
  name              String
  description       String?
  venueId           String?             // null for system-wide metrics
  category          MetricCategory
  value             Float
  unit              String?
  target            Float?              // Target value for the metric
  threshold         Json?               // Alert thresholds (low, medium, high)
  previousValue     Float?              // Previous period value for comparison
  changePercentage  Float?              // Percentage change from previous period
  trend             TrendDirection      @default(STABLE)
  benchmark         Float?              // Industry benchmark
  benchmarkSource   String?             // Source of benchmark data
  period            ReportPeriod
  periodStart       DateTime
  periodEnd         DateTime
  calculationMethod String?             // How the metric was calculated
  dataPoints        Int                 @default(0) // Number of data points used
  confidence        Float               @default(1.0) // Confidence in the metric
  status            MetricStatus        @default(NORMAL)
  formula           String?             // Formula used for calculation
  dependencies      String[]            // Other metrics this depends on
  tags              String[]            // Tags for categorization
  isKPI             Boolean             @default(false) // Key Performance Indicator
  isPublic          Boolean             @default(false) // Can be shared publicly
  automaticUpdate   Boolean             @default(true) // Auto-update from data
  lastCalculated    DateTime            @default(now())
  nextCalculation   DateTime?           // When to recalculate
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  venue             Venue?              @relation("VenuePerformanceMetrics", fields: [venueId], references: [id])
  
  @@index([venueId, category, period])
  @@index([metricType, periodStart])
  @@index([isKPI, status])
  @@map("performance_metrics")
}

model ReportSchedule {
  id                String              @id @default(cuid())
  name              String
  description       String?
  reportType        SafetyReportType
  venueId           String?             // null for multi-venue reports
  frequency         ScheduleFrequency
  dayOfWeek         Int?                // For weekly reports (0-6)
  dayOfMonth        Int?                // For monthly reports (1-31)
  time              String              // HH:MM format
  timezone          String              @default("UTC")
  isActive          Boolean             @default(true)
  recipients        String[]            // Email addresses
  format            ReportFormat        @default(PDF)
  template          String?             // Report template ID
  filters           Json?               // Report filters and parameters
  lastGenerated     DateTime?
  nextScheduled     DateTime?
  generationCount   Int                 @default(0)
  failureCount      Int                 @default(0)
  lastError         String?
  retryAttempts     Int                 @default(0)
  maxRetries        Int                 @default(3)
  createdBy         String
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  venue             Venue?              @relation("VenueReportSchedules", fields: [venueId], references: [id])
  creator           User                @relation("UserCreatedSchedules", fields: [createdBy], references: [id])
  reports           SafetyReport[]
  
  @@index([isActive, nextScheduled])
  @@index([venueId, frequency])
  @@map("report_schedules")
}

model AnalyticsConfig {
  id                        String              @id @default(cuid())
  venueId                   String?             // null for system-wide config
  configType                AnalyticsConfigType
  name                      String
  description               String?
  settings                  Json                // Configuration settings
  isActive                  Boolean             @default(true)
  version                   Int                 @default(1)
  dataRetentionDays         Int                 @default(365)
  processingInterval        Int                 @default(60) // Minutes
  alertThresholds           Json?               // Alert threshold configurations
  calculationRules          Json?               // Custom calculation rules
  businessRules             Json?               // Business-specific rules
  aggregationSettings       Json?               // Data aggregation settings
  exportSettings            Json?               // Export configurations
  privacySettings           Json?               // Privacy and anonymization settings
  performanceSettings       Json?               // Performance optimization settings
  integrationSettings       Json?               // Third-party integration settings
  notificationSettings      Json?               // Notification configurations
  dashboardSettings         Json?               // Dashboard customization
  reportingSettings         Json?               // Reporting preferences
  lastApplied               DateTime?
  appliedBy                 String?
  validationRules           Json?               // Data validation rules
  qualityThresholds         Json?               // Data quality thresholds
  metadata                  Json?
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  venue                     Venue?              @relation("VenueAnalyticsConfigs", fields: [venueId], references: [id])
  applier                   User?               @relation("UserAppliedConfigs", fields: [appliedBy], references: [id])
  
  @@unique([venueId, configType, name])
  @@index([isActive, configType])
  @@map("analytics_configs")
}



// Analytics Enums

enum AnalyticsEventType {
  CHILD_ENTRY
  CHILD_EXIT
  CHILD_MOVEMENT
  ALERT_GENERATED
  ALERT_RESOLVED
  INCIDENT_REPORTED
  INCIDENT_RESOLVED
  CAMERA_STATUS_CHANGE
  SYSTEM_ERROR
  USER_ACTION
  PARENT_ENGAGEMENT
  PHOTO_CAPTURED
  PHOTO_PURCHASED
  CHECK_IN
  CHECK_OUT
  EMERGENCY_ACTIVATION
  STAFF_RESPONSE
  PERFORMANCE_THRESHOLD
  CAPACITY_REACHED
  TRAFFIC_PATTERN
  SECURITY_EVENT
  MAINTENANCE_EVENT
  COMPLIANCE_EVENT
  BUSINESS_METRIC
  CUSTOM_EVENT
}

enum EventCategory {
  SAFETY
  SECURITY
  OPERATIONAL
  PERFORMANCE
  ENGAGEMENT
  BUSINESS
  TECHNICAL
  COMPLIANCE
  ANALYTICS
  USER_BEHAVIOR
  SYSTEM_HEALTH
  MAINTENANCE
}

enum SafetyReportType {
  DAILY_SUMMARY
  WEEKLY_SUMMARY
  MONTHLY_SUMMARY
  QUARTERLY_SUMMARY
  ANNUAL_SUMMARY
  INCIDENT_ANALYSIS
  PERFORMANCE_REVIEW
  TRAFFIC_ANALYSIS
  ENGAGEMENT_REPORT
  CAMERA_PERFORMANCE
  SAFETY_COMPLIANCE
  EXECUTIVE_DASHBOARD
  OPERATIONAL_EFFICIENCY
  TREND_ANALYSIS
  COMPARATIVE_ANALYSIS
  CUSTOM_REPORT
}

enum ReportPeriod {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

enum ReportFormat {
  PDF
  EXCEL
  CSV
  JSON
  HTML
  POWERPOINT
}

enum ReportStatus {
  GENERATING
  COMPLETED
  FAILED
  CANCELLED
  SCHEDULED
  EXPIRED
}

enum DeliveryStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

enum IncidentType {
  INJURY
  MEDICAL_EMERGENCY
  MISSING_CHILD
  UNAUTHORIZED_ACCESS
  EQUIPMENT_FAILURE
  SECURITY_BREACH
  EVACUATION
  BEHAVIORAL_INCIDENT
  PROPERTY_DAMAGE
  ENVIRONMENTAL_HAZARD
  SYSTEM_FAILURE
  STAFF_INCIDENT
  PARENT_COMPLAINT
  SAFETY_VIOLATION
  REGULATORY_ISSUE
  OTHER
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  CATASTROPHIC
}

enum IncidentStatus {
  REPORTED
  ACKNOWLEDGED
  INVESTIGATING
  IN_PROGRESS
  RESOLVED
  CLOSED
  REOPENED
  ESCALATED
}

enum CongestionLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActivityLevel {
  QUIET
  NORMAL
  BUSY
  PEAK
  OVERWHELMING
}

enum MetricType {
  SAFETY_SCORE
  RESPONSE_TIME
  INCIDENT_RATE
  CAMERA_UPTIME
  DETECTION_ACCURACY
  PARENT_SATISFACTION
  ENGAGEMENT_RATE
  OCCUPANCY_RATE
  TRAFFIC_FLOW
  OPERATIONAL_EFFICIENCY
  COST_PER_INCIDENT
  RESOLUTION_TIME
  COMPLIANCE_SCORE
  PERFORMANCE_INDEX
  UTILIZATION_RATE
  QUALITY_SCORE
  GROWTH_RATE
  RETENTION_RATE
  CONVERSION_RATE
  CUSTOM_METRIC
}

enum MetricCategory {
  SAFETY
  SECURITY
  OPERATIONAL
  FINANCIAL
  CUSTOMER
  QUALITY
  PERFORMANCE
  COMPLIANCE
  EFFICIENCY
  GROWTH
}

enum TrendDirection {
  INCREASING
  DECREASING
  STABLE
  FLUCTUATING
  UNKNOWN
}

enum MetricStatus {
  NORMAL
  WARNING
  CRITICAL
  IMPROVING
  DETERIORATING
  TARGET_MET
  NEEDS_ATTENTION
}

enum ScheduleFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

enum AnalyticsConfigType {
  DATA_COLLECTION
  REPORTING
  ALERTING
  PERFORMANCE
  PRIVACY
  INTEGRATION
  DASHBOARD
  EXPORT
  CALCULATION
  BUSINESS_RULES
}

// Digital Check-in/Check-out System Models

model ChildQRCode {
  id                String              @id @default(cuid())
  childId           String
  qrCode            String              @unique
  qrData            Json                // Encrypted child data in QR code
  isActive          Boolean             @default(true)
  expiresAt         DateTime?           // Time-limited QR codes
  usageCount        Int                 @default(0)
  maxUsage          Int?                // Maximum number of uses
  lastUsedAt        DateTime?
  lastUsedBy        String?             // Staff member who last used it
  purpose           ChildQRPurpose      @default(CHECK_IN_OUT)
  securityLevel     QRSecurityLevel     @default(STANDARD)
  generatedBy       String              // Staff member who generated it
  regenerationCount Int                 @default(0)
  parentAccessible  Boolean             @default(true) // Can parent access this QR code
  printedCount      Int                 @default(0)
  sharedCount       Int                 @default(0)
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  child             Child               @relation(fields: [childId], references: [id], onDelete: Cascade)
  checkInEvents     CheckInOutEvent[]   @relation("ChildQRCheckInEvents")
  
  @@index([childId, isActive])
  @@index([qrCode])
  @@map("child_qr_codes")
}

model ParentQRCode {
  id                String              @id @default(cuid())
  parentId          String
  qrCode            String              @unique
  qrData            Json                // Encrypted parent data in QR code
  linkedChildren    String[]            // Child IDs linked to this parent QR
  isActive          Boolean             @default(true)
  expiresAt         DateTime?
  usageCount        Int                 @default(0)
  maxUsage          Int?
  lastUsedAt        DateTime?
  lastUsedBy        String?
  purpose           ParentQRPurpose     @default(PICKUP_AUTHORIZATION)
  securityLevel     QRSecurityLevel     @default(HIGH)
  biometricRequired Boolean             @default(true)
  emergencyOverride Boolean             @default(false)
  generatedBy       String
  regenerationCount Int                 @default(0)
  printedCount      Int                 @default(0)
  backupCodes       String[]            // Backup codes for emergency access
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  parent            User                @relation("ParentQRCodes", fields: [parentId], references: [id], onDelete: Cascade)
  pickupEvents      PickupAuthorization[] @relation("ParentQRPickupEvents")
  
  @@index([parentId, isActive])
  @@index([qrCode])
  @@map("parent_qr_codes")
}

model PickupAuthorization {
  id                    String                    @id @default(cuid())
  childId               String
  parentId              String?                   // Primary parent
  authorizedPersonName  String
  authorizedPersonId    String?                   // Government ID or internal ID
  relationship          String
  phoneNumber           String
  email                 String?
  photoIdUrl            String?                   // Photo of ID document
  biometricId           String?                   // Biometric identifier
  emergencyContact      Boolean                   @default(false)
  isPermanent           Boolean                   @default(false)
  validFrom             DateTime                  @default(now())
  validUntil            DateTime?
  status                PickupAuthStatus          @default(PENDING)
  approvedBy            String?                   // Staff who approved
  approvedAt            DateTime?
  rejectedReason        String?
  specialInstructions   String?
  requiresBiometric     Boolean                   @default(true)
  requiresPhotoId       Boolean                   @default(true)
  requiresSecondaryAuth Boolean                   @default(false)
  usageCount            Int                       @default(0)
  maxUsage              Int?
  lastUsedAt            DateTime?
  authorizationCode     String?                   // Special code for verification
  parentQRCodeId        String?
  custodyDocuments      String[]                  // Legal custody documents
  backgroundCheckStatus BackgroundCheckStatus?
  backgroundCheckDate   DateTime?
  notes                 String?
  metadata              Json?
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  child                 Child                     @relation(fields: [childId], references: [id], onDelete: Cascade)
  parent                User?                     @relation("ParentPickupAuth", fields: [parentId], references: [id])
  parentQRCode          ParentQRCode?             @relation("ParentQRPickupEvents", fields: [parentQRCodeId], references: [id])
  pickupEvents          PickupEvent[]
  
  @@index([childId, status])
  @@index([authorizedPersonName, phoneNumber])
  @@map("pickup_authorizations")
}

model PickupEvent {
  id                      String                @id @default(cuid())
  checkInOutEventId       String?               @unique // Link to main check-in/out event
  pickupAuthorizationId   String
  childId                 String
  venueId                 String
  pickupPersonName        String
  pickupPersonId          String?
  verificationMethod      PickupVerificationMethod
  biometricVerified       Boolean               @default(false)
  photoIdVerified         Boolean               @default(false)
  qrCodeVerified          Boolean               @default(false)
  parentNotified          Boolean               @default(false)
  parentConfirmed         Boolean               @default(false)
  staffMemberId           String?               // Staff who processed pickup
  supervisorApproval      Boolean               @default(false)
  supervisorId            String?
  emergencyPickup         Boolean               @default(false)
  digitalSignature        String?               // Base64 encoded signature
  photoEvidence           String[]              // Photos taken during pickup
  videoEvidence           String[]              // Video recordings
  verificationScore       Float                 @default(0.0)
  riskAssessment          RiskLevel             @default(LOW)
  incidentReported        Boolean               @default(false)
  incidentId              String?
  processingTime          Int?                  // Time taken to process pickup in seconds
  parentResponseTime      Int?                  // Time for parent to respond to notification
  notes                   String?
  metadata                Json?
  timestamp               DateTime              @default(now())
  pickupAuthorization     PickupAuthorization   @relation(fields: [pickupAuthorizationId], references: [id])
  checkInOutEvent         CheckInOutEvent?      @relation("PickupEventCheckInOut", fields: [checkInOutEventId], references: [id])
  biometricVerifications  BiometricVerification[] @relation("BiometricPickupEvents")
  
  @@index([childId, timestamp])
  @@index([venueId, timestamp])
  @@map("pickup_events")
}

model MembershipPackage {
  id                    String                @id @default(cuid())
  name                  String
  description           String?
  venueId               String?               // null for company-wide packages
  packageType           MembershipType
  duration              Int                   // Duration in days
  price                 Float
  currency              String                @default("USD")
  benefits              Json                  // Package benefits and features
  checkInLimit          Int?                  // Max check-ins per period
  guestLimit            Int?                  // Max guests per visit
  photoCredits          Int?                  // Photo download credits
  videoCredits          Int?                  // Video download credits
  prioritySupport       Boolean               @default(false)
  discountPercentage    Float?                // Discount on additional services
  autoRenewal           Boolean               @default(false)
  isActive              Boolean               @default(true)
  minimumAge            Int?                  // Minimum child age
  maximumAge            Int?                  // Maximum child age
  familySize            Int?                  // Recommended family size
  terms                 String?               // Terms and conditions
  cancellationPolicy    String?
  refundPolicy          String?
  metadata              Json?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  venue                 Venue?                @relation("VenueMembershipPackages", fields: [venueId], references: [id])
  memberships           Membership[]
  transactions          POSTransaction[]      @relation("PackageTransactions")
  
  @@index([venueId, isActive])
  @@index([packageType, price])
  @@map("membership_packages")
}

model Membership {
  id                    String                @id @default(cuid())
  memberId              String                @unique // Member ID for easy lookup
  parentId              String
  packageId             String
  venueId               String?
  status                MembershipStatus      @default(ACTIVE)
  startDate             DateTime              @default(now())
  endDate               DateTime
  autoRenewal           Boolean               @default(false)
  renewalDate           DateTime?
  suspendedAt           DateTime?
  suspensionReason      String?
  cancelledAt           DateTime?
  cancellationReason    String?
  refundAmount          Float?
  refundProcessed       Boolean               @default(false)
  checkInsUsed          Int                   @default(0)
  checkInsRemaining     Int?
  photoCreditsUsed      Int                   @default(0)
  photoCreditsRemaining Int?
  videoCreditsUsed      Int                   @default(0)
  videoCreditsRemaining Int?
  totalSpent            Float                 @default(0.0)
  discountEligible      Boolean               @default(true)
  loyaltyPoints         Int                   @default(0)
  tierLevel             MembershipTier        @default(BRONZE)
  lastVisit             DateTime?
  visitCount            Int                   @default(0)
  averageSpendPerVisit  Float                 @default(0.0)
  referralCode          String?               // Unique referral code
  referredBy            String?               // Member who referred this member
  emergencyContacts     Json?                 // Emergency contact information
  specialRequests       String?               // Special requests or notes
  healthInformation     Json?                 // Health/allergy information
  communicationPrefs    Json?                 // Communication preferences
  metadata              Json?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  parent                User                  @relation("ParentMemberships", fields: [parentId], references: [id], onDelete: Cascade)
  package               MembershipPackage     @relation(fields: [packageId], references: [id])
  venue                 Venue?                @relation("VenueMemberships", fields: [venueId], references: [id])
  transactions          POSTransaction[]      @relation("MembershipTransactions")
  checkInEvents         CheckInOutEvent[]     @relation("MembershipCheckInEvents")
  
  @@index([parentId, status])
  @@index([venueId, status])
  @@index([memberId])
  @@map("memberships")
}

model POSTransaction {
  id                    String                @id @default(cuid())
  transactionId         String                @unique // External POS transaction ID
  venueId               String
  memberId              String?
  membershipId          String?
  packageId             String?
  checkInEventId        String?               @unique // Associated check-in event
  transactionType       TransactionType
  amount                Float
  tax                   Float                 @default(0.0)
  discount              Float                 @default(0.0)
  totalAmount           Float
  currency              String                @default("USD")
  paymentMethod         PaymentMethod
  paymentStatus         PaymentStatus         @default(PENDING)
  paymentGateway        String?               // Stripe, Square, etc.
  gatewayTransactionId  String?               // Gateway transaction ID
  items                 Json                  // Purchased items/services
  loyaltyPointsEarned   Int                   @default(0)
  loyaltyPointsUsed     Int                   @default(0)
  promoCode             String?               // Promo code used
  promoDiscount         Float                 @default(0.0)
  cashierId             String?               // Staff member who processed
  terminalId            String?               // POS terminal used
  receiptNumber         String?
  receiptUrl            String?               // Digital receipt URL
  refunded              Boolean               @default(false)
  refundAmount          Float?
  refundReason          String?
  refundedAt            DateTime?
  billingAddress        Json?
  shippingAddress       Json?
  customerNotes         String?
  internalNotes         String?
  processingTime        Int?                  // Processing time in seconds
  errorMessage          String?
  metadata              Json?
  timestamp             DateTime              @default(now())
  venue                 Venue                 @relation("VenuePOSTransactions", fields: [venueId], references: [id])
  membership            Membership?           @relation("MembershipTransactions", fields: [membershipId], references: [id])
  package               MembershipPackage?    @relation("PackageTransactions", fields: [packageId], references: [id])
  checkInEvent          CheckInOutEvent?      @relation("TransactionCheckInEvents", fields: [checkInEventId], references: [id])
  
  @@index([venueId, timestamp])
  @@index([transactionType, paymentStatus])
  @@index([memberId, timestamp])
  @@map("pos_transactions")
}

model BiometricVerification {
  id                    String                    @id @default(cuid())
  checkInEventId        String?                   // Associated check-in event
  pickupEventId         String?                   // Associated pickup event
  personType            BiometricPersonType
  personId              String                    // Child ID or User ID
  verificationType      BiometricVerificationType
  capturedBiometric     String                    // S3 key for captured biometric
  storedBiometric       String?                   // S3 key for stored biometric
  matchConfidence       Float?                    // Matching confidence score
  verificationResult    BiometricResult           @default(PENDING)
  awsRekognitionResponse Json?                    // Raw AWS response
  processingTime        Int?                      // Processing time in milliseconds
  fallbackMethod        String?                   // Fallback verification used
  deviceInfo            Json?                     // Device/camera information
  environmentalFactors  Json?                     // Lighting, angle, etc.
  qualityScore          Float?                    // Biometric quality score
  livenessDetected      Boolean?                  // Liveness detection result
  spoofingDetected      Boolean                   @default(false)
  retryCount            Int                       @default(0)
  errorCode             String?
  errorMessage          String?
  staffOverride         Boolean                   @default(false)
  staffOverrideReason   String?
  overrideStaffId       String?
  auditLog              Json                      // Detailed audit information
  metadata              Json?
  timestamp             DateTime                  @default(now())
  checkInEvent          CheckInOutEvent?          @relation("BiometricCheckInEvents", fields: [checkInEventId], references: [id])
  pickupEvent           PickupEvent?              @relation("BiometricPickupEvents", fields: [pickupEventId], references: [id])
  
  @@index([personId, verificationType])
  @@index([verificationResult, timestamp])
  @@map("biometric_verifications")
}

model CheckInKiosk {
  id                    String                @id @default(cuid())
  kioskId               String                @unique // Physical kiosk identifier
  name                  String
  venueId               String
  location              String                // Physical location in venue
  kioskType             KioskType
  status                KioskStatus           @default(OFFLINE)
  ipAddress             String?
  macAddress            String?
  operatingSystem       String?
  hardware              Json?                 // Hardware specifications
  software              Json?                 // Software versions
  capabilities          KioskCapability[]     // What the kiosk can do
  lastHeartbeat         DateTime?
  lastMaintenance       DateTime?
  nextMaintenance       DateTime?
  uptimePercentage      Float                 @default(0.0)
  totalTransactions     Int                   @default(0)
  dailyTransactions     Int                   @default(0)
  errorCount            Int                   @default(0)
  lastError             String?
  lastErrorAt           DateTime?
  maintenanceNotes      String?
  configurationVersion  String?
  securityStatus        SecurityStatus        @default(SECURE)
  encryptionEnabled     Boolean               @default(true)
  accessControlEnabled  Boolean               @default(true)
  biometricEnabled      Boolean               @default(false)
  qrScannerEnabled      Boolean               @default(true)
  printerEnabled        Boolean               @default(false)
  cameraEnabled         Boolean               @default(true)
  touchScreenEnabled    Boolean               @default(true)
  audioEnabled          Boolean               @default(true)
  networkConnected      Boolean               @default(false)
  powerStatus           PowerStatus           @default(UNKNOWN)
  batteryLevel          Float?                // For battery-powered kiosks
  temperatureStatus     TemperatureStatus     @default(NORMAL)
  storageUsed           Float                 @default(0.0) // GB
  memoryUsed            Float                 @default(0.0) // GB
  cpuUsage              Float                 @default(0.0) // Percentage
  diskUsage             Float                 @default(0.0) // Percentage
  performanceScore      Float                 @default(0.0)
  userRating            Float?                // User satisfaction rating
  metadata              Json?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  venue                 Venue                 @relation("VenueKiosks", fields: [venueId], references: [id], onDelete: Cascade)
  checkInEvents         CheckInOutEvent[]     @relation("KioskCheckInEvents")
  kioskSessions         KioskSession[]
  maintenanceLogs       KioskMaintenanceLog[]
  
  @@index([venueId, status])
  @@index([kioskType, status])
  @@map("check_in_kiosks")
}

model KioskSession {
  id                    String              @id @default(cuid())
  kioskId               String
  sessionId             String              @unique
  parentId              String?
  childrenIds           String[]            // Children being processed
  sessionType           KioskSessionType
  startTime             DateTime            @default(now())
  endTime               DateTime?
  duration              Int?                // Session duration in seconds
  completedSteps        String[]            // Completed workflow steps
  currentStep           String?
  status                KioskSessionStatus  @default(ACTIVE)
  language              String              @default("en")
  accessibilityMode     Boolean             @default(false)
  assistanceRequired    Boolean             @default(false)
  staffAssistance       String?             // Staff member who provided assistance
  errorEncountered      Boolean             @default(false)
  errorDetails          Json?
  userSatisfaction      Float?              // Session satisfaction rating
  feedback              String?
  totalInteractions     Int                 @default(0)
  screenTimeouts        Int                 @default(0)
  retryAttempts         Int                 @default(0)
  printedItems          String[]            // Items printed during session
  qrCodesScanned        String[]            // QR codes scanned
  photosCaptured        Int                 @default(0)
  biometricsVerified    Int                 @default(0)
  paymentsProcessed     Float               @default(0.0)
  membershipValidated   Boolean             @default(false)
  emergencyActivated    Boolean             @default(false)
  dataCollected         Json?               // Collected form data
  consentGiven          Json?               // User consents
  privacyAcknowledged   Boolean             @default(false)
  metadata              Json?
  kiosk                 CheckInKiosk        @relation(fields: [kioskId], references: [id], onDelete: Cascade)
  checkInEvents         CheckInOutEvent[]   @relation("SessionCheckInEvents")
  
  @@index([kioskId, startTime])
  @@index([parentId, sessionType])
  @@map("kiosk_sessions")
}

model KioskMaintenanceLog {
  id                    String              @id @default(cuid())
  kioskId               String
  maintenanceType       MaintenanceType
  title                 String
  description           String?
  severity              MaintenanceSeverity @default(LOW)
  status                MaintenanceStatus   @default(SCHEDULED)
  scheduledDate         DateTime?
  startedAt             DateTime?
  completedAt           DateTime?
  duration              Int?                // Duration in minutes
  technicianId          String?             // Staff member performing maintenance
  technicianName        String?
  vendorInfo            Json?               // External vendor information
  issuesFound           Json?               // Issues discovered
  partsReplaced         Json?               // Parts that were replaced
  softwareUpdated       Boolean             @default(false)
  configurationChanged  Boolean             @default(false)
  performanceImproved   Boolean             @default(false)
  costEstimate          Float?
  actualCost            Float?
  warrantyWork          Boolean             @default(false)
  preventiveMaintenance Boolean             @default(false)
  emergencyMaintenance  Boolean             @default(false)
  downtime              Int?                // Downtime in minutes
  impactAssessment      String?
  followUpRequired      Boolean             @default(false)
  followUpDate          DateTime?
  qualityRating         Float?              // Maintenance quality rating
  beforePhotos          String[]            // Photos before maintenance
  afterPhotos           String[]            // Photos after maintenance
  documentation         String[]            // Maintenance documentation
  notes                 String?
  metadata              Json?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  kiosk                 CheckInKiosk        @relation(fields: [kioskId], references: [id], onDelete: Cascade)
  
  @@index([kioskId, scheduledDate])
  @@index([status, severity])
  @@map("kiosk_maintenance_logs")
}

model WorkflowAutomation {
  id                    String                  @id @default(cuid())
  name                  String
  description           String?
  venueId               String?                 // null for system-wide workflows
  workflowType          WorkflowType
  triggerEvent          WorkflowTrigger
  triggerConditions     Json                    // Conditions that trigger the workflow
  actions               Json                    // Actions to execute
  isActive              Boolean                 @default(true)
  priority              WorkflowPriority        @default(NORMAL)
  executionOrder        Int                     @default(1)
  timeout               Int                     @default(300) // Timeout in seconds
  retryAttempts         Int                     @default(3)
  retryDelay            Int                     @default(60) // Retry delay in seconds
  failureAction         WorkflowFailureAction   @default(LOG_ERROR)
  notifyOnFailure       Boolean                 @default(true)
  notifyOnSuccess       Boolean                 @default(false)
  executionCount        Int                     @default(0)
  successCount          Int                     @default(0)
  failureCount          Int                     @default(0)
  averageExecutionTime  Float                   @default(0.0) // Average time in seconds
  lastExecuted          DateTime?
  lastSuccess           DateTime?
  lastFailure           DateTime?
  lastError             String?
  healthScore           Float                   @default(100.0)
  businessRules         Json?                   // Business-specific rules
  integrationSettings   Json?                   // Third-party integration settings
  auditSettings         Json?                   // Audit logging settings
  testMode              Boolean                 @default(false)
  scheduledMaintenance  DateTime?
  version               String                  @default("1.0")
  createdBy             String
  approvedBy            String?
  approvedAt            DateTime?
  metadata              Json?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  venue                 Venue?                  @relation("VenueWorkflows", fields: [venueId], references: [id])
  executions            WorkflowExecution[]
  
  @@index([workflowType, isActive])
  @@index([venueId, triggerEvent])
  @@map("workflow_automations")
}

model WorkflowExecution {
  id                    String                    @id @default(cuid())
  workflowId            String
  executionId           String                    @unique // Unique execution identifier
  triggerData           Json                      // Data that triggered the workflow
  status                WorkflowExecutionStatus   @default(RUNNING)
  startTime             DateTime                  @default(now())
  endTime               DateTime?
  duration              Int?                      // Duration in milliseconds
  stepsExecuted         Json                      // Steps that were executed
  currentStep           String?
  stepResults           Json?                     // Results from each step
  errorStep             String?
  errorMessage          String?
  errorDetails          Json?
  retryCount            Int                       @default(0)
  manualIntervention    Boolean                   @default(false)
  interventionReason    String?
  interventionBy        String?
  outputData            Json?                     // Final output data
  sideEffects           Json?                     // Any side effects or additional actions
  resourcesUsed         Json?                     // Resources consumed during execution
  performanceMetrics    Json?                     // Execution performance data
  logEntries            Json?                     // Detailed execution logs
  parentExecutionId     String?                   // Parent workflow execution
  childExecutions       String[]                  // Child workflow executions
  correlationId         String?                   // For tracking related executions
  externalReferences    Json?                     // External system references
  qualityScore          Float?                    // Execution quality assessment
  businessImpact        String?                   // Business impact description
  metadata              Json?
  workflow              WorkflowAutomation        @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  @@index([workflowId, startTime])
  @@index([status, startTime])
  @@map("workflow_executions")
}

model SecurityAuditLog {
  id                    String                @id @default(cuid())
  eventType             SecurityEventType
  category              SecurityCategory
  severity              SecuritySeverity      @default(LOW)
  source                SecuritySource
  userId                String?               // User involved in the event
  venueId               String?               // Venue where event occurred
  childId               String?               // Child involved if applicable
  targetResource        String?               // Resource being accessed/modified
  action                String                // Action being performed
  result                SecurityResult        @default(SUCCESS)
  ipAddress             String?
  userAgent             String?
  deviceInfo            Json?                 // Device information
  location              Json?                 // Geographic location
  sessionId             String?
  requestId             String?
  method                String?               // HTTP method or API method
  endpoint              String?               // API endpoint or page
  requestData           Json?                 // Request parameters (sanitized)
  responseCode          String?               // Response code
  responseTime          Int?                  // Response time in milliseconds
  dataAccessed          Json?                 // Data that was accessed
  dataModified          Json?                 // Data that was modified
  sensitiveDataInvolved Boolean               @default(false)
  complianceFlags       String[]              // Compliance-related flags
  riskScore             Float                 @default(0.0)
  alertTriggered        Boolean               @default(false)
  alertId               String?               // Associated alert ID
  investigationRequired Boolean               @default(false)
  investigationId       String?
  mitigationApplied     Boolean               @default(false)
  mitigationDetails     String?
  forensicData          Json?                 // Forensic information
  correlatedEvents      String[]              // Related security events
  externalReferences    Json?                 // External security tools references
  regulatoryImpact      String?               // Regulatory compliance impact
  businessImpact        SecurityImpact        @default(NONE)
  costImpact            Float?                // Estimated cost impact
  resolutionTime        Int?                  // Time to resolution in minutes
  lessonsLearned        String?
  preventiveActions     Json?                 // Actions to prevent recurrence
  metadata              Json?
  timestamp             DateTime              @default(now())
  
  @@index([eventType, timestamp])
  @@index([severity, timestamp])
  @@index([userId, timestamp])
  @@index([venueId, timestamp])
  @@map("security_audit_logs")
}

model ComplianceReport {
  id                    String                @id @default(cuid())
  reportType            ComplianceReportType
  standard              ComplianceStandard
  venueId               String?               // null for company-wide reports
  period                ReportPeriod
  startDate             DateTime
  endDate               DateTime
  status                ComplianceStatus      @default(IN_PROGRESS)
  overallScore          Float                 @default(0.0)
  maxScore              Float                 @default(100.0)
  passingScore          Float                 @default(80.0)
  complianceLevel       ComplianceLevel       @default(BASIC)
  areas                 Json                  // Compliance areas assessed
  findings              Json                  // Detailed findings
  violations            Json                  // Compliance violations
  recommendations       Json                  // Remediation recommendations
  actionPlan            Json                  // Action plan for improvements
  evidence              String[]              // Supporting evidence files
  auditorName           String?
  auditorCredentials    String?
  auditFirm             String?
  certificationBody     String?
  certificationNumber   String?
  certificationDate     DateTime?
  expirationDate        DateTime?
  renewalDate           DateTime?
  publicationDate       DateTime?
  confidentialityLevel  ConfidentialityLevel  @default(INTERNAL)
  stakeholders          Json?                 // Relevant stakeholders
  distributionList      String[]              // Report distribution list
  followUpRequired      Boolean               @default(false)
  followUpDate          DateTime?
  costOfCompliance      Float?
  costOfNonCompliance   Float?
  riskAssessment        Json?                 // Associated risk assessment
  mitigationPlan        Json?                 // Risk mitigation plan
  monitoringPlan        Json?                 // Ongoing monitoring plan
  reportUrl             String?               // Generated report URL
  reportFormat          ReportFormat          @default(PDF)
  digitalSignature      String?               // Digital signature for authenticity
  version               String                @default("1.0")
  revisionHistory       Json?                 // Revision history
  approvedBy            String?
  approvalDate          DateTime?
  publishedBy           String?
  metadata              Json?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  venue                 Venue?                @relation("VenueComplianceReports", fields: [venueId], references: [id])
  
  @@index([reportType, standard])
  @@index([venueId, period])
  @@index([status, overallScore])
  @@map("compliance_reports")
}

// Enhanced Enums for Digital Check-in/Check-out System

enum ChildQRPurpose {
  CHECK_IN_OUT
  IDENTIFICATION
  EMERGENCY
  MEDICAL_INFO
  PARENT_CONTACT
  SPECIAL_NEEDS
}

enum ParentQRPurpose {
  PICKUP_AUTHORIZATION
  EMERGENCY_CONTACT
  PAYMENT_METHOD
  MEMBERSHIP_ACCESS
  STAFF_COMMUNICATION
}

enum QRSecurityLevel {
  BASIC              // Simple QR code with minimal encryption
  STANDARD           // Standard encryption and validation
  HIGH               // Advanced encryption with time limits
  MAXIMUM            // Maximum security with biometric requirement
}

enum PickupAuthStatus {
  PENDING            // Awaiting approval
  APPROVED           // Approved for pickup
  REJECTED           // Rejected
  SUSPENDED          // Temporarily suspended
  EXPIRED            // Authorization expired
  REVOKED            // Permanently revoked
}

enum BackgroundCheckStatus {
  NOT_REQUIRED
  PENDING
  IN_PROGRESS
  PASSED
  FAILED
  EXPIRED
  NEEDS_RENEWAL
}

enum PickupVerificationMethod {
  QR_CODE_ONLY
  BIOMETRIC_ONLY
  QR_PLUS_BIOMETRIC
  ID_PLUS_BIOMETRIC
  STAFF_VERIFICATION
  EMERGENCY_OVERRIDE
  PARENT_CONFIRMATION
  MULTI_FACTOR
}

enum MembershipType {
  DAILY_PASS
  WEEKLY_PASS
  MONTHLY
  QUARTERLY
  ANNUAL
  FAMILY_PLAN
  STUDENT_DISCOUNT
  SENIOR_DISCOUNT
  CORPORATE
  VIP_PREMIUM
  TRIAL
  GIFT_MEMBERSHIP
}

enum MembershipStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  CANCELLED
  EXPIRED
  PENDING_RENEWAL
  PENDING_PAYMENT
  REFUNDED
}

enum MembershipTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
  VIP
}

enum TransactionType {
  MEMBERSHIP_PURCHASE
  MEMBERSHIP_RENEWAL
  DAILY_PASS
  PHOTO_PURCHASE
  VIDEO_PURCHASE
  MERCHANDISE
  FOOD_BEVERAGE
  PARTY_BOOKING
  ADDITIONAL_SERVICES
  LATE_FEE
  REFUND
  GIFT_CARD
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  DIGITAL_WALLET
  BANK_TRANSFER
  CRYPTOCURRENCY
  GIFT_CARD
  LOYALTY_POINTS
  STORE_CREDIT
  CHECK
  MEMBERSHIP_CREDIT
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  CANCELLED
  DISPUTED
  CHARGEBACK
}

enum BiometricPersonType {
  CHILD
  PARENT
  GUARDIAN
  AUTHORIZED_PERSON
  STAFF_MEMBER
  VISITOR
}

enum BiometricVerificationType {
  FACE_RECOGNITION
  FINGERPRINT
  PALM_PRINT
  IRIS_SCAN
  VOICE_RECOGNITION
  BEHAVIORAL_PATTERN
  MULTI_BIOMETRIC
}

enum BiometricResult {
  PENDING
  MATCH
  NO_MATCH
  PARTIAL_MATCH
  ERROR
  TIMEOUT
  RETRY_REQUIRED
  QUALITY_TOO_LOW
  STAFF_OVERRIDE
}

enum KioskType {
  CHECK_IN_TERMINAL
  CHECK_OUT_TERMINAL
  DUAL_PURPOSE
  INFORMATION_KIOSK
  PAYMENT_KIOSK
  PHOTO_KIOSK
  EMERGENCY_STATION
  MOBILE_TABLET
}

enum KioskStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
  ERROR
  REBOOTING
  UPDATING
  IDLE
  BUSY
  OUT_OF_ORDER
}

enum KioskCapability {
  QR_SCANNING
  BIOMETRIC_CAPTURE
  PHOTO_CAPTURE
  PRINTING
  PAYMENT_PROCESSING
  AUDIO_PLAYBACK
  VIDEO_PLAYBACK
  ACCESSIBILITY_FEATURES
  MULTI_LANGUAGE
  SIGNATURE_CAPTURE
  DOCUMENT_SCANNING
  PHONE_CALLING
}

enum SecurityStatus {
  SECURE
  WARNING
  COMPROMISED
  UNKNOWN
  UPDATING
}

enum PowerStatus {
  AC_POWER
  BATTERY_POWER
  LOW_BATTERY
  CRITICAL_BATTERY
  CHARGING
  UNKNOWN
}

enum TemperatureStatus {
  NORMAL
  WARNING
  CRITICAL
  COOLING
  HEATING
  UNKNOWN
}

enum KioskSessionType {
  CHECK_IN
  CHECK_OUT
  INFORMATION_LOOKUP
  PAYMENT
  PHOTO_PURCHASE
  MEMBERSHIP_SIGNUP
  EMERGENCY_CONTACT
  FEEDBACK_SUBMISSION
}

enum KioskSessionStatus {
  ACTIVE
  COMPLETED
  ABANDONED
  ERROR
  TIMEOUT
  ASSISTANCE_REQUIRED
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
  SOFTWARE_UPDATE
  HARDWARE_UPGRADE
  CLEANING
  CALIBRATION
  SECURITY_PATCH
  PERFORMANCE_OPTIMIZATION
}

enum MaintenanceSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  EMERGENCY
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DELAYED
  FAILED
  NEEDS_PARTS
  WAITING_APPROVAL
}

enum WorkflowType {
  CHECK_IN_PROCESS
  CHECK_OUT_PROCESS
  PICKUP_VERIFICATION
  BIOMETRIC_ENROLLMENT
  MEMBERSHIP_ONBOARDING
  PAYMENT_PROCESSING
  INCIDENT_RESPONSE
  EMERGENCY_PROCEDURE
  COMPLIANCE_CHECK
  AUTOMATED_ALERT
  REPORT_GENERATION
  SYSTEM_MAINTENANCE
}

enum WorkflowTrigger {
  MANUAL_TRIGGER
  SCHEDULED_TIME
  EVENT_DRIVEN
  CONDITION_MET
  API_CALL
  USER_ACTION
  SYSTEM_ALERT
  EXTERNAL_WEBHOOK
  DATA_CHANGE
  THRESHOLD_EXCEEDED
}

enum WorkflowPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

enum WorkflowFailureAction {
  LOG_ERROR
  RETRY_LATER
  ESCALATE_TO_STAFF
  SEND_ALERT
  ROLLBACK_CHANGES
  ACTIVATE_FALLBACK
  HALT_EXECUTION
  CONTINUE_WITH_WARNING
}

enum WorkflowExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  PAUSED
  RETRYING
  REQUIRES_INTERVENTION
}

enum SecurityEventType {
  LOGIN_ATTEMPT
  LOGOUT
  UNAUTHORIZED_ACCESS
  DATA_ACCESS
  DATA_MODIFICATION
  PERMISSION_CHANGE
  CONFIGURATION_CHANGE
  SYSTEM_INTRUSION
  MALWARE_DETECTION
  PHISHING_ATTEMPT
  BRUTE_FORCE_ATTACK
  PRIVILEGE_ESCALATION
  DATA_EXPORT
  BACKUP_ACCESS
  API_ABUSE
  SUSPICIOUS_ACTIVITY
}

enum SecurityCategory {
  AUTHENTICATION
  AUTHORIZATION
  DATA_PROTECTION
  NETWORK_SECURITY
  APPLICATION_SECURITY
  ENDPOINT_SECURITY
  INCIDENT_RESPONSE
  COMPLIANCE
  MONITORING
  FORENSICS
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  CATASTROPHIC
}

enum SecuritySource {
  WEB_APPLICATION
  MOBILE_APP
  API_GATEWAY
  DATABASE
  FILE_SYSTEM
  NETWORK_DEVICE
  SECURITY_TOOL
  MANUAL_ENTRY
  AUTOMATED_SYSTEM
  THIRD_PARTY_SERVICE
}

enum SecurityResult {
  SUCCESS
  FAILURE
  BLOCKED
  ALLOWED
  QUARANTINED
  INVESTIGATION_REQUIRED
}

enum SecurityImpact {
  NONE
  MINIMAL
  MODERATE
  SIGNIFICANT
  SEVERE
  CATASTROPHIC
}

enum ComplianceReportType {
  SELF_ASSESSMENT
  INTERNAL_AUDIT
  EXTERNAL_AUDIT
  REGULATORY_SUBMISSION
  CERTIFICATION_REVIEW
  INCIDENT_REPORT
  RISK_ASSESSMENT
  POLICY_COMPLIANCE
  TRAINING_COMPLIANCE
  VENDOR_ASSESSMENT
}

enum ComplianceStandard {
  COPPA              // Children's Online Privacy Protection Act
  GDPR               // General Data Protection Regulation
  CCPA               // California Consumer Privacy Act
  HIPAA              // Health Insurance Portability and Accountability Act
  SOX                // Sarbanes-Oxley Act
  PCI_DSS            // Payment Card Industry Data Security Standard
  ISO_27001          // Information Security Management
  NIST_FRAMEWORK     // National Institute of Standards and Technology
  SOC_2              // Service Organization Control 2
  FERPA              // Family Educational Rights and Privacy Act
  CJIS               // Criminal Justice Information Services
  FISMA              // Federal Information Security Management Act
}

enum ComplianceStatus {
  IN_PROGRESS
  COMPLIANT
  NON_COMPLIANT
  PARTIALLY_COMPLIANT
  NEEDS_REVIEW
  EXPIRED
  SUSPENDED
  PENDING_CERTIFICATION
}

enum ComplianceLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
  EXPERT
  CERTIFIED
}

enum ConfidentialityLevel {
  PUBLIC
  INTERNAL
  CONFIDENTIAL
  RESTRICTED
  TOP_SECRET
}

// Advanced Zone Management Enums

enum ZoneAccessPermission {
  EVERYONE
  MEMBERS_ONLY
  VIP_ONLY
  STAFF_ONLY
  ADMIN_ONLY
  AGE_RESTRICTED
  ESCORT_REQUIRED
  SPECIAL_PERMISSION
  EMERGENCY_ONLY
  MAINTENANCE_ONLY
}

enum ZonePriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
  EMERGENCY
}

enum SafetyLevel {
  MINIMAL
  STANDARD
  ENHANCED
  MAXIMUM
  CRITICAL
}

enum HazardLevel {
  NONE
  LOW
  MEDIUM
  HIGH
  EXTREME
}

enum ZoneAccessRuleType {
  GENERAL_ACCESS
  AGE_RESTRICTION
  TIME_RESTRICTION
  CAPACITY_RESTRICTION
  ROLE_RESTRICTION
  MEMBERSHIP_RESTRICTION
  ESCORT_REQUIREMENT
  PERMISSION_REQUIREMENT
  EQUIPMENT_REQUIREMENT
  SAFETY_REQUIREMENT
  EMERGENCY_OVERRIDE
  MAINTENANCE_RESTRICTION
}

enum ViolationAction {
  ALERT
  WARNING
  BLOCK_ACCESS
  ESCALATE
  EVACUATE
  CONTACT_PARENT
  CONTACT_STAFF
  CREATE_INCIDENT
  AUTOMATIC_RESOLUTION
  MANUAL_INTERVENTION
}

enum CapacityStatus {
  EMPTY
  LOW
  NORMAL
  HIGH
  FULL
  OVERCROWDED
  CRITICAL
}

enum OccupancyEventType {
  ENTRY
  EXIT
  MOVEMENT
  CAPACITY_UPDATE
  PEAK_DETECTED
  THRESHOLD_EXCEEDED
  QUEUE_FORMED
  QUEUE_CLEARED
}

enum ZoneAccessType {
  ENTRY
  EXIT
  TRANSIT
  EXTENDED_STAY
  TEMPORARY_ACCESS
  EMERGENCY_ACCESS
  MAINTENANCE_ACCESS
  STAFF_ACCESS
}

enum AccessMethod {
  AUTOMATIC
  MANUAL
  QR_CODE
  BIOMETRIC
  RFID
  FACIAL_RECOGNITION
  STAFF_OVERRIDE
  EMERGENCY_OVERRIDE
  KIOSK
  MOBILE_APP
}

enum AccessResult {
  GRANTED
  DENIED
  PENDING
  EXPIRED
  REVOKED
  OVERRIDE_REQUIRED
  ESCALATED
  EMERGENCY_GRANTED
}

enum ObstacleStatus {
  CLEAR
  PARTIAL_OBSTRUCTION
  BLOCKED
  HAZARD_PRESENT
  MAINTENANCE_REQUIRED
  TEMPORARY_CLOSURE
  PERMANENT_CLOSURE
}

enum EvacuationStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  DELAYED
  PRIORITY_ESCALATED
}

enum ZoneNotificationType {
  ENTRY_NOTIFICATION
  EXIT_NOTIFICATION
  CAPACITY_ALERT
  SAFETY_ANNOUNCEMENT
  MAINTENANCE_NOTICE
  EMERGENCY_ALERT
  ACTIVITY_REMINDER
  CLOSURE_NOTICE
  REOPENING_NOTICE
  SPECIAL_EVENT
  WEATHER_ALERT
  HAZARD_WARNING
  EQUIPMENT_STATUS
  STAFF_DISPATCH
  PARENT_NOTIFICATION
  CROWD_CONTROL
  QUEUE_UPDATE
  GENERAL_ANNOUNCEMENT
}

enum NotificationAudience {
  ALL_USERS
  PARENTS_ONLY
  STAFF_ONLY
  CHILDREN_IN_ZONE
  PARENTS_OF_CHILDREN_IN_ZONE
  VENUE_ADMINS
  EMERGENCY_CONTACTS
  MAINTENANCE_STAFF
  SECURITY_PERSONNEL
  FIRST_AID_STAFF
  MANAGEMENT
  VISITORS
  MEMBERS_ONLY
  VIP_MEMBERS
  AGE_GROUP_SPECIFIC
}

enum ZoneViolationType {
  UNAUTHORIZED_ACCESS
  CAPACITY_EXCEEDED
  AGE_RESTRICTION_VIOLATED
  TIME_LIMIT_EXCEEDED
  PROHIBITED_ITEM
  UNSAFE_BEHAVIOR
  EQUIPMENT_MISUSE
  SUPERVISION_REQUIRED
  STAFF_ONLY_AREA
  EMERGENCY_EXIT_BLOCKED
  MAINTENANCE_AREA_ACCESS
  RESTRICTED_ACTIVITY
  DRESS_CODE_VIOLATION
  FOOD_RESTRICTION
  NOISE_VIOLATION
  LOITERING
  UNATTENDED_CHILD
}

enum ViolationSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  EMERGENCY
}

enum ViolatorType {
  CHILD
  PARENT
  VISITOR
  STAFF
  CONTRACTOR
  VENDOR
  UNKNOWN
  UNAUTHORIZED_PERSON
}

enum DetectionMethod {
  CAMERA
  MOTION_SENSOR
  STAFF_REPORT
  PARENT_REPORT
  AUTOMATIC_SYSTEM
  BIOMETRIC_SCANNER
  QR_CODE_SCAN
  MANUAL_CHECK
  RFID_READER
  ACCESS_CONTROL_SYSTEM
}

enum EmergencyType {
  FIRE
  MEDICAL_EMERGENCY
  NATURAL_DISASTER
  SECURITY_THREAT
  STRUCTURAL_FAILURE
  POWER_OUTAGE
  CHEMICAL_SPILL
  SEVERE_WEATHER
  EVACUATION
  LOCKDOWN
  MISSING_PERSON
  VIOLENT_INCIDENT
  EQUIPMENT_FAILURE
  CROWD_CONTROL
  HAZMAT_INCIDENT
  GAS_LEAK
  FLOOD
  BOMB_THREAT
  CYBER_ATTACK
  GENERAL_EMERGENCY
}

enum EmergencyPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  IMMEDIATE
}

// Enhanced AI Features Enums

enum AIAnalysisType {
  FACE_RECOGNITION
  AGE_ESTIMATION
  EMOTION_DETECTION
  CROWD_DENSITY
  BEHAVIOR_PATTERN
  VOICE_PATTERN
  VISUAL_PATTERN
  MULTI_MODAL
}

enum AIAnalysisStatus {
  ACTIVE
  PAUSED
  STOPPED
  ERROR
  COMPLETED
}

enum AgeGroup {
  INFANT        // 0-2 years
  TODDLER       // 2-4 years
  PRESCHOOL     // 4-6 years
  CHILD         // 6-12 years
  TEEN          // 12-18 years
  YOUNG_ADULT   // 18-25 years
  ADULT         // 25+ years
  SENIOR        // 65+ years
}

enum AgeEnforcementAction {
  NONE
  WARNING_ISSUED
  PARENT_NOTIFIED
  STAFF_ALERTED
  ACCESS_DENIED
  ESCORT_REQUIRED
  SUPERVISION_REQUIRED
  AREA_RESTRICTED
}

enum EmotionType {
  HAPPY
  SAD
  ANGRY
  FEAR
  SURPRISE
  DISGUST
  CALM
  NEUTRAL
  EXCITED
  ANXIOUS
  CONFUSED
  FRUSTRATED
}

enum EmotionIntensity {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum DistressLevel {
  NONE
  MILD
  MODERATE
  HIGH
  SEVERE
  CRITICAL
}

enum ElationLevel {
  NONE
  MILD
  MODERATE
  HIGH
  EXTREME
}

enum EmotionInterventionType {
  COMFORT_SUPPORT
  STAFF_ASSISTANCE
  PARENT_NOTIFICATION
  PEER_SUPPORT
  ACTIVITY_CHANGE
  ENVIRONMENT_ADJUSTMENT
  COUNSELING_REFERRAL
  EMERGENCY_RESPONSE
}

enum EmotionalState {
  STABLE
  DECLINING
  IMPROVING
  VOLATILE
  DISTRESSED
  ELEVATED
}

enum CrowdDensityLevel {
  VERY_LOW
  LOW
  MODERATE
  HIGH
  VERY_HIGH
  OVERCROWDED
}

enum CrowdRiskLevel {
  LOW
  MODERATE
  HIGH
  CRITICAL
  EMERGENCY
}

enum BehaviorType {
  NORMAL
  BULLYING
  AGGRESSION
  DROWNING
  SEIZURE
  MEDICAL_EMERGENCY
  GAIT_ABNORMAL
  FALL
  INJURY
  VIOLENCE
  INAPPROPRIATE_CONTACT
  ISOLATION
  HYPERACTIVITY
  WITHDRAWAL
  PANIC
  SELF_HARM
}

enum BehaviorSeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  EMERGENCY
}

enum VoiceType {
  CRYING
  SCREAMING
  LAUGHING
  TALKING
  SHOUTING
  WHISPERING
  DISTRESS_CALL
  HELP_CALL
  SINGING
  BABBLING
}

enum VoiceEmotionalState {
  NEUTRAL
  HAPPY
  DISTRESSED
  ANGRY
  FEARFUL
  EXCITED
  SAD
  ANXIOUS
  PANICKED
}

enum VoiceIntensityLevel {
  VERY_QUIET
  QUIET
  MEDIUM
  LOUD
  VERY_LOUD
  EXTREME
}

enum AudioQuality {
  POOR
  FAIR
  GOOD
  EXCELLENT
}

enum VisualPatternType {
  FACIAL_EXPRESSION
  BODY_LANGUAGE
  GESTURE
  POSTURE
  MOVEMENT
  INTERACTION
  DISTRESS_SIGNAL
  SAFETY_SIGNAL
}

enum EngagementLevel {
  DISENGAGED
  LOW
  NEUTRAL
  ENGAGED
  HIGHLY_ENGAGED
}

enum ComfortLevel {
  UNCOMFORTABLE
  SLIGHTLY_UNCOMFORTABLE
  NEUTRAL
  COMFORTABLE
  VERY_COMFORTABLE
}

enum AnxietyLevel {
  NONE
  MILD
  MODERATE
  HIGH
  SEVERE
}

enum SocialInteractionType {
  NONE
  INDIVIDUAL_PLAY
  PARALLEL_PLAY
  COOPERATIVE_PLAY
  CONFLICT
  BULLYING
  HELPING
  SHARING
}

enum AttentionState {
  DISTRACTED
  UNFOCUSED
  NORMAL
  FOCUSED
  HYPERFOCUSED
}

enum EnergyLevel {
  VERY_LOW
  LOW
  NORMAL
  HIGH
  VERY_HIGH
  HYPERACTIVE
}

enum AIInsightType {
  SAFETY_PREDICTION
  BEHAVIOR_TREND
  RISK_ASSESSMENT
  PERFORMANCE_ANALYSIS
  PATTERN_DETECTION
  ANOMALY_DETECTION
  RECOMMENDATION
  FORECAST
  OPTIMIZATION
  COMPLIANCE_CHECK
}

enum InsightSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InsightCategory {
  SAFETY
  BEHAVIOR
  OPERATIONAL
  PREDICTIVE
  PERFORMANCE
  COMPLIANCE
  FINANCIAL
  ENVIRONMENTAL
}



enum ActionPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

enum InsightVisibility {
  ADMIN_ONLY
  VENUE_ADMIN
  STAFF
  PARENT
  PUBLIC
}

enum SafetyScoreType {
  VENUE
  ZONE
  CHILD
  OVERALL
  COMPARATIVE
}

enum AIModelType {
  FACE_RECOGNITION
  EMOTION_DETECTION
  AGE_ESTIMATION
  CROWD_DENSITY
  BEHAVIOR_ANALYSIS
  VOICE_RECOGNITION
  GESTURE_RECOGNITION
  OBJECT_DETECTION
  ACTIVITY_RECOGNITION
  RISK_ASSESSMENT
}

// ================================
// MESSAGING AND COMMUNICATION ENUMS
// ================================

enum MediaType {
  PHOTO
  VIDEO
  AUDIO
  DOCUMENT
}

enum MediaSharingStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  PARTIALLY_APPROVED
  EXPIRED
  REVOKED
}

enum PermissionStatus {
  GRANTED
  DENIED
  PENDING
  EXPIRED
  REVOKED
}

enum ConsentPreference {
  ALWAYS_ALLOW
  ASK_EACH_TIME
  NEVER_ALLOW
  FRIENDS_ONLY
  VENUE_ONLY
}

enum FriendshipStatus {
  DETECTED
  CONFIRMED
  DECLINED
  BLOCKED
  PENDING
}

enum MessageType {
  TEXT
  MEDIA
  SYSTEM
  EMERGENCY
  ANNOUNCEMENT
  INVITATION
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
  RECALLED
}

enum ChatType {
  DIRECT
  GROUP
  VENUE_WIDE
  EMERGENCY
  COMMUNITY
}

enum ParentConnectionStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
  EXPIRED
}

enum NavigationMode {
  WALKING
  ACCESSIBLE
  STROLLER_FRIENDLY
  QUICKEST
  SAFEST
}

enum CommunityGroupType {
  LOCAL_FAMILIES
  SPECIAL_NEEDS
  AGE_GROUP
  ACTIVITY_BASED
  CULTURAL
  MENTORSHIP
}

enum ReportType {
  SAFETY_CONCERN
  INAPPROPRIATE_BEHAVIOR
  TECHNICAL_ISSUE
  CONTENT_VIOLATION
  HARASSMENT
  OTHER
}

enum MediaPurchaseStatus {
  PENDING
  APPROVED
  DECLINED
  PROCESSING
  COMPLETED
  REFUNDED
}

enum CommunicationNotificationType {
  MESSAGE
  MEDIA_SHARE
  FRIENDSHIP_DETECTED
  PERMISSION_REQUEST
  EMERGENCY_ALERT
  COMMUNITY_INVITE
  VENUE_ANNOUNCEMENT
  NAVIGATION_UPDATE
  SAFETY_REPORT
}

// ================================
// MESSAGING AND COMMUNICATION MODELS
// ================================

// 1. Media Management and Sharing System
model SharedMedia {
  id                  String              @id @default(cuid())
  title               String?
  description         String?
  mediaType           MediaType
  fileUrl             String
  thumbnailUrl        String?
  fileSize            Int
  duration            Int?                // For video/audio in seconds
  capturedAt          DateTime
  venueId             String
  uploadedById        String
  taggedChildren      String[]            // Array of child IDs
  facialTagsConfirmed Boolean             @default(false)
  watermarked         Boolean             @default(false)
  originalFileUrl     String?             // Before watermarking
  metadata            Json?               // EXIF, location, camera details
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  // Relations
  venue               Venue               @relation("VenueSharedMedia", fields: [venueId], references: [id])
  uploadedBy          User                @relation("UserUploadedMedia", fields: [uploadedById], references: [id])
  permissions         MediaPermission[]   @relation("SharedMediaPermissions")
  purchases           MediaPurchase[]     @relation("SharedMediaPurchases")
  reports             MediaReport[]       @relation("SharedMediaReports")

  @@map("shared_media")
}

model MediaPermission {
  id                String              @id @default(cuid())
  mediaId           String
  childId           String
  parentId          String
  status            PermissionStatus
  requestedAt       DateTime            @default(now())
  respondedAt       DateTime?
  expiresAt         DateTime?
  notes             String?
  autoGranted       Boolean             @default(false)
  connectionBonus   Boolean             @default(false)

  // Relations
  media             SharedMedia         @relation("SharedMediaPermissions", fields: [mediaId], references: [id])
  child             Child               @relation("ChildMediaPermissions", fields: [childId], references: [id])
  parent            User                @relation("ParentMediaPermissions", fields: [parentId], references: [id])

  @@unique([mediaId, childId, parentId])
  @@map("media_permissions")
}

model MediaPurchase {
  id                String              @id @default(cuid())
  mediaId           String
  buyerId           String
  status            MediaPurchaseStatus
  amount            Float
  currency          String              @default("USD")
  paymentMethodId   String?
  purchasedAt       DateTime            @default(now())
  deliveredAt       DateTime?
  downloadUrl       String?
  downloadExpires   DateTime?
  refundedAt        DateTime?

  // Relations
  media             SharedMedia         @relation("SharedMediaPurchases", fields: [mediaId], references: [id])
  buyer             User                @relation("UserMediaPurchases", fields: [buyerId], references: [id])

  @@map("media_purchases")
}

// 2. AI-Powered Friendship Detection
model ChildFriendship {
  id                    String            @id @default(cuid())
  child1Id              String
  child2Id              String
  status                FriendshipStatus
  detectedAt            DateTime          @default(now())
  confirmedAt           DateTime?
  interactionCount      Int               @default(1)
  totalInteractionTime  Int               @default(0) // in minutes
  lastInteractionAt     DateTime          @default(now())
  confidenceScore       Float             // AI confidence in friendship
  sharedActivities      String[]          // Activities they do together
  compatibilityScore    Float?            // Family compatibility
  notes                 String?

  // Relations
  child1                Child             @relation("ChildFriendships1", fields: [child1Id], references: [id])
  child2                Child             @relation("ChildFriendships2", fields: [child2Id], references: [id])
  interactions          FriendshipInteraction[] @relation("FriendshipInteractions")

  @@unique([child1Id, child2Id])
  @@map("child_friendships")
}

model FriendshipInteraction {
  id                String            @id @default(cuid())
  friendshipId      String
  interactionType   String            // "playing_together", "shared_activity", etc.
  duration          Int               // in minutes
  location          String?           // venue zone
  confidence        Float
  detectedAt        DateTime          @default(now())
  metadata          Json?             // Additional AI analysis data

  // Relations
  friendship        ChildFriendship   @relation("FriendshipInteractions", fields: [friendshipId], references: [id])

  @@map("friendship_interactions")
}

// 3. Parent Connection System
model ParentConnection {
  id                  String                  @id @default(cuid())
  requesterId         String
  receiverId          String
  status              ParentConnectionStatus
  requestedAt         DateTime                @default(now())
  respondedAt         DateTime?
  message             String?
  connectionReason    String?                 // "children_are_friends", "shared_interests", etc.
  sharedInterests     String[]
  compatibilityScore  Float?
  blockedAt           DateTime?
  notes               String?

  // Relations
  requester           User                    @relation("ParentConnectionRequester", fields: [requesterId], references: [id])
  receiver            User                    @relation("ParentConnectionReceiver", fields: [receiverId], references: [id])
  sharedActivities    SharedActivity[]        @relation("ConnectionSharedActivities")

  @@unique([requesterId, receiverId])
  @@map("parent_connections")
}

model SharedActivity {
  id                String            @id @default(cuid())
  connectionId      String
  title             String
  description       String?
  activityType      String            // "playdate", "event", "birthday_party", etc.
  scheduledFor      DateTime
  location          String?
  venueId           String?
  organizerId       String
  participantIds    String[]
  status            String            @default("planned") // planned, confirmed, completed, cancelled
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  connection        ParentConnection  @relation("ConnectionSharedActivities", fields: [connectionId], references: [id])
  organizer         User              @relation("UserOrganizedActivities", fields: [organizerId], references: [id])
  venue             Venue?            @relation("VenueSharedActivities", fields: [venueId], references: [id])

  @@map("shared_activities")
}

// 4. Messaging System
model Chat {
  id                String            @id @default(cuid())
  type              ChatType
  title             String?
  description       String?
  isActive          Boolean           @default(true)
  venueId           String?
  groupId           String?
  lastMessageAt     DateTime?
  participantCount  Int               @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  venue             Venue?            @relation("VenueChats", fields: [venueId], references: [id])
  group             CommunityGroup?   @relation("CommunityGroupChats", fields: [groupId], references: [id])
  participants      ChatParticipant[] @relation("ChatParticipants")
  messages          Message[]         @relation("ChatMessages")

  @@map("chats")
}

model ChatParticipant {
  id                String            @id @default(cuid())
  chatId            String
  userId            String
  joinedAt          DateTime          @default(now())
  leftAt            DateTime?
  role              String            @default("member") // member, admin, moderator
  muted             Boolean           @default(false)
  lastReadAt        DateTime?
  notificationsEnabled Boolean        @default(true)

  // Relations
  chat              Chat              @relation("ChatParticipants", fields: [chatId], references: [id])
  user              User              @relation("UserChatParticipants", fields: [userId], references: [id])

  @@unique([chatId, userId])
  @@map("chat_participants")
}

model Message {
  id                String            @id @default(cuid())
  chatId            String
  senderId          String
  content           String?
  messageType       MessageType
  status            MessageStatus
  mediaUrl          String?
  mediaType         MediaType?
  replyToId         String?
  isEdited          Boolean           @default(false)
  isDeleted         Boolean           @default(false)
  sentAt            DateTime          @default(now())
  editedAt          DateTime?
  deletedAt         DateTime?
  metadata          Json?             // Message-specific data

  // Relations
  chat              Chat              @relation("ChatMessages", fields: [chatId], references: [id])
  sender            User              @relation("UserSentMessages", fields: [senderId], references: [id])
  replyTo           Message?          @relation("MessageReplies", fields: [replyToId], references: [id])
  replies           Message[]         @relation("MessageReplies")
  deliveries        MessageDelivery[] @relation("MessageDeliveries")

  @@map("messages")
}

model MessageDelivery {
  id                String            @id @default(cuid())
  messageId         String
  recipientId       String
  deliveredAt       DateTime?
  readAt            DateTime?
  status            MessageStatus

  // Relations
  message           Message           @relation("MessageDeliveries", fields: [messageId], references: [id])
  recipient         User              @relation("UserMessageDeliveries", fields: [recipientId], references: [id])

  @@unique([messageId, recipientId])
  @@map("message_deliveries")
}

// 5. Enhanced Navigation System
model NavigationRequest {
  id                String            @id @default(cuid())
  parentId          String
  childId           String
  venueId           String
  targetLocation    String            // zone name or specific location
  mode              NavigationMode
  requestedAt       DateTime          @default(now())
  estimatedTime     Int?              // in minutes
  crowdFactor       Float?            // 0-1 crowd density impact
  actualTime        Int?              // actual time taken
  completedAt       DateTime?
  abandoned         Boolean           @default(false)

  // Relations
  parent            User              @relation("ParentNavigationRequests", fields: [parentId], references: [id])
  child             Child             @relation("ChildNavigationRequests", fields: [childId], references: [id])
  venue             Venue             @relation("VenueNavigationRequests", fields: [venueId], references: [id])
  path              NavigationPath?   @relation("NavigationRequestPath")

  @@map("navigation_requests")
}

model NavigationPath {
  id                String            @id @default(cuid())
  requestId         String            @unique
  startLocation     String
  endLocation       String
  waypoints         Json              // Array of coordinates/zones
  totalDistance     Float             // in meters
  estimatedTime     Int               // in minutes
  crowdAvoidance    Boolean           @default(false)
  accessibilityMode Boolean           @default(false)
  generatedAt       DateTime          @default(now())

  // Relations
  request           NavigationRequest @relation("NavigationRequestPath", fields: [requestId], references: [id])

  @@map("navigation_paths")
}

// 6. Community and Social Features
model CommunityGroup {
  id                String            @id @default(cuid())
  name              String
  description       String?
  type              CommunityGroupType
  isPublic          Boolean           @default(true)
  venueId           String?
  adminId           String
  memberLimit       Int?
  location          String?           // geographic area
  interests         String[]
  ageRange          String?           // "2-5", "6-12", etc.
  requirements      String?           // joining requirements
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  venue             Venue?            @relation("VenueCommunityGroups", fields: [venueId], references: [id])
  admin             User              @relation("UserAdminGroups", fields: [adminId], references: [id])
  members           CommunityMember[] @relation("CommunityGroupMembers")
  chats             Chat[]            @relation("CommunityGroupChats")
  events            CommunityEvent[]  @relation("CommunityGroupEvents")

  @@map("community_groups")
}

model CommunityMember {
  id                String            @id @default(cuid())
  groupId           String
  userId            String
  role              String            @default("member") // member, moderator, admin
  joinedAt          DateTime          @default(now())
  leftAt            DateTime?
  contributionScore Int               @default(0)
  isActive          Boolean           @default(true)

  // Relations
  group             CommunityGroup    @relation("CommunityGroupMembers", fields: [groupId], references: [id])
  user              User              @relation("UserCommunityMemberships", fields: [userId], references: [id])

  @@unique([groupId, userId])
  @@map("community_members")
}

model CommunityEvent {
  id                String            @id @default(cuid())
  groupId           String
  title             String
  description       String?
  eventType         String            // "playdate", "meetup", "educational", etc.
  location          String
  venueId           String?
  startTime         DateTime
  endTime           DateTime
  maxParticipants   Int?
  currentParticipants Int             @default(0)
  organizerId       String
  isPublic          Boolean           @default(false)
  requiresApproval  Boolean           @default(false)
  ageRange          String?
  cost              Float?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  group             CommunityGroup    @relation("CommunityGroupEvents", fields: [groupId], references: [id])
  venue             Venue?            @relation("VenueCommunityEvents", fields: [venueId], references: [id])
  organizer         User              @relation("UserOrganizedEvents", fields: [organizerId], references: [id])
  participants      EventParticipant[] @relation("EventParticipants")

  @@map("community_events")
}

model EventParticipant {
  id                String            @id @default(cuid())
  eventId           String
  userId            String
  childrenIds       String[]          // Children attending
  status            String            @default("registered") // registered, confirmed, attended, cancelled
  registeredAt      DateTime          @default(now())
  confirmedAt       DateTime?
  notes             String?

  // Relations
  event             CommunityEvent    @relation("EventParticipants", fields: [eventId], references: [id])
  user              User              @relation("UserEventParticipations", fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@map("event_participants")
}

// 7. Privacy and Security
model MediaReport {
  id                String            @id @default(cuid())
  mediaId           String
  reporterId        String
  reportType        ReportType
  description       String
  evidence          Json?             // Screenshots, additional details
  status            String            @default("pending") // pending, investigating, resolved, dismissed
  priority          String            @default("normal") // low, normal, high, urgent
  assignedTo        String?
  reportedAt        DateTime          @default(now())
  resolvedAt        DateTime?
  resolution        String?

  // Relations
  media             SharedMedia       @relation("SharedMediaReports", fields: [mediaId], references: [id])
  reporter          User              @relation("UserMediaReports", fields: [reporterId], references: [id])
  assignee          User?             @relation("UserAssignedReports", fields: [assignedTo], references: [id])

  @@map("media_reports")
}

model ContentModeration {
  id                String            @id @default(cuid())
  contentType       String            // "message", "media", "profile"
  contentId         String
  moderatorId       String?
  aiFlag            Boolean           @default(false)
  humanReview       Boolean           @default(false)
  flagReason        String?
  severity          String            @default("low") // low, medium, high, critical
  action            String?           // "approved", "flagged", "removed", "quarantined"
  reviewedAt        DateTime?
  createdAt         DateTime          @default(now())

  // Relations
  moderator         User?             @relation("UserContentModerations", fields: [moderatorId], references: [id])

  @@map("content_moderations")
}

// 8. Communication Notifications
model CommunicationNotification {
  id                String                         @id @default(cuid())
  userId            String
  type              CommunicationNotificationType
  title             String
  message           String
  data              Json?                          // Additional notification data
  read              Boolean                        @default(false)
  priority          String                         @default("normal") // low, normal, high, urgent
  groupId           String?                        // For batching related notifications
  expiresAt         DateTime?
  createdAt         DateTime                       @default(now())
  readAt            DateTime?

  // Relations
  user              User                           @relation("UserCommunicationNotifications", fields: [userId], references: [id])

  @@map("communication_notifications")
}

// 9. Privacy Settings
model PrivacySettings {
  id                    String            @id @default(cuid())
  userId                String            @unique
  mediaShareConsent     ConsentPreference @default(ASK_EACH_TIME)
  friendConnectionsVisible Boolean        @default(true)
  showInCommunitySearch Boolean           @default(true)
  allowDirectMessages   Boolean           @default(true)
  shareLocationData     Boolean           @default(true)
  profileVisibility     String            @default("friends") // public, friends, private
  communicationPrefs    Json?             // Detailed communication preferences
  dataRetentionDays     Int?              // Custom data retention
  anonymousReporting    Boolean           @default(true)
  updatedAt             DateTime          @updatedAt

  // Relations
  user                  User              @relation("UserPrivacySettings", fields: [userId], references: [id])

  @@map("privacy_settings")
}

// 10. Legal Compliance
model LegalAgreement {
  id                    String                @id @default(cuid())
  userId                String
  agreementType         LegalAgreementType
  version               String                // Version of the agreement (e.g., "1.0", "1.1")
  agreed                Boolean               @default(true)
  agreedAt              DateTime              @default(now())
  ipAddress             String?               // IP address when agreement was made
  userAgent             String?               // Browser/device info
  documentUrl           String?               // URL to the agreement document
  documentHash          String?               // Hash of the agreement content for integrity
  parentConsent         Boolean               @default(false) // For COPPA compliance
  childAge              Int?                  // Age of child at time of agreement
  withdrawnAt           DateTime?             // When consent was withdrawn
  withdrawalReason      String?               // Reason for withdrawal
  reAgreedAt            DateTime?             // When user re-agreed after withdrawal
  notificationSent      Boolean               @default(false) // Policy update notification sent
  metadata              Json?                 // Additional compliance data
  expiresAt             DateTime?             // When agreement expires (if applicable)
  
  // Relations
  user                  User                  @relation("UserLegalAgreements", fields: [userId], references: [id])
  
  @@unique([userId, agreementType, version])
  @@index([agreementType, version])
  @@index([agreedAt, agreementType])
  @@map("legal_agreements")
}

// Legal Agreement Types
enum LegalAgreementType {
  TERMS_OF_SERVICE
  PRIVACY_POLICY
  COPPA_CONSENT
  GDPR_CONSENT
  BIOMETRIC_CONSENT
  MEDIA_SHARING_CONSENT
  LOCATION_TRACKING_CONSENT
  AI_PROCESSING_CONSENT
}

// =============================================================================
// PAYMENT AND SUBSCRIPTION SYSTEM MODELS
// =============================================================================

// Subscription Plans - Defines available pricing tiers
model SubscriptionPlan {
  id                    String                @id @default(cuid())
  name                  String                @unique // "Basic", "Premium", "Family", "Lifetime"
  description           String
  planType              SubscriptionPlanType
  price                 Decimal               @db.Decimal(10,2) // Monthly price in cents
  yearlyPrice           Decimal?              @db.Decimal(10,2) // Yearly price with discount
  lifetimePrice         Decimal?              @db.Decimal(10,2) // One-time lifetime price
  stripePriceId         String?               @unique // Stripe Price ID for recurring plans
  stripeYearlyPriceId   String?               @unique // Stripe Price ID for yearly billing
  stripeLifetimePriceId String?               @unique // Stripe Price ID for lifetime
  currency              String                @default("USD")
  billingInterval       BillingInterval       @default(MONTHLY)
  trialDays             Int                   @default(0)
  
  // Feature limits
  maxChildren           Int                   @default(1)
  maxVenues             Int                   @default(1)
  maxPhotoDownloads     Int                   @default(10)  // Per month
  maxVideoDownloads     Int                   @default(5)   // Per month
  maxMemoryStorage      Int                   @default(1000) // MB
  maxAlerts             Int                   @default(50)  // Per month
  
  // Feature flags
  unlimitedDownloads    Boolean               @default(false)
  premiumAlerts         Boolean               @default(false)
  aiInsights            Boolean               @default(false)
  prioritySupport       Boolean               @default(false)
  customBranding        Boolean               @default(false)
  advancedAnalytics     Boolean               @default(false)
  biometricFeatures     Boolean               @default(false)
  realTimeTracking      Boolean               @default(false)
  emergencyFeatures     Boolean               @default(false)
  familySharing         Boolean               @default(false)
  
  isActive              Boolean               @default(true)
  displayOrder          Int                   @default(0)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  userSubscriptions     UserSubscription[]
  subscriptionHistory   SubscriptionHistory[]
  
  @@map("subscription_plans")
}

// User Subscriptions - Current subscription status for each user
model UserSubscription {
  id                    String                      @id @default(cuid())
  userId                String                      @unique
  planId                String
  status                SubscriptionStatus
  stripeSubscriptionId  String?                     @unique
  stripeCustomerId      String?                     @unique
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean                     @default(false)
  canceledAt            DateTime?
  trialStart            DateTime?
  trialEnd              DateTime?
  billingInterval       BillingInterval
  
  // Usage tracking
  monthlyPhotoDownloads Int                         @default(0)
  monthlyVideoDownloads Int                         @default(0)
  monthlyMemoryUsage    Int                         @default(0) // MB
  monthlyAlerts         Int                         @default(0)
  lastUsageReset        DateTime                    @default(now())
  
  // Payment
  nextBillingAmount     Decimal?                    @db.Decimal(10,2)
  nextBillingDate       DateTime?
  paymentFailures       Int                         @default(0)
  lastPaymentFailure    DateTime?
  
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  
  // Relations
  user                  User                        @relation("UserSubscription", fields: [userId], references: [id], onDelete: Cascade)
  plan                  SubscriptionPlan            @relation(fields: [planId], references: [id])
  discountUsages        DiscountCodeUsage[]         @relation("SubscriptionDiscountUsages")
  
  @@index([userId, status])
  @@index([status, currentPeriodEnd])
  @@map("user_subscriptions")
}

// User Payment Methods - Stored payment methods for users
model UserPaymentMethod {
  id                    String              @id @default(cuid())
  userId                String
  stripePaymentMethodId String              @unique
  type                  PaymentMethodType
  last4                 String?             // Last 4 digits for cards
  brand                 String?             // Visa, Mastercard, etc.
  expiryMonth           Int?
  expiryYear            Int?
  isDefault             Boolean             @default(false)
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relations
  user                  User                @relation("UserPaymentMethods", fields: [userId], references: [id], onDelete: Cascade)
  transactions          PaymentTransaction[]
  
  @@index([userId, isDefault])
  @@map("user_payment_methods")
}

// Payment Transactions - Record of all payments
model PaymentTransaction {
  id                    String                    @id @default(cuid())
  userId                String
  paymentMethodId       String?
  stripePaymentIntentId String?                   @unique
  stripeChargeId        String?                   @unique
  
  type                  PaymentTransactionType
  status                PaymentTransactionStatus
  amount                Decimal                   @db.Decimal(10,2)
  currency              String                    @default("USD")
  description           String
  
  // Subscription related
  subscriptionId        String?
  planId                String?
  billingPeriodStart    DateTime?
  billingPeriodEnd      DateTime?
  
  // Revenue sharing (for venue-related transactions)
  venueId               String?
  safeplayAmount        Decimal?                  @db.Decimal(10,2)
  venueAmount           Decimal?                  @db.Decimal(10,2)
  revenuePercentage     Decimal?                  @db.Decimal(5,2) // Venue's percentage
  
  // Metadata
  metadata              Json?
  stripeMetadata        Json?
  failureReason         String?
  refundedAt            DateTime?
  refundAmount          Decimal?                  @db.Decimal(10,2)
  
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  
  // Relations
  user                  User                      @relation("UserPaymentTransactions", fields: [userId], references: [id])
  paymentMethod         UserPaymentMethod?        @relation(fields: [paymentMethodId], references: [id])
  discountUsages        DiscountCodeUsage[]       @relation("TransactionDiscountUsages")
  
  @@index([userId, status])
  @@index([type, status])
  @@index([createdAt, status])
  @@map("payment_transactions")
}

// Subscription History - Track all subscription changes
model SubscriptionHistory {
  id                    String                        @id @default(cuid())
  userId                String
  planId                String
  changeType            SubscriptionChangeType
  fromPlanId            String?
  toPlanId              String?
  effectiveDate         DateTime
  reason                String?
  
  // Pricing at time of change
  oldAmount             Decimal?                      @db.Decimal(10,2)
  newAmount             Decimal?                      @db.Decimal(10,2)
  proratedAmount        Decimal?                      @db.Decimal(10,2)
  
  stripeEventId         String?                       @unique
  metadata              Json?
  createdAt             DateTime                      @default(now())
  
  // Relations
  user                  User                          @relation("UserSubscriptionHistory", fields: [userId], references: [id])
  plan                  SubscriptionPlan              @relation(fields: [planId], references: [id])
  
  @@index([userId, changeType])
  @@index([effectiveDate, changeType])
  @@map("subscription_history")
}

// Usage Records - Track feature usage for billing
model UsageRecord {
  id                    String              @id @default(cuid())
  userId                String
  featureType           UsageFeatureType
  quantity              Int                 @default(1)
  unit                  String              @default("count") // "count", "mb", "minutes"
  timestamp             DateTime            @default(now())
  billingPeriod         String              // "2024-01" format
  
  // Related entities
  childId               String?
  venueId               String?
  memoryId              String?
  alertId               String?
  
  metadata              Json?
  
  // Relations
  user                  User                @relation("UserUsageRecords", fields: [userId], references: [id])
  
  @@index([userId, featureType, billingPeriod])
  @@index([billingPeriod, featureType])
  @@map("usage_records")
}

// Billing Events - Track billing-related events
model BillingEvent {
  id                    String              @id @default(cuid())
  userId                String
  eventType             BillingEventType
  status                BillingEventStatus  @default(PENDING)
  description           String
  
  // Amounts
  amount                Decimal?            @db.Decimal(10,2)
  currency              String              @default("USD")
  
  // Stripe integration
  stripeEventId         String?             @unique
  stripeEventType       String?
  stripeObjectId        String?
  
  // Processing
  processedAt           DateTime?
  processingError       String?
  retryCount            Int                 @default(0)
  nextRetryAt           DateTime?
  
  metadata              Json?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relations
  user                  User                @relation("UserBillingEvents", fields: [userId], references: [id])
  
  @@index([userId, eventType])
  @@index([status, nextRetryAt])
  @@map("billing_events")
}

// =============================================================================
// VENUE REVENUE SHARING MODELS
// =============================================================================

// Venue Payment Settings - Stripe Connect configuration
model VenuePaymentSettings {
  id                          String              @id @default(cuid())
  venueId                     String              @unique
  
  // Stripe Connect
  stripeConnectAccountId      String?             @unique
  stripeOnboardingComplete    Boolean             @default(false)
  stripeAccountStatus         StripeAccountStatus @default(PENDING)
  stripeRequirements          Json?               // Stripe requirements
  
  // Revenue sharing
  revenuePercentage           Decimal             @db.Decimal(5,2) @default(30.00) // Venue's percentage
  minimumPayoutAmount         Decimal             @db.Decimal(10,2) @default(25.00)
  payoutSchedule              PayoutSchedule      @default(WEEKLY)
  
  // Banking
  defaultCurrency             String              @default("USD")
  supportedCurrencies         String[]            @default(["USD"])
  
  // Status and settings
  isActive                    Boolean             @default(false)
  autoPayoutsEnabled          Boolean             @default(true)
  payoutMethodRequested       Boolean             @default(false)
  
  // Compliance
  taxIdProvided               Boolean             @default(false)
  businessVerified            Boolean             @default(false)
  identityVerified            Boolean             @default(false)
  
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime            @updatedAt
  
  // Relations
  venue                       Venue               @relation("VenuePaymentSettings", fields: [venueId], references: [id], onDelete: Cascade)
  
  @@map("venue_payment_settings")
}

// Revenue Transactions - Track revenue sharing
model RevenueTransaction {
  id                    String                      @id @default(cuid())
  venueId               String
  parentTransactionId   String                      // Reference to original PaymentTransaction
  
  type                  RevenueTransactionType
  status                RevenueTransactionStatus    @default(PENDING)
  
  // Amounts
  totalAmount           Decimal                     @db.Decimal(10,2)
  safeplayAmount        Decimal                     @db.Decimal(10,2)
  venueAmount           Decimal                     @db.Decimal(10,2)
  revenuePercentage     Decimal                     @db.Decimal(5,2)
  processingFees        Decimal                     @db.Decimal(10,2) @default(0)
  
  currency              String                      @default("USD")
  description           String
  
  // Stripe integration
  stripeTransferId      String?                     @unique
  stripeConnectCharge   String?
  
  // Processing
  processedAt           DateTime?
  transferredAt         DateTime?
  failureReason         String?
  
  metadata              Json?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  
  // Relations
  venue                 Venue                       @relation("VenueRevenueTransactions", fields: [venueId], references: [id])
  
  @@index([venueId, status])
  @@index([type, status])
  @@map("revenue_transactions")
}

// Payout History - Track venue payouts
model PayoutHistory {
  id                    String              @id @default(cuid())
  venueId               String
  
  // Payout details
  amount                Decimal             @db.Decimal(10,2)
  currency              String              @default("USD")
  description           String
  payoutPeriodStart     DateTime
  payoutPeriodEnd       DateTime
  
  // Stripe integration
  stripePayoutId        String?             @unique
  stripeTransferGroup   String?
  
  // Status
  status                PayoutStatus        @default(PENDING)
  initiatedAt           DateTime            @default(now())
  completedAt           DateTime?
  failedAt              DateTime?
  failureReason         String?
  
  // Included transactions
  transactionCount      Int                 @default(0)
  revenueTransactionIds String[]            // IDs of included revenue transactions
  
  metadata              Json?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relations
  venue                 Venue               @relation("VenuePayoutHistory", fields: [venueId], references: [id])
  
  @@index([venueId, status])
  @@index([payoutPeriodStart, payoutPeriodEnd])
  @@map("payout_history")
}

// =============================================================================
// PAYMENT SYSTEM ENUMS
// =============================================================================

enum SubscriptionPlanType {
  BASIC
  PREMIUM
  FAMILY
  LIFETIME
  ENTERPRISE
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

enum BillingInterval {
  MONTHLY
  YEARLY
  LIFETIME
}

enum PaymentMethodType {
  CARD
  BANK_ACCOUNT
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
}

enum PaymentTransactionType {
  SUBSCRIPTION
  ONE_TIME
  UPGRADE
  DOWNGRADE
  REFUND
  VENUE_REVENUE
  PHOTO_PURCHASE
  VIDEO_PURCHASE
  PREMIUM_FEATURE
}

enum PaymentTransactionStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum SubscriptionChangeType {
  CREATED
  UPGRADED
  DOWNGRADED
  CANCELED
  RENEWED
  REACTIVATED
  TRIAL_STARTED
  TRIAL_ENDED
  PAYMENT_FAILED
  PAYMENT_RECOVERED
}

enum UsageFeatureType {
  PHOTO_DOWNLOAD
  VIDEO_DOWNLOAD
  MEMORY_STORAGE
  ALERT_GENERATION
  AI_INSIGHT
  BIOMETRIC_SCAN
  REAL_TIME_TRACKING
  EMERGENCY_ALERT
  FAMILY_SHARING
  CUSTOM_REPORT
}

enum BillingEventType {
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_UPDATED
  SUBSCRIPTION_CANCELED
  PAYMENT_SUCCEEDED
  PAYMENT_FAILED
  INVOICE_CREATED
  INVOICE_PAID
  INVOICE_PAYMENT_FAILED
  CUSTOMER_CREATED
  CUSTOMER_UPDATED
  PAYOUT_CREATED
  PAYOUT_PAID
  PAYOUT_FAILED
}

enum BillingEventStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  RETRYING
}

enum StripeAccountStatus {
  PENDING
  RESTRICTED
  ENABLED
  DISABLED
  REJECTED
}

enum PayoutSchedule {
  DAILY
  WEEKLY
  MONTHLY
  MANUAL
}

enum RevenueTransactionType {
  PHOTO_SALE
  VIDEO_SALE
  SUBSCRIPTION_REVENUE
  PREMIUM_FEATURE
  MEMORY_PACKAGE
  CUSTOM_SERVICE
}

enum RevenueTransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REVERSED
}

enum PayoutStatus {
  PENDING
  IN_TRANSIT
  PAID
  FAILED
  CANCELED
}

// Discount Code System Enums

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_TRIAL_EXTENSION
  FIRST_MONTH_FREE
  LIFETIME_DISCOUNT
}

enum DiscountCategory {
  MARKETING
  PARTNER
  RETENTION
  REFERRAL
  SEASONAL
  FLASH_SALE
  LOYALTY
  WELCOME
  VENUE_SPECIFIC
}

enum DiscountCodeStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  EXHAUSTED
  SUSPENDED
}

enum DiscountApplication {
  AUTOMATIC
  MANUAL
  USER_INPUT
}

enum CodeUsageStatus {
  APPLIED
  REDEEMED
  CANCELLED
  REFUNDED
}

enum DiscountRestrictionType {
  MINIMUM_PURCHASE
  PLAN_SPECIFIC
  USER_ROLE
  NEW_USERS_ONLY
  EXISTING_USERS_ONLY
  FIRST_TIME_PURCHASE
  GEOGRAPHIC
}

// Discount Code System Models

model DiscountCode {
  id                    String                    @id @default(cuid())
  code                  String                    @unique // The actual discount code (e.g., "WELCOME20")
  name                  String                    // Internal name for the code
  description           String?                   // Description of the discount
  discountType          DiscountType
  discountValue         Float                     // Percentage (0-100) or fixed amount
  category              DiscountCategory
  status                DiscountCodeStatus        @default(ACTIVE)
  application           DiscountApplication       @default(USER_INPUT)
  
  // Usage limits
  maxUses               Int?                      // Total number of uses allowed
  maxUsesPerUser        Int                       @default(1) // Uses per user
  currentUses           Int                       @default(0) // Current number of uses
  
  // Time restrictions
  startsAt              DateTime?                 // When the code becomes active
  expiresAt             DateTime?                 // When the code expires
  isTimeSensitive       Boolean                   @default(false) // Flash sale type codes
  
  // Applicability
  applicablePlans       SubscriptionPlanType[]    // Which plans this code applies to
  minimumPurchase       Float?                    // Minimum purchase amount required
  isStackable           Boolean                   @default(false) // Can be used with other codes
  
  // Venue restrictions
  venueSpecific         Boolean                   @default(false)
  applicableVenues      String[]                  // Venue IDs this code applies to
  
  // User restrictions
  userRestrictions      DiscountRestrictionType[]
  allowedUserRoles      UserRole[]                // Which user roles can use this code
  restrictToNewUsers    Boolean                   @default(false)
  restrictToFirstTime   Boolean                   @default(false)
  
  // Geographic restrictions
  allowedCountries      String[]                  // ISO country codes
  allowedStates         String[]                  // State codes
  allowedZipCodes       String[]                  // Specific zip codes
  
  // Revenue impact
  estimatedImpact       Float?                    // Estimated revenue impact
  actualImpact          Float                     @default(0.0) // Actual revenue impact
  
  // Campaign information
  campaignName          String?                   // Marketing campaign name
  campaignId            String?                   // External campaign ID
  affiliateId           String?                   // Affiliate partner ID
  referralSource        String?                   // Where users find this code
  
  // Analytics
  clickCount            Int                       @default(0) // How many times code was attempted
  conversionRate        Float                     @default(0.0) // Success rate
  averageOrderValue     Float                     @default(0.0) // AOV with this code
  
  // Stripe integration
  stripeCouponId        String?                   // Associated Stripe coupon ID
  stripePromotionCodeId String?                   // Associated Stripe promotion code ID
  
  // Auto-application rules
  autoApplyConditions   Json?                     // Conditions for automatic application
  autoApplyPriority     Int                       @default(1) // Priority when multiple codes qualify
  
  // Metadata
  notes                 String?                   // Internal notes
  createdBy             String                    // User ID who created the code
  lastModifiedBy        String?                   // User ID who last modified
  tags                  String[]                  // Tags for organization
  isTest                Boolean                   @default(false) // Test code for development
  metadata              Json?                     // Additional metadata
  
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  
  // Relations
  usageHistory          DiscountCodeUsage[]       @relation("DiscountCodeUsages")
  campaigns             DiscountCampaign[]        @relation("CampaignDiscountCodes")
  
  @@index([code, status])
  @@index([category, status])
  @@index([expiresAt, status])
  @@index([createdBy, category])
  @@map("discount_codes")
}

model DiscountCodeUsage {
  id                    String                    @id @default(cuid())
  discountCodeId        String
  userId                String
  code                  String                    // Store the actual code used
  
  // Usage details
  usageStatus           CodeUsageStatus           @default(APPLIED)
  subscriptionId        String?                   // Associated subscription
  transactionId         String?                   // Associated payment transaction
  orderId               String?                   // Associated order/purchase
  
  // Financial impact
  originalAmount        Float                     // Original amount before discount
  discountAmount        Float                     // Amount of discount applied
  finalAmount           Float                     // Final amount after discount
  currency              String                    @default("usd")
  
  // Context
  planType              SubscriptionPlanType?     // Plan the discount was applied to
  billingInterval       BillingInterval?          // Monthly/yearly
  venueId               String?                   // Associated venue
  
  // Tracking
  ipAddress             String?                   // IP address of user
  userAgent             String?                   // Browser/device info
  referralSource        String?                   // How user found the code
  campaignSource        String?                   // Campaign tracking
  
  // Stripe details
  stripeDiscountId      String?                   // Stripe discount object ID
  stripeCouponId        String?                   // Stripe coupon ID used
  
  // Validation details
  validatedAt           DateTime                  @default(now()) // When code was validated
  appliedAt             DateTime?                 // When discount was applied
  redeemedAt            DateTime?                 // When purchase was completed
  cancelledAt           DateTime?                 // If cancelled
  refundedAt            DateTime?                 // If refunded
  
  // Additional tracking
  sessionId             String?                   // User session ID
  experimentGroup       String?                   // A/B testing group
  couponStackingUsed    Boolean                   @default(false) // If used with other codes
  
  metadata              Json?                     // Additional usage metadata
  
  // Relations
  discountCode          DiscountCode              @relation("DiscountCodeUsages", fields: [discountCodeId], references: [id], onDelete: Cascade)
  user                  User                      @relation("UserDiscountUsages", fields: [userId], references: [id])
  subscription          UserSubscription?         @relation("SubscriptionDiscountUsages", fields: [subscriptionId], references: [id])
  transaction           PaymentTransaction?       @relation("TransactionDiscountUsages", fields: [transactionId], references: [id])
  venue                 Venue?                    @relation("VenueDiscountUsages", fields: [venueId], references: [id])
  
  @@index([discountCodeId, usageStatus])
  @@index([userId, usageStatus])
  @@index([validatedAt, usageStatus])
  @@index([code, userId])
  @@map("discount_code_usages")
}

model DiscountCampaign {
  id                    String                    @id @default(cuid())
  name                  String                    // Campaign name
  description           String?                   // Campaign description
  
  // Campaign timing
  startsAt              DateTime
  endsAt                DateTime?
  isActive              Boolean                   @default(true)
  
  // Campaign goals
  targetRevenue         Float?                    // Target revenue goal
  targetUsers           Int?                      // Target user acquisition
  targetConversions     Int?                      // Target conversion goal
  
  // Budget and costs
  marketingBudget       Float?                    // Marketing spend budget
  maxDiscountBudget     Float?                    // Maximum discount amount to give
  currentDiscountSpend  Float                     @default(0.0) // Current discount spend
  
  // Performance tracking
  totalUsers            Int                       @default(0) // Users who saw campaign
  totalClicks           Int                       @default(0) // Clicks on campaign
  totalConversions      Int                       @default(0) // Successful conversions
  totalRevenue          Float                     @default(0.0) // Revenue generated
  conversionRate        Float                     @default(0.0) // Conversion rate
  costPerAcquisition    Float                     @default(0.0) // CPA
  returnOnAdSpend       Float                     @default(0.0) // ROAS
  
  // Targeting
  targetAudience        Json?                     // Audience targeting criteria
  targetChannels        String[]                  // Marketing channels
  targetLocations       String[]                  // Geographic targeting
  
  // A/B Testing
  isAbTest              Boolean                   @default(false)
  testGroups            Json?                     // A/B test group configuration
  controlGroupSize      Float?                    // Percentage in control group
  
  // Campaign settings
  autoOptimization      Boolean                   @default(false) // Auto-optimize performance
  pauseThresholds       Json?                     // Auto-pause conditions
  escalationRules       Json?                     // Performance escalation rules
  
  // Analytics
  analyticsData         Json?                     // Campaign analytics data
  lastAnalyzed          DateTime?                 // Last analytics update
  performanceTrend      Json?                     // Performance trend data
  
  // Metadata
  createdBy             String                    // User ID who created campaign
  lastModifiedBy        String?                   // User ID who last modified
  tags                  String[]                  // Campaign tags
  notes                 String?                   // Internal notes
  metadata              Json?                     // Additional metadata
  
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  
  // Relations
  discountCodes         DiscountCode[]            @relation("CampaignDiscountCodes")
  
  @@index([isActive, startsAt])
  @@index([createdBy, isActive])
  @@index([endsAt, isActive])
  @@map("discount_campaigns")
}

model DiscountAnalytics {
  id                    String                    @id @default(cuid())
  discountCodeId        String?                   // Specific code analytics
  campaignId            String?                   // Campaign-level analytics
  
  // Time period
  periodStart           DateTime
  periodEnd             DateTime
  periodType            String                    // daily, weekly, monthly, quarterly
  
  // Usage metrics
  totalUses             Int                       @default(0)
  uniqueUsers           Int                       @default(0)
  newUsers              Int                       @default(0)
  returningUsers        Int                       @default(0)
  
  // Financial metrics
  totalDiscount         Float                     @default(0.0) // Total discount given
  totalRevenue          Float                     @default(0.0) // Revenue generated
  averageOrderValue     Float                     @default(0.0) // AOV
  lifetimeValue         Float                     @default(0.0) // LTV of users
  
  // Performance metrics
  conversionRate        Float                     @default(0.0) // Conversion rate
  clickThroughRate      Float                     @default(0.0) // CTR
  abandonmentRate       Float                     @default(0.0) // Checkout abandonment
  refundRate            Float                     @default(0.0) // Refund rate
  
  // User behavior
  averageTimeToPurchase Int?                      // Time from code view to purchase
  repeatUsageRate       Float                     @default(0.0) // Users who use multiple times
  referralGenerated     Int                       @default(0) // Referrals generated
  
  // Channel performance
  channelBreakdown      Json?                     // Performance by marketing channel
  deviceBreakdown       Json?                     // Performance by device type
  locationBreakdown     Json?                     // Performance by geography
  
  // Cohort analysis
  cohortData            Json?                     // User cohort performance
  retentionRates        Json?                     // User retention rates
  churnRates            Json?                     // User churn rates
  
  // Comparative analysis
  benchmarkComparison   Json?                     // Comparison with benchmarks
  competitorAnalysis    Json?                     // Market comparison
  historicalComparison  Json?                     // Historical performance
  
  // Predictive metrics
  forecastedRevenue     Float?                    // Forecasted revenue impact
  predictedConversions  Int?                      // Predicted conversions
  trendAnalysis         Json?                     // Trend predictions
  
  // Attribution
  attributionModel      String?                   // Attribution model used
  touchpointAnalysis    Json?                     // Customer journey analysis
  influenceScore        Float?                    // Code influence on decision
  
  metadata              Json?                     // Additional analytics data
  calculatedAt          DateTime                  @default(now())
  
  @@index([discountCodeId, periodStart])
  @@index([campaignId, periodStart])
  @@index([periodType, calculatedAt])
  @@map("discount_analytics")
}
